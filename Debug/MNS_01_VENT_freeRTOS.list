
MNS_01_VENT_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  08010cc0  08010cc0  00020cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011624  08011624  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  08011624  08011624  00021624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801162c  0801162c  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801162c  0801162c  0002162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011630  08011630  00021630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08011634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300b4  2**0
                  CONTENTS
 10 .bss          00014278  200000b4  200000b4  000300b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001432c  2001432c  000300b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000263de  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000593f  00000000  00000000  000564c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f90  00000000  00000000  0005be08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d40  00000000  00000000  0005dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029276  00000000  00000000  0005fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028de5  00000000  00000000  00088d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea109  00000000  00000000  000b1b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019bc3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088e8  00000000  00000000  0019bc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ca8 	.word	0x08010ca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	08010ca8 	.word	0x08010ca8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0b0      	sub	sp, #192	; 0xc0
 8000578:	af04      	add	r7, sp, #16
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;

  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc;
  int32_t n_y_dc_max, n_x_dc_max;
  int32_t n_y_dc_max_idx = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int32_t n_x_dc_max_idx = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int32_t an_ratio[5], n_ratio_average;
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0;
 800058e:	2300      	movs	r3, #0
 8000590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 8000594:	2300      	movs	r3, #0
 8000596:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800059a:	e00f      	b.n	80005bc <maxim_heart_rate_and_oxygen_saturation+0x48>
 800059c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80005ac:	4413      	add	r3, r2
 80005ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80005b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005b6:	3301      	adds	r3, #1
 80005b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80005bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbea      	blt.n	800059c <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80005cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80005da:	e013      	b.n	8000604 <maxim_heart_rate_and_oxygen_saturation+0x90>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ;
 80005dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	4ab4      	ldr	r2, [pc, #720]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80005f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 80005fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005fe:	3301      	adds	r3, #1
 8000600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000604:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	429a      	cmp	r2, r3
 800060c:	dbe6      	blt.n	80005dc <maxim_heart_rate_and_oxygen_saturation+0x68>

  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000614:	e028      	b.n	8000668 <maxim_heart_rate_and_oxygen_saturation+0xf4>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;
 8000616:	4aab      	ldr	r2, [pc, #684]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800061c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000624:	3301      	adds	r3, #1
 8000626:	49a7      	ldr	r1, [pc, #668]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000628:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800062c:	441a      	add	r2, r3
 800062e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000632:	3302      	adds	r3, #2
 8000634:	49a3      	ldr	r1, [pc, #652]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000636:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800063a:	441a      	add	r2, r3
 800063c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000640:	3303      	adds	r3, #3
 8000642:	49a0      	ldr	r1, [pc, #640]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000644:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000648:	4413      	add	r3, r2
 800064a:	2b00      	cmp	r3, #0
 800064c:	da00      	bge.n	8000650 <maxim_heart_rate_and_oxygen_saturation+0xdc>
 800064e:	3303      	adds	r3, #3
 8000650:	109b      	asrs	r3, r3, #2
 8000652:	4619      	mov	r1, r3
 8000654:	4a9b      	ldr	r2, [pc, #620]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000656:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800065a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800065e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000662:	3301      	adds	r3, #1
 8000664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800066c:	2b5f      	cmp	r3, #95	; 0x5f
 800066e:	ddd2      	ble.n	8000616 <maxim_heart_rate_and_oxygen_saturation+0xa2>
  }
  // calculate threshold
  n_th1=0;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800067c:	e00e      	b.n	800069c <maxim_heart_rate_and_oxygen_saturation+0x128>
    n_th1 +=  an_x[k];
 800067e:	4a91      	ldr	r2, [pc, #580]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000688:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800068c:	4413      	add	r3, r2
 800068e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8000692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000696:	3301      	adds	r3, #1
 8000698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800069c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006a0:	2b63      	cmp	r3, #99	; 0x63
 80006a2:	ddec      	ble.n	800067e <maxim_heart_rate_and_oxygen_saturation+0x10a>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80006a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006a8:	4a87      	ldr	r2, [pc, #540]	; (80008c8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80006aa:	fb82 1203 	smull	r1, r2, r2, r3
 80006ae:	1152      	asrs	r2, r2, #5
 80006b0:	17db      	asrs	r3, r3, #31
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 80006b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006bc:	2b1d      	cmp	r3, #29
 80006be:	dc02      	bgt.n	80006c6 <maxim_heart_rate_and_oxygen_saturation+0x152>
 80006c0:	231e      	movs	r3, #30
 80006c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 80006c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006ca:	2b3c      	cmp	r3, #60	; 0x3c
 80006cc:	dd02      	ble.n	80006d4 <maxim_heart_rate_and_oxygen_saturation+0x160>
 80006ce:	233c      	movs	r3, #60	; 0x3c
 80006d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80006da:	e00c      	b.n	80006f6 <maxim_heart_rate_and_oxygen_saturation+0x182>
 80006dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	33b0      	adds	r3, #176	; 0xb0
 80006e4:	443b      	add	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	f843 2c88 	str.w	r2, [r3, #-136]
 80006ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006f0:	3301      	adds	r3, #1
 80006f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80006f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006fa:	2b0e      	cmp	r3, #14
 80006fc:	ddee      	ble.n	80006dc <maxim_heart_rate_and_oxygen_saturation+0x168>
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 80006fe:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000702:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000706:	230f      	movs	r3, #15
 8000708:	9302      	str	r3, [sp, #8]
 800070a:	2304      	movs	r3, #4
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	4a6b      	ldr	r2, [pc, #428]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000718:	f000 fa36 	bl	8000b88 <maxim_find_peaks>
  n_peak_interval_sum =0;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (n_npks>=2){
 8000722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000724:	2b01      	cmp	r3, #1
 8000726:	dd38      	ble.n	800079a <maxim_heart_rate_and_oxygen_saturation+0x226>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 8000728:	2301      	movs	r3, #1
 800072a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800072e:	e019      	b.n	8000764 <maxim_heart_rate_and_oxygen_saturation+0x1f0>
 8000730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	33b0      	adds	r3, #176	; 0xb0
 8000738:	443b      	add	r3, r7
 800073a:	f853 2c88 	ldr.w	r2, [r3, #-136]
 800073e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000742:	3b01      	subs	r3, #1
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	33b0      	adds	r3, #176	; 0xb0
 8000748:	443b      	add	r3, r7
 800074a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000754:	4413      	add	r3, r2
 8000756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800075a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800075e:	3301      	adds	r3, #1
 8000760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800076a:	429a      	cmp	r2, r3
 800076c:	dbe0      	blt.n	8000730 <maxim_heart_rate_and_oxygen_saturation+0x1bc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 800076e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000770:	3b01      	subs	r3, #1
 8000772:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000776:	fb92 f3f3 	sdiv	r3, r2, r3
 800077a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 800077e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000786:	fb92 f2f3 	sdiv	r2, r2, r3
 800078a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800078e:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8000790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e007      	b.n	80007aa <maxim_heart_rate_and_oxygen_saturation+0x236>
  }
  else  {
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 800079a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800079e:	4a4b      	ldr	r2, [pc, #300]	; (80008cc <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80007a0:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 80007a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007b0:	e01c      	b.n	80007ec <maxim_heart_rate_and_oxygen_saturation+0x278>
      an_x[k] =  pun_ir_buffer[k] ;
 80007b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4413      	add	r3, r2
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a40      	ldr	r2, [pc, #256]	; (80008c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80007c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ;
 80007ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4a3d      	ldr	r2, [pc, #244]	; (80008d0 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 80007da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80007e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007e6:	3301      	adds	r3, #1
 80007e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbdd      	blt.n	80007b2 <maxim_heart_rate_and_oxygen_saturation+0x23e>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks;
 80007f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  n_i_ratio_count = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800080e:	e00c      	b.n	800082a <maxim_heart_rate_and_oxygen_saturation+0x2b6>
 8000810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	33b0      	adds	r3, #176	; 0xb0
 8000818:	443b      	add	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	f843 2c9c 	str.w	r2, [r3, #-156]
 8000820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000824:	3301      	adds	r3, #1
 8000826:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800082a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800082e:	2b04      	cmp	r3, #4
 8000830:	ddee      	ble.n	8000810 <maxim_heart_rate_and_oxygen_saturation+0x29c>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000838:	e015      	b.n	8000866 <maxim_heart_rate_and_oxygen_saturation+0x2f2>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 800083a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	33b0      	adds	r3, #176	; 0xb0
 8000842:	443b      	add	r3, r7
 8000844:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000848:	2b64      	cmp	r3, #100	; 0x64
 800084a:	dd07      	ble.n	800085c <maxim_heart_rate_and_oxygen_saturation+0x2e8>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <maxim_heart_rate_and_oxygen_saturation+0x358>)
 8000850:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0;
 8000852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	e18a      	b.n	8000b72 <maxim_heart_rate_and_oxygen_saturation+0x5fe>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800085c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000860:	3301      	adds	r3, #1
 8000862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800086a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800086e:	429a      	cmp	r2, r3
 8000870:	dbe3      	blt.n	800083a <maxim_heart_rate_and_oxygen_saturation+0x2c6>
      return;
    }
  }
  // find max between two valley locations
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000878:	e129      	b.n	8000ace <maxim_heart_rate_and_oxygen_saturation+0x55a>
    n_y_dc_max= -16777216 ;
 800087a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800087e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    n_x_dc_max= -16777216;
 8000882:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 800088a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800088e:	3301      	adds	r3, #1
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	33b0      	adds	r3, #176	; 0xb0
 8000894:	443b      	add	r3, r7
 8000896:	f853 2c88 	ldr.w	r2, [r3, #-136]
 800089a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	33b0      	adds	r3, #176	; 0xb0
 80008a2:	443b      	add	r3, r7
 80008a4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	f340 810a 	ble.w	8000ac4 <maxim_heart_rate_and_oxygen_saturation+0x550>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80008b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	33b0      	adds	r3, #176	; 0xb0
 80008b8:	443b      	add	r3, r7
 80008ba:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80008be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80008c2:	e034      	b.n	800092e <maxim_heart_rate_and_oxygen_saturation+0x3ba>
 80008c4:	200000d0 	.word	0x200000d0
 80008c8:	51eb851f 	.word	0x51eb851f
 80008cc:	fffffc19 	.word	0xfffffc19
 80008d0:	20000260 	.word	0x20000260
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80008d4:	4aa8      	ldr	r2, [pc, #672]	; (8000b78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80008d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80008e2:	429a      	cmp	r2, r3
 80008e4:	da0a      	bge.n	80008fc <maxim_heart_rate_and_oxygen_saturation+0x388>
 80008e6:	4aa4      	ldr	r2, [pc, #656]	; (8000b78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80008e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80008f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80008fc:	4a9f      	ldr	r2, [pc, #636]	; (8000b7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80008fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800090a:	429a      	cmp	r2, r3
 800090c:	da0a      	bge.n	8000924 <maxim_heart_rate_and_oxygen_saturation+0x3b0>
 800090e:	4a9b      	ldr	r2, [pc, #620]	; (8000b7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8000910:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800091c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8000924:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000928:	3301      	adds	r3, #1
 800092a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800092e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000932:	3301      	adds	r3, #1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	33b0      	adds	r3, #176	; 0xb0
 8000938:	443b      	add	r3, r7
 800093a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800093e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000942:	429a      	cmp	r2, r3
 8000944:	dbc6      	blt.n	80008d4 <maxim_heart_rate_and_oxygen_saturation+0x360>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 8000946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800094a:	3301      	adds	r3, #1
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	33b0      	adds	r3, #176	; 0xb0
 8000950:	443b      	add	r3, r7
 8000952:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000956:	4a89      	ldr	r2, [pc, #548]	; (8000b7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8000958:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800095c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	33b0      	adds	r3, #176	; 0xb0
 8000964:	443b      	add	r3, r7
 8000966:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800096a:	4984      	ldr	r1, [pc, #528]	; (8000b7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 800096c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000970:	1ad2      	subs	r2, r2, r3
 8000972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	33b0      	adds	r3, #176	; 0xb0
 800097a:	443b      	add	r3, r7
 800097c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000980:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000984:	1acb      	subs	r3, r1, r3
 8000986:	fb02 f303 	mul.w	r3, r2, r3
 800098a:	677b      	str	r3, [r7, #116]	; 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ;
 800098c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	33b0      	adds	r3, #176	; 0xb0
 8000994:	443b      	add	r3, r7
 8000996:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800099a:	4a78      	ldr	r2, [pc, #480]	; (8000b7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 800099c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009a4:	3301      	adds	r3, #1
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	33b0      	adds	r3, #176	; 0xb0
 80009aa:	443b      	add	r3, r7
 80009ac:	f853 1c88 	ldr.w	r1, [r3, #-136]
 80009b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	33b0      	adds	r3, #176	; 0xb0
 80009b8:	443b      	add	r3, r7
 80009ba:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80009be:	1acb      	subs	r3, r1, r3
 80009c0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80009c2:	fb91 f3f3 	sdiv	r3, r1, r3
 80009c6:	4413      	add	r3, r2
 80009c8:	677b      	str	r3, [r7, #116]	; 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 80009ca:	4a6c      	ldr	r2, [pc, #432]	; (8000b7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80009cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	677b      	str	r3, [r7, #116]	; 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 80009da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009de:	3301      	adds	r3, #1
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	33b0      	adds	r3, #176	; 0xb0
 80009e4:	443b      	add	r3, r7
 80009e6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80009ea:	4a63      	ldr	r2, [pc, #396]	; (8000b78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80009ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	33b0      	adds	r3, #176	; 0xb0
 80009f8:	443b      	add	r3, r7
 80009fa:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80009fe:	495e      	ldr	r1, [pc, #376]	; (8000b78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8000a00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a04:	1ad2      	subs	r2, r2, r3
 8000a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	33b0      	adds	r3, #176	; 0xb0
 8000a0e:	443b      	add	r3, r7
 8000a10:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000a14:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000a18:	1acb      	subs	r3, r1, r3
 8000a1a:	fb02 f303 	mul.w	r3, r2, r3
 8000a1e:	673b      	str	r3, [r7, #112]	; 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]);
 8000a20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	33b0      	adds	r3, #176	; 0xb0
 8000a28:	443b      	add	r3, r7
 8000a2a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000a2e:	4a52      	ldr	r2, [pc, #328]	; (8000b78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8000a30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a38:	3301      	adds	r3, #1
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	33b0      	adds	r3, #176	; 0xb0
 8000a3e:	443b      	add	r3, r7
 8000a40:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8000a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	33b0      	adds	r3, #176	; 0xb0
 8000a4c:	443b      	add	r3, r7
 8000a4e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000a52:	1acb      	subs	r3, r1, r3
 8000a54:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000a56:	fb91 f3f3 	sdiv	r3, r1, r3
 8000a5a:	4413      	add	r3, r2
 8000a5c:	673b      	str	r3, [r7, #112]	; 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 8000a5e:	4a46      	ldr	r2, [pc, #280]	; (8000b78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8000a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	673b      	str	r3, [r7, #112]	; 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8000a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	11db      	asrs	r3, r3, #7
 8000a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8000a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000a82:	fb02 f303 	mul.w	r3, r2, r3
 8000a86:	11db      	asrs	r3, r3, #7
 8000a88:	66bb      	str	r3, [r7, #104]	; 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8000a8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dd19      	ble.n	8000ac4 <maxim_heart_rate_and_oxygen_saturation+0x550>
 8000a90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	dc15      	bgt.n	8000ac4 <maxim_heart_rate_and_oxygen_saturation+0x550>
 8000a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d012      	beq.n	8000ac4 <maxim_heart_rate_and_oxygen_saturation+0x550>
      {
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8000a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000aa0:	2264      	movs	r2, #100	; 0x64
 8000aa2:	fb03 f202 	mul.w	r2, r3, r2
 8000aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aa8:	fb92 f2f3 	sdiv	r2, r2, r3
 8000aac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	33b0      	adds	r3, #176	; 0xb0
 8000ab4:	443b      	add	r3, r7
 8000ab6:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 8000aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000abe:	3301      	adds	r3, #1
 8000ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8000ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	f6ff aece 	blt.w	800087a <maxim_heart_rate_and_oxygen_saturation+0x306>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f943 	bl	8000d72 <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 8000aec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000af0:	0fda      	lsrs	r2, r3, #31
 8000af2:	4413      	add	r3, r2
 8000af4:	105b      	asrs	r3, r3, #1
 8000af6:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (n_middle_idx >1)
 8000af8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	dd13      	ble.n	8000b26 <maxim_heart_rate_and_oxygen_saturation+0x5b2>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8000afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b00:	3b01      	subs	r3, #1
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	33b0      	adds	r3, #176	; 0xb0
 8000b06:	443b      	add	r3, r7
 8000b08:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 8000b0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	33b0      	adds	r3, #176	; 0xb0
 8000b12:	443b      	add	r3, r7
 8000b14:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8000b18:	4413      	add	r3, r2
 8000b1a:	0fda      	lsrs	r2, r3, #31
 8000b1c:	4413      	add	r3, r2
 8000b1e:	105b      	asrs	r3, r3, #1
 8000b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b24:	e007      	b.n	8000b36 <maxim_heart_rate_and_oxygen_saturation+0x5c2>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 8000b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	33b0      	adds	r3, #176	; 0xb0
 8000b2c:	443b      	add	r3, r7
 8000b2e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8000b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 8000b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	dd12      	ble.n	8000b64 <maxim_heart_rate_and_oxygen_saturation+0x5f0>
 8000b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b42:	2bb7      	cmp	r3, #183	; 0xb7
 8000b44:	dc0e      	bgt.n	8000b64 <maxim_heart_rate_and_oxygen_saturation+0x5f0>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8000b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b4c:	4413      	add	r3, r2
 8000b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b52:	67bb      	str	r3, [r7, #120]	; 0x78
    *pn_spo2 = n_spo2_calc ;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000b58:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8000b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e006      	b.n	8000b72 <maxim_heart_rate_and_oxygen_saturation+0x5fe>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <maxim_heart_rate_and_oxygen_saturation+0x610>)
 8000b68:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8000b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
  }
}
 8000b72:	37b0      	adds	r7, #176	; 0xb0
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000d0 	.word	0x200000d0
 8000b7c:	20000260 	.word	0x20000260
 8000b80:	08010db4 	.word	0x08010db4
 8000b84:	fffffc19 	.word	0xfffffc19

08000b88 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f000 f812 	bl	8000bca <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f000 f880 	bl	8000cb2 <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	6a3b      	ldr	r3, [r7, #32]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	bfa8      	it	ge
 8000bbc:	461a      	movge	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b087      	sub	sp, #28
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]

  while (i < n_size-1){
 8000be2:	e05a      	b.n	8000c9a <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6a3a      	ldr	r2, [r7, #32]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	da4f      	bge.n	8000c94 <maxim_peaks_above_min_height+0xca>
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c04:	3b01      	subs	r3, #1
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	440b      	add	r3, r1
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dd40      	ble.n	8000c94 <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8000c16:	e002      	b.n	8000c1e <maxim_peaks_above_min_height+0x54>
        n_width++;
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4413      	add	r3, r2
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dd0d      	ble.n	8000c46 <maxim_peaks_above_min_height+0x7c>
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	6979      	ldr	r1, [r7, #20]
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	440b      	add	r3, r1
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	440b      	add	r3, r1
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d0e8      	beq.n	8000c18 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	6979      	ldr	r1, [r7, #20]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	440b      	add	r3, r1
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	440b      	add	r3, r1
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dd13      	ble.n	8000c8a <maxim_peaks_above_min_height+0xc0>
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b0e      	cmp	r3, #14
 8000c68:	dc0f      	bgt.n	8000c8a <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1c59      	adds	r1, r3, #1
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	6011      	str	r1, [r2, #0]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4413      	add	r3, r2
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	3301      	adds	r3, #1
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4413      	add	r3, r2
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e003      	b.n	8000c92 <maxim_peaks_above_min_height+0xc8>
      }
      else
        i += n_width;
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4413      	add	r3, r2
 8000c90:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8000c92:	e002      	b.n	8000c9a <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	db9f      	blt.n	8000be4 <maxim_peaks_above_min_height+0x1a>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b088      	sub	sp, #32
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	603b      	str	r3, [r7, #0]

  int32_t i, j, n_old_npks, n_dist;

  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f895 	bl	8000df8 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	e03e      	b.n	8000d54 <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	e02c      	b.n	8000d46 <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <maxim_remove_close_peaks+0x58>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	68f9      	ldr	r1, [r7, #12]
 8000d04:	440b      	add	r3, r1
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	e001      	b.n	8000d0e <maxim_remove_close_peaks+0x5c>
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	dc04      	bgt.n	8000d24 <maxim_remove_close_peaks+0x72>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	da0d      	bge.n	8000d40 <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	441a      	add	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	1c58      	adds	r0, r3, #1
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	6008      	str	r0, [r1, #0]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	68f9      	ldr	r1, [r7, #12]
 8000d3a:	440b      	add	r3, r1
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	3301      	adds	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	dbce      	blt.n	8000cec <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3301      	adds	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	dbbb      	blt.n	8000cd6 <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f000 f804 	bl	8000d72 <maxim_sort_ascend>
}
 8000d6a:	bf00      	nop
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8000d72:	b480      	push	{r7}
 8000d74:	b087      	sub	sp, #28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e02f      	b.n	8000de2 <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e00f      	b.n	8000db4 <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	441a      	add	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	440b      	add	r3, r1
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	dd0a      	ble.n	8000dd0 <maxim_sort_ascend+0x5e>
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbe1      	blt.n	8000d94 <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	dbcb      	blt.n	8000d82 <maxim_sort_ascend+0x10>
  }
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8000e04:	2301      	movs	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	e037      	b.n	8000e7a <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	4413      	add	r3, r2
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	e00f      	b.n	8000e3c <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e22:	3b01      	subs	r3, #1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	441a      	add	r2, r3
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	440b      	add	r3, r1
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dd12      	ble.n	8000e68 <maxim_sort_indices_descend+0x70>
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4413      	add	r3, r2
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e52:	3b01      	subs	r3, #1
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	440b      	add	r3, r1
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	68f9      	ldr	r1, [r7, #12]
 8000e60:	440b      	add	r3, r1
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dcd9      	bgt.n	8000e1c <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	4413      	add	r3, r2
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3301      	adds	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbc3      	blt.n	8000e0a <maxim_sort_indices_descend+0x12>
  }
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3724      	adds	r7, #36	; 0x24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f002 f85d 	bl	8002f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 f977 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9e:	f000 fb97 	bl	80015d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ea2:	f000 fa31 	bl	8001308 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ea6:	f000 fa8b 	bl	80013c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000eaa:	f000 fab9 	bl	8001420 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000eae:	f00e ff3b 	bl	800fd28 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000eb2:	f000 faeb 	bl	800148c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000eb6:	f000 f9d3 	bl	8001260 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000eba:	f000 fa53 	bl	8001364 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  //max30102 code
  config_max30102_sensor();
 8000ebe:	f000 fc85 	bl	80017cc <config_max30102_sensor>
  initiate_max30102_temp_measurement();
 8000ec2:	f000 fca7 	bl	8001814 <initiate_max30102_temp_measurement>
 ///////////////////////////////////////////Initialize OLED START//////////////////////////////////////////////////////////
  SSD1306_Init (); // initialize the display
 8000ec6:	f001 fa67 	bl	8002398 <SSD1306_Init>
 //put constant parameters on the screen
  SSD1306_GotoXY (1,1); // goto 10, 10
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f001 fbcd 	bl	800266c <SSD1306_GotoXY>
  SSD1306_Puts ("MNS_01_VENT", &Font_7x10, 1); // print name of vent
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4988      	ldr	r1, [pc, #544]	; (80010f8 <main+0x268>)
 8000ed6:	4889      	ldr	r0, [pc, #548]	; (80010fc <main+0x26c>)
 8000ed8:	f001 fc5e 	bl	8002798 <SSD1306_Puts>

  SSD1306_GotoXY (1, 10);
 8000edc:	210a      	movs	r1, #10
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f001 fbc4 	bl	800266c <SSD1306_GotoXY>
  SSD1306_Puts ("Temp:", &Font_7x10, 1); //temp
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4984      	ldr	r1, [pc, #528]	; (80010f8 <main+0x268>)
 8000ee8:	4885      	ldr	r0, [pc, #532]	; (8001100 <main+0x270>)
 8000eea:	f001 fc55 	bl	8002798 <SSD1306_Puts>

  SSD1306_GotoXY (1, 20);
 8000eee:	2114      	movs	r1, #20
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f001 fbbb 	bl	800266c <SSD1306_GotoXY>
  SSD1306_Puts ("SPO2:", &Font_7x10, 1);//spo2
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	497f      	ldr	r1, [pc, #508]	; (80010f8 <main+0x268>)
 8000efa:	4882      	ldr	r0, [pc, #520]	; (8001104 <main+0x274>)
 8000efc:	f001 fc4c 	bl	8002798 <SSD1306_Puts>

  SSD1306_GotoXY (1, 30);
 8000f00:	211e      	movs	r1, #30
 8000f02:	2001      	movs	r0, #1
 8000f04:	f001 fbb2 	bl	800266c <SSD1306_GotoXY>
  SSD1306_Puts ("HR:", &Font_7x10, 1); //HR
 8000f08:	2201      	movs	r2, #1
 8000f0a:	497b      	ldr	r1, [pc, #492]	; (80010f8 <main+0x268>)
 8000f0c:	487e      	ldr	r0, [pc, #504]	; (8001108 <main+0x278>)
 8000f0e:	f001 fc43 	bl	8002798 <SSD1306_Puts>

  SSD1306_GotoXY (1, 40);
 8000f12:	2128      	movs	r1, #40	; 0x28
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 fba9 	bl	800266c <SSD1306_GotoXY>
  SSD1306_Puts ("VPB:", &Font_7x10, 1);//VPB
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4976      	ldr	r1, [pc, #472]	; (80010f8 <main+0x268>)
 8000f1e:	487b      	ldr	r0, [pc, #492]	; (800110c <main+0x27c>)
 8000f20:	f001 fc3a 	bl	8002798 <SSD1306_Puts>

  SSD1306_GotoXY (1, 50);
 8000f24:	2132      	movs	r1, #50	; 0x32
 8000f26:	2001      	movs	r0, #1
 8000f28:	f001 fba0 	bl	800266c <SSD1306_GotoXY>
  SSD1306_Puts ("BPM:", &Font_7x10, 1); //BPM
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4972      	ldr	r1, [pc, #456]	; (80010f8 <main+0x268>)
 8000f30:	4877      	ldr	r0, [pc, #476]	; (8001110 <main+0x280>)
 8000f32:	f001 fc31 	bl	8002798 <SSD1306_Puts>

  SSD1306_GotoXY (1, 60);
 8000f36:	213c      	movs	r1, #60	; 0x3c
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f001 fb97 	bl	800266c <SSD1306_GotoXY>
  SSD1306_Puts ("I:E:", &Font_7x10, 1);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	496d      	ldr	r1, [pc, #436]	; (80010f8 <main+0x268>)
 8000f42:	4874      	ldr	r0, [pc, #464]	; (8001114 <main+0x284>)
 8000f44:	f001 fc28 	bl	8002798 <SSD1306_Puts>

  taskENTER_CRITICAL();
 8000f48:	f00e fc0e 	bl	800f768 <vPortEnterCritical>
  SSD1306_UpdateScreen(); // update screen
 8000f4c:	f001 fae8 	bl	8002520 <SSD1306_UpdateScreen>
  taskEXIT_CRITICAL();
 8000f50:	f00e fc3a 	bl	800f7c8 <vPortExitCritical>
 ///////////////////////////////////////////Initialize OLED START///////////////////////////////////////////////////////
  //create queue for holding spo2 and hr
  xQueueReadings = xQueueCreate( 1, sizeof( int8_t ) );
 8000f54:	2200      	movs	r2, #0
 8000f56:	2101      	movs	r1, #1
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f00c fb87 	bl	800d66c <xQueueGenericCreate>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a6d      	ldr	r2, [pc, #436]	; (8001118 <main+0x288>)
 8000f62:	6013      	str	r3, [r2, #0]

//  status = xTaskCreate(uart_task_handler, "uart", 120, "uart", 0, &uart_task_handle);
//  configASSERT(status == pdPASS);
//
  status = xTaskCreate(motor_task_handler, "motor", 160, "motor", 3, &motor_task_handle);
 8000f64:	4b6d      	ldr	r3, [pc, #436]	; (800111c <main+0x28c>)
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2303      	movs	r3, #3
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4b6c      	ldr	r3, [pc, #432]	; (8001120 <main+0x290>)
 8000f6e:	22a0      	movs	r2, #160	; 0xa0
 8000f70:	496b      	ldr	r1, [pc, #428]	; (8001120 <main+0x290>)
 8000f72:	486c      	ldr	r0, [pc, #432]	; (8001124 <main+0x294>)
 8000f74:	f00c ff7a 	bl	800de6c <xTaskCreate>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a6b      	ldr	r2, [pc, #428]	; (8001128 <main+0x298>)
 8000f7c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <main+0x298>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d00a      	beq.n	8000f9c <main+0x10c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f8a:	f383 8811 	msr	BASEPRI, r3
 8000f8e:	f3bf 8f6f 	isb	sy
 8000f92:	f3bf 8f4f 	dsb	sy
 8000f96:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000f98:	bf00      	nop
 8000f9a:	e7fe      	b.n	8000f9a <main+0x10a>

  status = xTaskCreate(max_sample_task_handler, "max_sample", 200, "sampling", 2, &max_sample_task_handle);
 8000f9c:	4b63      	ldr	r3, [pc, #396]	; (800112c <main+0x29c>)
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <main+0x2a0>)
 8000fa6:	22c8      	movs	r2, #200	; 0xc8
 8000fa8:	4962      	ldr	r1, [pc, #392]	; (8001134 <main+0x2a4>)
 8000faa:	4863      	ldr	r0, [pc, #396]	; (8001138 <main+0x2a8>)
 8000fac:	f00c ff5e 	bl	800de6c <xTaskCreate>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a5d      	ldr	r2, [pc, #372]	; (8001128 <main+0x298>)
 8000fb4:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000fb6:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <main+0x298>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d00a      	beq.n	8000fd4 <main+0x144>
        __asm volatile
 8000fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc2:	f383 8811 	msr	BASEPRI, r3
 8000fc6:	f3bf 8f6f 	isb	sy
 8000fca:	f3bf 8f4f 	dsb	sy
 8000fce:	61bb      	str	r3, [r7, #24]
    }
 8000fd0:	bf00      	nop
 8000fd2:	e7fe      	b.n	8000fd2 <main+0x142>

  status = xTaskCreate(max_calc_task_handler, "max_calc", 200, "calculating", 3, &max_calc_task_handle);
 8000fd4:	4b59      	ldr	r3, [pc, #356]	; (800113c <main+0x2ac>)
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	2303      	movs	r3, #3
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4b58      	ldr	r3, [pc, #352]	; (8001140 <main+0x2b0>)
 8000fde:	22c8      	movs	r2, #200	; 0xc8
 8000fe0:	4958      	ldr	r1, [pc, #352]	; (8001144 <main+0x2b4>)
 8000fe2:	4859      	ldr	r0, [pc, #356]	; (8001148 <main+0x2b8>)
 8000fe4:	f00c ff42 	bl	800de6c <xTaskCreate>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a4f      	ldr	r2, [pc, #316]	; (8001128 <main+0x298>)
 8000fec:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000fee:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <main+0x298>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d00a      	beq.n	800100c <main+0x17c>
        __asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	617b      	str	r3, [r7, #20]
    }
 8001008:	bf00      	nop
 800100a:	e7fe      	b.n	800100a <main+0x17a>

  status = xTaskCreate(pressure_task_handler, "pressure_task", 100, "pressure calc", 1, &pressure_task_handle);
 800100c:	4b4f      	ldr	r3, [pc, #316]	; (800114c <main+0x2bc>)
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	2301      	movs	r3, #1
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <main+0x2c0>)
 8001016:	2264      	movs	r2, #100	; 0x64
 8001018:	494e      	ldr	r1, [pc, #312]	; (8001154 <main+0x2c4>)
 800101a:	484f      	ldr	r0, [pc, #316]	; (8001158 <main+0x2c8>)
 800101c:	f00c ff26 	bl	800de6c <xTaskCreate>
 8001020:	4603      	mov	r3, r0
 8001022:	4a41      	ldr	r2, [pc, #260]	; (8001128 <main+0x298>)
 8001024:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <main+0x298>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d00a      	beq.n	8001044 <main+0x1b4>
        __asm volatile
 800102e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001032:	f383 8811 	msr	BASEPRI, r3
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	f3bf 8f4f 	dsb	sy
 800103e:	613b      	str	r3, [r7, #16]
    }
 8001040:	bf00      	nop
 8001042:	e7fe      	b.n	8001042 <main+0x1b2>

  status = xTaskCreate(oled_task_handler, "oled_task", 200, "Hello", 1, &oled_task_handle);
 8001044:	4b45      	ldr	r3, [pc, #276]	; (800115c <main+0x2cc>)
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	2301      	movs	r3, #1
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4b44      	ldr	r3, [pc, #272]	; (8001160 <main+0x2d0>)
 800104e:	22c8      	movs	r2, #200	; 0xc8
 8001050:	4944      	ldr	r1, [pc, #272]	; (8001164 <main+0x2d4>)
 8001052:	4845      	ldr	r0, [pc, #276]	; (8001168 <main+0x2d8>)
 8001054:	f00c ff0a 	bl	800de6c <xTaskCreate>
 8001058:	4603      	mov	r3, r0
 800105a:	4a33      	ldr	r2, [pc, #204]	; (8001128 <main+0x298>)
 800105c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800105e:	4b32      	ldr	r3, [pc, #200]	; (8001128 <main+0x298>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d00a      	beq.n	800107c <main+0x1ec>
        __asm volatile
 8001066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106a:	f383 8811 	msr	BASEPRI, r3
 800106e:	f3bf 8f6f 	isb	sy
 8001072:	f3bf 8f4f 	dsb	sy
 8001076:	60fb      	str	r3, [r7, #12]
    }
 8001078:	bf00      	nop
 800107a:	e7fe      	b.n	800107a <main+0x1ea>

  status = xTaskCreate(adc_task_handler, "adc_task", 180, "adc", 1, &adc_task_handle);
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <main+0x2dc>)
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2301      	movs	r3, #1
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <main+0x2e0>)
 8001086:	22b4      	movs	r2, #180	; 0xb4
 8001088:	493a      	ldr	r1, [pc, #232]	; (8001174 <main+0x2e4>)
 800108a:	483b      	ldr	r0, [pc, #236]	; (8001178 <main+0x2e8>)
 800108c:	f00c feee 	bl	800de6c <xTaskCreate>
 8001090:	4603      	mov	r3, r0
 8001092:	4a25      	ldr	r2, [pc, #148]	; (8001128 <main+0x298>)
 8001094:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <main+0x298>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d00a      	beq.n	80010b4 <main+0x224>
        __asm volatile
 800109e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a2:	f383 8811 	msr	BASEPRI, r3
 80010a6:	f3bf 8f6f 	isb	sy
 80010aa:	f3bf 8f4f 	dsb	sy
 80010ae:	60bb      	str	r3, [r7, #8]
    }
 80010b0:	bf00      	nop
 80010b2:	e7fe      	b.n	80010b2 <main+0x222>

  status = xTaskCreate(indicator_task_handler, "indicator_task", 80, "led-indicators", 1, &indicator_task_handle);
 80010b4:	4b31      	ldr	r3, [pc, #196]	; (800117c <main+0x2ec>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <main+0x2f0>)
 80010be:	2250      	movs	r2, #80	; 0x50
 80010c0:	4930      	ldr	r1, [pc, #192]	; (8001184 <main+0x2f4>)
 80010c2:	4831      	ldr	r0, [pc, #196]	; (8001188 <main+0x2f8>)
 80010c4:	f00c fed2 	bl	800de6c <xTaskCreate>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <main+0x298>)
 80010cc:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <main+0x298>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d00a      	beq.n	80010ec <main+0x25c>
        __asm volatile
 80010d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010da:	f383 8811 	msr	BASEPRI, r3
 80010de:	f3bf 8f6f 	isb	sy
 80010e2:	f3bf 8f4f 	dsb	sy
 80010e6:	607b      	str	r3, [r7, #4]
    }
 80010e8:	bf00      	nop
 80010ea:	e7fe      	b.n	80010ea <main+0x25a>



  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80010ec:	f00d f8ec 	bl	800e2c8 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80010f0:	f00e fe40 	bl	800fd74 <MX_USB_HOST_Process>
 80010f4:	e7fc      	b.n	80010f0 <main+0x260>
 80010f6:	bf00      	nop
 80010f8:	20000000 	.word	0x20000000
 80010fc:	08010cc0 	.word	0x08010cc0
 8001100:	08010ccc 	.word	0x08010ccc
 8001104:	08010cd4 	.word	0x08010cd4
 8001108:	08010cdc 	.word	0x08010cdc
 800110c:	08010ce0 	.word	0x08010ce0
 8001110:	08010ce8 	.word	0x08010ce8
 8001114:	08010cf0 	.word	0x08010cf0
 8001118:	200005e8 	.word	0x200005e8
 800111c:	200005c8 	.word	0x200005c8
 8001120:	08010cf8 	.word	0x08010cf8
 8001124:	080018d9 	.word	0x080018d9
 8001128:	200005e4 	.word	0x200005e4
 800112c:	200005cc 	.word	0x200005cc
 8001130:	08010d00 	.word	0x08010d00
 8001134:	08010d0c 	.word	0x08010d0c
 8001138:	080019ad 	.word	0x080019ad
 800113c:	200005d0 	.word	0x200005d0
 8001140:	08010d18 	.word	0x08010d18
 8001144:	08010d24 	.word	0x08010d24
 8001148:	080019d5 	.word	0x080019d5
 800114c:	200005d4 	.word	0x200005d4
 8001150:	08010d30 	.word	0x08010d30
 8001154:	08010d40 	.word	0x08010d40
 8001158:	08001be5 	.word	0x08001be5
 800115c:	200005d8 	.word	0x200005d8
 8001160:	08010d50 	.word	0x08010d50
 8001164:	08010d58 	.word	0x08010d58
 8001168:	08001c4d 	.word	0x08001c4d
 800116c:	200005dc 	.word	0x200005dc
 8001170:	08010d64 	.word	0x08010d64
 8001174:	08010d68 	.word	0x08010d68
 8001178:	08001dd9 	.word	0x08001dd9
 800117c:	200005e0 	.word	0x200005e0
 8001180:	08010d74 	.word	0x08010d74
 8001184:	08010d84 	.word	0x08010d84
 8001188:	08001eed 	.word	0x08001eed

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b094      	sub	sp, #80	; 0x50
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	2230      	movs	r2, #48	; 0x30
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f00f f90e 	bl	80103bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <SystemClock_Config+0xcc>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <SystemClock_Config+0xcc>)
 80011ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011be:	6413      	str	r3, [r2, #64]	; 0x40
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <SystemClock_Config+0xcc>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <SystemClock_Config+0xd0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <SystemClock_Config+0xd0>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <SystemClock_Config+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011fc:	2308      	movs	r3, #8
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001200:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001204:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001206:	2302      	movs	r3, #2
 8001208:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800120a:	2307      	movs	r3, #7
 800120c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fb18 	bl	8008848 <HAL_RCC_OscConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800121e:	f000 fecd 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001222:	230f      	movs	r3, #15
 8001224:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001226:	2302      	movs	r3, #2
 8001228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001232:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2105      	movs	r1, #5
 8001240:	4618      	mov	r0, r3
 8001242:	f007 fd79 	bl	8008d38 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800124c:	f000 feb6 	bl	8001fbc <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3750      	adds	r7, #80	; 0x50
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_ADC1_Init+0x9c>)
 8001274:	4a22      	ldr	r2, [pc, #136]	; (8001300 <MX_ADC1_Init+0xa0>)
 8001276:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_ADC1_Init+0x9c>)
 800127a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800127e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_ADC1_Init+0x9c>)
 8001282:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001286:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_ADC1_Init+0x9c>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_ADC1_Init+0x9c>)
 8001290:	2200      	movs	r2, #0
 8001292:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_ADC1_Init+0x9c>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_ADC1_Init+0x9c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_ADC1_Init+0x9c>)
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <MX_ADC1_Init+0xa4>)
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_ADC1_Init+0x9c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_ADC1_Init+0x9c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_ADC1_Init+0x9c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_ADC1_Init+0x9c>)
 80012be:	2201      	movs	r2, #1
 80012c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <MX_ADC1_Init+0x9c>)
 80012c4:	f001 feac 	bl	8003020 <HAL_ADC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80012ce:	f000 fe75 	bl	8001fbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_ADC1_Init+0x9c>)
 80012e4:	f002 f87e 	bl	80033e4 <HAL_ADC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012ee:	f000 fe65 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200003f0 	.word	0x200003f0
 8001300:	40012000 	.word	0x40012000
 8001304:	0f000001 	.word	0x0f000001

08001308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C1_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C1_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C1_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C1_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C1_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C1_Init+0x50>)
 8001346:	f004 f957 	bl	80055f8 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001350:	f000 fe34 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000438 	.word	0x20000438
 800135c:	40005400 	.word	0x40005400
 8001360:	00061a80 	.word	0x00061a80

08001364 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_I2C3_Init+0x50>)
 800136a:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <MX_I2C3_Init+0x54>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_I2C3_Init+0x50>)
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <MX_I2C3_Init+0x58>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_I2C3_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_I2C3_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_I2C3_Init+0x50>)
 8001382:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001386:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <MX_I2C3_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_I2C3_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_I2C3_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_I2C3_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_I2C3_Init+0x50>)
 80013a2:	f004 f929 	bl	80055f8 <HAL_I2C_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013ac:	f000 fe06 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000048c 	.word	0x2000048c
 80013b8:	40005c00 	.word	0x40005c00
 80013bc:	00061a80 	.word	0x00061a80

080013c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_I2S3_Init+0x54>)
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <MX_I2S3_Init+0x58>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2S3_Init+0x54>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_I2S3_Init+0x54>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_I2S3_Init+0x54>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <MX_I2S3_Init+0x54>)
 80013e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_I2S3_Init+0x54>)
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <MX_I2S3_Init+0x5c>)
 80013ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_I2S3_Init+0x54>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_I2S3_Init+0x54>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_I2S3_Init+0x54>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_I2S3_Init+0x54>)
 8001400:	f006 fd82 	bl	8007f08 <HAL_I2S_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800140a:	f000 fdd7 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200004e0 	.word	0x200004e0
 8001418:	40003c00 	.word	0x40003c00
 800141c:	00017700 	.word	0x00017700

08001420 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_SPI1_Init+0x64>)
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <MX_SPI1_Init+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_SPI1_Init+0x64>)
 800142c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_SPI1_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_SPI1_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_SPI1_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_SPI1_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_SPI1_Init+0x64>)
 800144c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001450:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_SPI1_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_SPI1_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_SPI1_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_SPI1_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_SPI1_Init+0x64>)
 800146c:	220a      	movs	r2, #10
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_SPI1_Init+0x64>)
 8001472:	f007 ffdf 	bl	8009434 <HAL_SPI_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800147c:	f000 fd9e 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000528 	.word	0x20000528
 8001488:	40013000 	.word	0x40013000

0800148c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b096      	sub	sp, #88	; 0x58
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2220      	movs	r2, #32
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00e ff79 	bl	80103bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80014cc:	4a3f      	ldr	r2, [pc, #252]	; (80015cc <MX_TIM1_Init+0x140>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 80014d0:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80014d2:	f44f 7252 	mov.w	r2, #840	; 0x348
 80014d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80014e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ec:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f8:	4833      	ldr	r0, [pc, #204]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80014fa:	f008 f824 	bl	8009546 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001504:	f000 fd5a 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001512:	4619      	mov	r1, r3
 8001514:	482c      	ldr	r0, [pc, #176]	; (80015c8 <MX_TIM1_Init+0x13c>)
 8001516:	f008 faf9 	bl	8009b0c <HAL_TIM_ConfigClockSource>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001520:	f000 fd4c 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001524:	4828      	ldr	r0, [pc, #160]	; (80015c8 <MX_TIM1_Init+0x13c>)
 8001526:	f008 f8cd 	bl	80096c4 <HAL_TIM_PWM_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001530:	f000 fd44 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001540:	4619      	mov	r1, r3
 8001542:	4821      	ldr	r0, [pc, #132]	; (80015c8 <MX_TIM1_Init+0x13c>)
 8001544:	f008 febc 	bl	800a2c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800154e:	f000 fd35 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001552:	2360      	movs	r3, #96	; 0x60
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	4814      	ldr	r0, [pc, #80]	; (80015c8 <MX_TIM1_Init+0x13c>)
 8001578:	f008 fa06 	bl	8009988 <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001582:	f000 fd1b 	bl	8001fbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800159a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80015aa:	f008 ff05 	bl	800a3b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80015b4:	f000 fd02 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <MX_TIM1_Init+0x13c>)
 80015ba:	f001 fbc7 	bl	8002d4c <HAL_TIM_MspPostInit>

}
 80015be:	bf00      	nop
 80015c0:	3758      	adds	r7, #88	; 0x58
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000580 	.word	0x20000580
 80015cc:	40010000 	.word	0x40010000

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a71      	ldr	r2, [pc, #452]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a6a      	ldr	r2, [pc, #424]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a63      	ldr	r2, [pc, #396]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a5c      	ldr	r2, [pc, #368]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a55      	ldr	r2, [pc, #340]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a4e      	ldr	r2, [pc, #312]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <MX_GPIO_Init+0x1e4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2108      	movs	r1, #8
 8001692:	4849      	ldr	r0, [pc, #292]	; (80017b8 <MX_GPIO_Init+0x1e8>)
 8001694:	f002 fb72 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2101      	movs	r1, #1
 800169c:	4847      	ldr	r0, [pc, #284]	; (80017bc <MX_GPIO_Init+0x1ec>)
 800169e:	f002 fb6d 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016a2:	2200      	movs	r2, #0
 80016a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80016a8:	4845      	ldr	r0, [pc, #276]	; (80017c0 <MX_GPIO_Init+0x1f0>)
 80016aa:	f002 fb67 	bl	8003d7c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80016ae:	2308      	movs	r3, #8
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	483c      	ldr	r0, [pc, #240]	; (80017b8 <MX_GPIO_Init+0x1e8>)
 80016c6:	f002 f9bd 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4836      	ldr	r0, [pc, #216]	; (80017bc <MX_GPIO_Init+0x1ec>)
 80016e2:	f002 f9af 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016e6:	2308      	movs	r3, #8
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f6:	2305      	movs	r3, #5
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	482e      	ldr	r0, [pc, #184]	; (80017bc <MX_GPIO_Init+0x1ec>)
 8001702:	f002 f99f 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001706:	2301      	movs	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800170a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800170e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	482a      	ldr	r0, [pc, #168]	; (80017c4 <MX_GPIO_Init+0x1f4>)
 800171c:	f002 f992 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001720:	2304      	movs	r3, #4
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4825      	ldr	r0, [pc, #148]	; (80017c8 <MX_GPIO_Init+0x1f8>)
 8001734:	f002 f986 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800174a:	2305      	movs	r3, #5
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <MX_GPIO_Init+0x1f8>)
 8001756:	f002 f975 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800175a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800175e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_GPIO_Init+0x1f0>)
 8001774:	f002 f966 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_GPIO_Init+0x1f0>)
 800178c:	f002 f95a 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001794:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_GPIO_Init+0x1e8>)
 80017a6:	f002 f94d 	bl	8003a44 <HAL_GPIO_Init>

}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	; 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400

080017cc <config_max30102_sensor>:

/* USER CODE BEGIN 4 */
///////////////////////////////////////////////MAX30102 CODE START//////////////////////////////////////////////////////////////////////
void config_max30102_sensor(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	  //Initiate the MAX30102 code
	   max30102_init(&max, &hi2c3);
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <config_max30102_sensor+0x40>)
 80017d2:	480f      	ldr	r0, [pc, #60]	; (8001810 <config_max30102_sensor+0x44>)
 80017d4:	f000 fbf7 	bl	8001fc6 <max30102_init>
	   max30102_reset(&max);
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <config_max30102_sensor+0x44>)
 80017da:	f000 fc64 	bl	80020a6 <max30102_reset>
	   max30102_clear_fifo(&max);
 80017de:	480c      	ldr	r0, [pc, #48]	; (8001810 <config_max30102_sensor+0x44>)
 80017e0:	f000 fc72 	bl	80020c8 <max30102_clear_fifo>

	   //set mode for sensor
	     max30102_set_mode(&max);
 80017e4:	480a      	ldr	r0, [pc, #40]	; (8001810 <config_max30102_sensor+0x44>)
 80017e6:	f000 fc8e 	bl	8002106 <max30102_set_mode>
	     //enable interrupts
	     max30102_interrupt_config(&max);
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <config_max30102_sensor+0x44>)
 80017ec:	f000 fc9c 	bl	8002128 <max30102_interrupt_config>

	     //spo2 config
	     max30102_spo2_config(&max);
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <config_max30102_sensor+0x44>)
 80017f2:	f000 fcaa 	bl	800214a <max30102_spo2_config>

	     //fifo config
	     max30102_fifo_config(&max);
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <config_max30102_sensor+0x44>)
 80017f8:	f000 fcb8 	bl	800216c <max30102_fifo_config>

	     //led1 current setting
	      max30102_led1_settings(&max);
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <config_max30102_sensor+0x44>)
 80017fe:	f000 fcc6 	bl	800218e <max30102_led1_settings>

	     //led2 current setting
	     max30102_led2_settings(&max);
 8001802:	4803      	ldr	r0, [pc, #12]	; (8001810 <config_max30102_sensor+0x44>)
 8001804:	f000 fcd4 	bl	80021b0 <max30102_led2_settings>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000048c 	.word	0x2000048c
 8001810:	200005ec 	.word	0x200005ec

08001814 <initiate_max30102_temp_measurement>:

void initiate_max30102_temp_measurement(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    //initiate 1 temperature measurement
    max30102_set_die_temp_en(&max);
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <initiate_max30102_temp_measurement+0x14>)
 800181a:	f000 fcda 	bl	80021d2 <max30102_set_die_temp_en>
    max30102_set_die_temp_rdy(&max);
 800181e:	4802      	ldr	r0, [pc, #8]	; (8001828 <initiate_max30102_temp_measurement+0x14>)
 8001820:	f000 fce8 	bl	80021f4 <max30102_set_die_temp_rdy>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200005ec 	.word	0x200005ec

0800182c <setIE>:
//////////////////////////////////////////////MAX30102 CODE END//////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////ADC code start ///////////////////////////////////////////////////////////////////////////
void setIE(uint8_t x)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	  if(x >= 0 && x <= 63)
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b3f      	cmp	r3, #63	; 0x3f
 800183a:	d802      	bhi.n	8001842 <setIE+0x16>
	  {
	     expirationRatio = 1;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <setIE+0x58>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
	  }
	  if(x >= 64 && x <= 127)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b3f      	cmp	r3, #63	; 0x3f
 8001846:	d906      	bls.n	8001856 <setIE+0x2a>
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db02      	blt.n	8001856 <setIE+0x2a>
	  	  {
	  	     expirationRatio = 2;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <setIE+0x58>)
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
	  	  }
	  if(x >= 128 && x <= 191)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	da05      	bge.n	800186a <setIE+0x3e>
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2bbf      	cmp	r3, #191	; 0xbf
 8001862:	d802      	bhi.n	800186a <setIE+0x3e>
	  	  {
	  	     expirationRatio = 3;
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <setIE+0x58>)
 8001866:	2203      	movs	r2, #3
 8001868:	701a      	strb	r2, [r3, #0]
	  	  }
	  if(x >= 192 && x <= 255)
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2bbf      	cmp	r3, #191	; 0xbf
 800186e:	d902      	bls.n	8001876 <setIE+0x4a>
	 	  {
	 	  	expirationRatio = 4;
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <setIE+0x58>)
 8001872:	2204      	movs	r2, #4
 8001874:	701a      	strb	r2, [r3, #0]
	 	  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2000000d 	.word	0x2000000d

08001888 <map>:

uint16_t map(uint16_t value, uint16_t A, uint16_t B, uint16_t a, uint16_t b)
{
 8001888:	b490      	push	{r4, r7}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4604      	mov	r4, r0
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4623      	mov	r3, r4
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	4603      	mov	r3, r0
 800189c:	80bb      	strh	r3, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]
 80018a2:	4613      	mov	r3, r2
 80018a4:	803b      	strh	r3, [r7, #0]
	uint16_t v = value;
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	81fb      	strh	r3, [r7, #14]
	return (v - A)*(b-a)/(B-A) + a;
 80018aa:	89fa      	ldrh	r2, [r7, #14]
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	8b39      	ldrh	r1, [r7, #24]
 80018b2:	883a      	ldrh	r2, [r7, #0]
 80018b4:	1a8a      	subs	r2, r1, r2
 80018b6:	fb03 f202 	mul.w	r2, r3, r2
 80018ba:	8879      	ldrh	r1, [r7, #2]
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	1acb      	subs	r3, r1, r3
 80018c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	883b      	ldrh	r3, [r7, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	b29b      	uxth	r3, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc90      	pop	{r4, r7}
 80018d4:	4770      	bx	lr
	...

080018d8 <motor_task_handler>:
//		  taskEXIT_CRITICAL();

//	}
//}
static void motor_task_handler(void* parameters)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 uint32_t breathLength = 60000/breathsPerMinute; // get total lenght of inspiration and expiration
 80018e0:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <motor_task_handler+0xbc>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80018ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80018ee:	623b      	str	r3, [r7, #32]
		 uint32_t lengthOfInspiration = (inspirationRatio * breathLength)/(inspirationRatio + expirationRatio);//get duration for inspiration
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <motor_task_handler+0xc0>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	4a26      	ldr	r2, [pc, #152]	; (8001998 <motor_task_handler+0xc0>)
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	4611      	mov	r1, r2
 8001902:	4a26      	ldr	r2, [pc, #152]	; (800199c <motor_task_handler+0xc4>)
 8001904:	7812      	ldrb	r2, [r2, #0]
 8001906:	440a      	add	r2, r1
 8001908:	fbb3 f3f2 	udiv	r3, r3, r2
 800190c:	61fb      	str	r3, [r7, #28]
		 uint32_t lengthOfExpiration = breathLength - lengthOfInspiration; //get inspiration length
 800190e:	6a3a      	ldr	r2, [r7, #32]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	61bb      	str	r3, [r7, #24]

		 uint32_t steps = volumePerBreath /breathsPerMinute; //steps taken in the for loop
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <motor_task_handler+0xc8>)
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <motor_task_handler+0xbc>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	617b      	str	r3, [r7, #20]
		 uint32_t stepSize = volumePerBreath / steps; // size of each step in the inspiration cycle
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <motor_task_handler+0xc8>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	613b      	str	r3, [r7, #16]
		 uint32_t secDelayPerInsp = lengthOfInspiration/steps; //delay per step
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	60fb      	str	r3, [r7, #12]

		//Inspiration phase
		for(uint32_t i = 100; i<=volumePerBreath; i += stepSize)
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e013      	b.n	800196c <motor_task_handler+0x94>
		{
		 htim1.Instance -> CCR1 = i;
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <motor_task_handler+0xcc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194a:	635a      	str	r2, [r3, #52]	; 0x34
		 vTaskDelay(pdMS_TO_TICKS(secDelayPerInsp));
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <motor_task_handler+0xd0>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	4618      	mov	r0, r3
 8001960:	f00c fc7e 	bl	800e260 <vTaskDelay>
		for(uint32_t i = 100; i<=volumePerBreath; i += stepSize)
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4413      	add	r3, r2
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <motor_task_handler+0xc8>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	4293      	cmp	r3, r2
 8001976:	d9e5      	bls.n	8001944 <motor_task_handler+0x6c>
		}

		vTaskDelay(pdMS_TO_TICKS(lengthOfExpiration));
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <motor_task_handler+0xd0>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	4618      	mov	r0, r3
 800198c:	f00c fc68 	bl	800e260 <vTaskDelay>
	{
 8001990:	e7a6      	b.n	80018e0 <motor_task_handler+0x8>
 8001992:	bf00      	nop
 8001994:	2000000a 	.word	0x2000000a
 8001998:	2000000c 	.word	0x2000000c
 800199c:	2000000d 	.word	0x2000000d
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000580 	.word	0x20000580
 80019a8:	10624dd3 	.word	0x10624dd3

080019ac <max_sample_task_handler>:
	}
}
static void max_sample_task_handler(void* parameters)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80019b4:	f00c fde4 	bl	800e580 <xTaskGetTickCount>
 80019b8:	4603      	mov	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]
	while(1)
	{
	  max30102_interrupt_handler(&max); //get max30102 sample
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <max_sample_task_handler+0x24>)
 80019be:	f000 fc2b 	bl	8002218 <max30102_interrupt_handler>
	  vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 40 ) );
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	2128      	movs	r1, #40	; 0x28
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00c fbcb 	bl	800e164 <xTaskDelayUntil>
	  max30102_interrupt_handler(&max); //get max30102 sample
 80019ce:	e7f5      	b.n	80019bc <max_sample_task_handler+0x10>
 80019d0:	200005ec 	.word	0x200005ec

080019d4 <max_calc_task_handler>:
	}
}
static void max_calc_task_handler(void* parameters)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af04      	add	r7, sp, #16
 80019da:	6078      	str	r0, [r7, #4]
	int8_t valueToSend = 32;
 80019dc:	2320      	movs	r3, #32
 80019de:	74fb      	strb	r3, [r7, #19]
	BaseType_t xStatus;
	TickType_t xLastWakeTime;

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80019e0:	f00c fdce 	bl	800e580 <xTaskGetTickCount>
 80019e4:	4603      	mov	r3, r0
 80019e6:	60fb      	str	r3, [r7, #12]
	int8_t k = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
		t = max.temperature;
 80019ec:	4b72      	ldr	r3, [pc, #456]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a72      	ldr	r2, [pc, #456]	; (8001bbc <max_calc_task_handler+0x1e8>)
 80019f2:	6013      	str	r3, [r2, #0]
		if(initialReading == 0)
 80019f4:	4b72      	ldr	r3, [pc, #456]	; (8001bc0 <max_calc_task_handler+0x1ec>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 8096 	bne.w	8001b2a <max_calc_task_handler+0x156>
		{
			if(k == 0)
 80019fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11a      	bne.n	8001a3c <max_calc_task_handler+0x68>
			{
				//store first 25 samples and store in buffer
				 for(uint8_t x = 0; x<=24; x++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	77bb      	strb	r3, [r7, #30]
 8001a0a:	e014      	b.n	8001a36 <max_calc_task_handler+0x62>
				{
				irBuffer[x] = max._ir_samples[x];
 8001a0c:	7fba      	ldrb	r2, [r7, #30]
 8001a0e:	7fbb      	ldrb	r3, [r7, #30]
 8001a10:	4969      	ldr	r1, [pc, #420]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001a12:	3202      	adds	r2, #2
 8001a14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a18:	496a      	ldr	r1, [pc, #424]	; (8001bc4 <max_calc_task_handler+0x1f0>)
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				redBuffer[x] = max._red_samples[x];
 8001a1e:	7fba      	ldrb	r2, [r7, #30]
 8001a20:	7fbb      	ldrb	r3, [r7, #30]
 8001a22:	4965      	ldr	r1, [pc, #404]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001a24:	3222      	adds	r2, #34	; 0x22
 8001a26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a2a:	4967      	ldr	r1, [pc, #412]	; (8001bc8 <max_calc_task_handler+0x1f4>)
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				 for(uint8_t x = 0; x<=24; x++)
 8001a30:	7fbb      	ldrb	r3, [r7, #30]
 8001a32:	3301      	adds	r3, #1
 8001a34:	77bb      	strb	r3, [r7, #30]
 8001a36:	7fbb      	ldrb	r3, [r7, #30]
 8001a38:	2b18      	cmp	r3, #24
 8001a3a:	d9e7      	bls.n	8001a0c <max_calc_task_handler+0x38>
				}
			}

			if(k == 1)
 8001a3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d11e      	bne.n	8001a82 <max_calc_task_handler+0xae>
			{
				//store second 25 samples in buffer position 25-49
				for(uint8_t x = 25; x<=49; x++)
 8001a44:	2319      	movs	r3, #25
 8001a46:	777b      	strb	r3, [r7, #29]
 8001a48:	e018      	b.n	8001a7c <max_calc_task_handler+0xa8>
				{
				 irBuffer[x] = max._ir_samples[x-25];
 8001a4a:	7f7b      	ldrb	r3, [r7, #29]
 8001a4c:	f1a3 0219 	sub.w	r2, r3, #25
 8001a50:	7f7b      	ldrb	r3, [r7, #29]
 8001a52:	4959      	ldr	r1, [pc, #356]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001a54:	3202      	adds	r2, #2
 8001a56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a5a:	495a      	ldr	r1, [pc, #360]	; (8001bc4 <max_calc_task_handler+0x1f0>)
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				 redBuffer[x] = max._red_samples[x-25];
 8001a60:	7f7b      	ldrb	r3, [r7, #29]
 8001a62:	f1a3 0219 	sub.w	r2, r3, #25
 8001a66:	7f7b      	ldrb	r3, [r7, #29]
 8001a68:	4953      	ldr	r1, [pc, #332]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001a6a:	3222      	adds	r2, #34	; 0x22
 8001a6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a70:	4955      	ldr	r1, [pc, #340]	; (8001bc8 <max_calc_task_handler+0x1f4>)
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(uint8_t x = 25; x<=49; x++)
 8001a76:	7f7b      	ldrb	r3, [r7, #29]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	777b      	strb	r3, [r7, #29]
 8001a7c:	7f7b      	ldrb	r3, [r7, #29]
 8001a7e:	2b31      	cmp	r3, #49	; 0x31
 8001a80:	d9e3      	bls.n	8001a4a <max_calc_task_handler+0x76>
				}
			}

			if(k == 2)
 8001a82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d11e      	bne.n	8001ac8 <max_calc_task_handler+0xf4>
			{
				//store samples in buffer position 50-74
			    for(uint8_t x = 50; x<=74; x++)
 8001a8a:	2332      	movs	r3, #50	; 0x32
 8001a8c:	773b      	strb	r3, [r7, #28]
 8001a8e:	e018      	b.n	8001ac2 <max_calc_task_handler+0xee>
				{
				 irBuffer[x] = max._ir_samples[x-50];
 8001a90:	7f3b      	ldrb	r3, [r7, #28]
 8001a92:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8001a96:	7f3b      	ldrb	r3, [r7, #28]
 8001a98:	4947      	ldr	r1, [pc, #284]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001a9a:	3202      	adds	r2, #2
 8001a9c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001aa0:	4948      	ldr	r1, [pc, #288]	; (8001bc4 <max_calc_task_handler+0x1f0>)
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				 redBuffer[x] = max._red_samples[x-50];
 8001aa6:	7f3b      	ldrb	r3, [r7, #28]
 8001aa8:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8001aac:	7f3b      	ldrb	r3, [r7, #28]
 8001aae:	4942      	ldr	r1, [pc, #264]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001ab0:	3222      	adds	r2, #34	; 0x22
 8001ab2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ab6:	4944      	ldr	r1, [pc, #272]	; (8001bc8 <max_calc_task_handler+0x1f4>)
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			    for(uint8_t x = 50; x<=74; x++)
 8001abc:	7f3b      	ldrb	r3, [r7, #28]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	773b      	strb	r3, [r7, #28]
 8001ac2:	7f3b      	ldrb	r3, [r7, #28]
 8001ac4:	2b4a      	cmp	r3, #74	; 0x4a
 8001ac6:	d9e3      	bls.n	8001a90 <max_calc_task_handler+0xbc>
				}
			}

			if(k == 3)
 8001ac8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d121      	bne.n	8001b14 <max_calc_task_handler+0x140>
			{
				 //store samples in buffer position 74-99
				for(uint8_t x=74; x<=99; x++)
 8001ad0:	234a      	movs	r3, #74	; 0x4a
 8001ad2:	76fb      	strb	r3, [r7, #27]
 8001ad4:	e018      	b.n	8001b08 <max_calc_task_handler+0x134>
				{
				  irBuffer[x] = max._ir_samples[x-74];
 8001ad6:	7efb      	ldrb	r3, [r7, #27]
 8001ad8:	f1a3 024a 	sub.w	r2, r3, #74	; 0x4a
 8001adc:	7efb      	ldrb	r3, [r7, #27]
 8001ade:	4936      	ldr	r1, [pc, #216]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001ae0:	3202      	adds	r2, #2
 8001ae2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ae6:	4937      	ldr	r1, [pc, #220]	; (8001bc4 <max_calc_task_handler+0x1f0>)
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  redBuffer[x] = max._red_samples[x-74];
 8001aec:	7efb      	ldrb	r3, [r7, #27]
 8001aee:	f1a3 024a 	sub.w	r2, r3, #74	; 0x4a
 8001af2:	7efb      	ldrb	r3, [r7, #27]
 8001af4:	4930      	ldr	r1, [pc, #192]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001af6:	3222      	adds	r2, #34	; 0x22
 8001af8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001afc:	4932      	ldr	r1, [pc, #200]	; (8001bc8 <max_calc_task_handler+0x1f4>)
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(uint8_t x=74; x<=99; x++)
 8001b02:	7efb      	ldrb	r3, [r7, #27]
 8001b04:	3301      	adds	r3, #1
 8001b06:	76fb      	strb	r3, [r7, #27]
 8001b08:	7efb      	ldrb	r3, [r7, #27]
 8001b0a:	2b63      	cmp	r3, #99	; 0x63
 8001b0c:	d9e3      	bls.n	8001ad6 <max_calc_task_handler+0x102>
				}
				initialReading = 1;
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <max_calc_task_handler+0x1ec>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
			}

			k = k + 1;
 8001b14:	7ffb      	ldrb	r3, [r7, #31]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	77fb      	strb	r3, [r7, #31]

			if(max._ir_samples[0] == 0)
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d140      	bne.n	8001ba6 <max_calc_task_handler+0x1d2>
			{
				k = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	77fb      	strb	r3, [r7, #31]
 8001b28:	e03d      	b.n	8001ba6 <max_calc_task_handler+0x1d2>


		} else
		{
			//re-order the samples in preparation of new calculations
			for(int8_t i = 75; i<100; i++)
 8001b2a:	234b      	movs	r3, #75	; 0x4b
 8001b2c:	76bb      	strb	r3, [r7, #26]
 8001b2e:	e01f      	b.n	8001b70 <max_calc_task_handler+0x19c>
			{
			 irBuffer[i] = max._ir_samples[i - 75];
 8001b30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001b34:	f1a3 024b 	sub.w	r2, r3, #75	; 0x4b
 8001b38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001b3c:	491e      	ldr	r1, [pc, #120]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001b3e:	3202      	adds	r2, #2
 8001b40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b44:	491f      	ldr	r1, [pc, #124]	; (8001bc4 <max_calc_task_handler+0x1f0>)
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 redBuffer[i] = max._red_samples[i - 75];
 8001b4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001b4e:	f1a3 024b 	sub.w	r2, r3, #75	; 0x4b
 8001b52:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001b56:	4918      	ldr	r1, [pc, #96]	; (8001bb8 <max_calc_task_handler+0x1e4>)
 8001b58:	3222      	adds	r2, #34	; 0x22
 8001b5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b5e:	491a      	ldr	r1, [pc, #104]	; (8001bc8 <max_calc_task_handler+0x1f4>)
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int8_t i = 75; i<100; i++)
 8001b64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	76bb      	strb	r3, [r7, #26]
 8001b70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001b74:	2b63      	cmp	r3, #99	; 0x63
 8001b76:	dddb      	ble.n	8001b30 <max_calc_task_handler+0x15c>
			}

			//After gathering 25 new samples recalculate HR and SP02
			maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <max_calc_task_handler+0x1f8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <max_calc_task_handler+0x1fc>)
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <max_calc_task_handler+0x200>)
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <max_calc_task_handler+0x204>)
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <max_calc_task_handler+0x208>)
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <max_calc_task_handler+0x1f4>)
 8001b8e:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <max_calc_task_handler+0x1f0>)
 8001b90:	f7fe fcf0 	bl	8000574 <maxim_heart_rate_and_oxygen_saturation>

			xStatus = xQueueSendToBack( xQueueReadings, &valueToSend, 100 );
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <max_calc_task_handler+0x20c>)
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	f107 0113 	add.w	r1, r7, #19
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2264      	movs	r2, #100	; 0x64
 8001ba0:	f00b fdd6 	bl	800d750 <xQueueGenericSend>
 8001ba4:	6178      	str	r0, [r7, #20]
				/* The send operation could not complete because the queue was full */

			}
		}

         vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000 ) );
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f00c fad8 	bl	800e164 <xTaskDelayUntil>
		t = max.temperature;
 8001bb4:	e71a      	b.n	80019ec <max_calc_task_handler+0x18>
 8001bb6:	bf00      	nop
 8001bb8:	200005ec 	.word	0x200005ec
 8001bbc:	20000714 	.word	0x20000714
 8001bc0:	20000a3a 	.word	0x20000a3a
 8001bc4:	20000718 	.word	0x20000718
 8001bc8:	200008a8 	.word	0x200008a8
 8001bcc:	2000000e 	.word	0x2000000e
 8001bd0:	20000a39 	.word	0x20000a39
 8001bd4:	20000014 	.word	0x20000014
 8001bd8:	20000a38 	.word	0x20000a38
 8001bdc:	20000010 	.word	0x20000010
 8001be0:	200005e8 	.word	0x200005e8

08001be4 <pressure_task_handler>:

	}
}
static void pressure_task_handler(void* parameters)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//config channel 14 of ADC1
		sConfig.Channel = ADC_CHANNEL_14;
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <pressure_task_handler+0x58>)
 8001bee:	220e      	movs	r2, #14
 8001bf0:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001bf2:	4912      	ldr	r1, [pc, #72]	; (8001c3c <pressure_task_handler+0x58>)
 8001bf4:	4812      	ldr	r0, [pc, #72]	; (8001c40 <pressure_task_handler+0x5c>)
 8001bf6:	f001 fbf5 	bl	80033e4 <HAL_ADC_ConfigChannel>

		HAL_ADC_Start(&hadc1);
 8001bfa:	4811      	ldr	r0, [pc, #68]	; (8001c40 <pressure_task_handler+0x5c>)
 8001bfc:	f001 fa54 	bl	80030a8 <HAL_ADC_Start>
		//get raw value for Breaths per minute
	    if(HAL_ADC_PollForConversion(&hadc1, 3) == HAL_OK)
 8001c00:	2103      	movs	r1, #3
 8001c02:	480f      	ldr	r0, [pc, #60]	; (8001c40 <pressure_task_handler+0x5c>)
 8001c04:	f001 fb55 	bl	80032b2 <HAL_ADC_PollForConversion>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <pressure_task_handler+0x38>
		{
		rawPressure = HAL_ADC_GetValue(&hadc1);
 8001c0e:	480c      	ldr	r0, [pc, #48]	; (8001c40 <pressure_task_handler+0x5c>)
 8001c10:	f001 fbda 	bl	80033c8 <HAL_ADC_GetValue>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <pressure_task_handler+0x60>)
 8001c1a:	701a      	strb	r2, [r3, #0]
		}

	    airwayPressure = map(rawPressure, 0, 255, 0, 5);
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <pressure_task_handler+0x60>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b298      	uxth	r0, r3
 8001c22:	2305      	movs	r3, #5
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2300      	movs	r3, #0
 8001c28:	22ff      	movs	r2, #255	; 0xff
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f7ff fe2c 	bl	8001888 <map>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <pressure_task_handler+0x64>)
 8001c36:	701a      	strb	r2, [r3, #0]
		sConfig.Channel = ADC_CHANNEL_14;
 8001c38:	e7d8      	b.n	8001bec <pressure_task_handler+0x8>
 8001c3a:	bf00      	nop
 8001c3c:	20000704 	.word	0x20000704
 8001c40:	200003f0 	.word	0x200003f0
 8001c44:	20000a3b 	.word	0x20000a3b
 8001c48:	20000018 	.word	0x20000018

08001c4c <oled_task_handler>:
	}
}
static void oled_task_handler(void* parameters)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	; 0x58
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

	while(1)
	{
		/* This call should always find the queue empty because this task will
		 immediately remove any data that is written to the queue. */
		 if( uxQueueMessagesWaiting( xQueueReadings ) != 0 )
 8001c54:	4b54      	ldr	r3, [pc, #336]	; (8001da8 <oled_task_handler+0x15c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f00b ff57 	bl	800db0c <uxQueueMessagesWaiting>
		 {

		 }

		 xStatus = xQueueReceive( xQueueReadings, &recievedValue, 0 );
 8001c5e:	4b52      	ldr	r3, [pc, #328]	; (8001da8 <oled_task_handler+0x15c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8001c66:	2200      	movs	r2, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00b fe6f 	bl	800d94c <xQueueReceive>
 8001c6e:	6578      	str	r0, [r7, #84]	; 0x54

		 if( xStatus == pdPASS )
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d1ee      	bne.n	8001c54 <oled_task_handler+0x8>
		  {
		  /* Data was successfully received from the queue */
			   i = recievedValue;
 8001c76:	f997 2053 	ldrsb.w	r2, [r7, #83]	; 0x53
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <oled_task_handler+0x160>)
 8001c7c:	701a      	strb	r2, [r3, #0]

		  	  //temperature value
		  	    SSD1306_GotoXY (40, 10);
 8001c7e:	210a      	movs	r1, #10
 8001c80:	2028      	movs	r0, #40	; 0x28
 8001c82:	f000 fcf3 	bl	800266c <SSD1306_GotoXY>
		  	    char temp[10];
		  	    taskENTER_CRITICAL();
 8001c86:	f00d fd6f 	bl	800f768 <vPortEnterCritical>
		  	    sprintf(temp, "%i", (uint16_t)t);
 8001c8a:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <oled_task_handler+0x164>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c94:	ee17 3a90 	vmov	r3, s15
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ca0:	4944      	ldr	r1, [pc, #272]	; (8001db4 <oled_task_handler+0x168>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00e fc82 	bl	80105ac <siprintf>
		  	    taskEXIT_CRITICAL();
 8001ca8:	f00d fd8e 	bl	800f7c8 <vPortExitCritical>
		  	    SSD1306_Puts ( temp, &Font_7x10, 1);
 8001cac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4941      	ldr	r1, [pc, #260]	; (8001db8 <oled_task_handler+0x16c>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fd6f 	bl	8002798 <SSD1306_Puts>

		  	    //spo2 value
		  	    SSD1306_GotoXY (40, 20);
 8001cba:	2114      	movs	r1, #20
 8001cbc:	2028      	movs	r0, #40	; 0x28
 8001cbe:	f000 fcd5 	bl	800266c <SSD1306_GotoXY>
		  	    if(validSPO2 == 1)
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <oled_task_handler+0x170>)
 8001cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d110      	bne.n	8001cee <oled_task_handler+0xa2>
		  	    {
		  	    	char oxygen[10];
//		  	    	taskENTER_CRITICAL();
//		  	        sprintf(oxygen, "%i", (uint16_t)spo2);
		  	    	 sprintf(oxygen, "%i", (uint16_t)spo2);
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <oled_task_handler+0x174>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4936      	ldr	r1, [pc, #216]	; (8001db4 <oled_task_handler+0x168>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00e fc66 	bl	80105ac <siprintf>
//		  	        taskEXIT_CRITICAL();
		  	        SSD1306_Puts ( oxygen, &Font_7x10, 1);
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4934      	ldr	r1, [pc, #208]	; (8001db8 <oled_task_handler+0x16c>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fd55 	bl	8002798 <SSD1306_Puts>
		  	    }

		  	    //Heart rate value
		  	   SSD1306_GotoXY (40, 30);
 8001cee:	211e      	movs	r1, #30
 8001cf0:	2028      	movs	r0, #40	; 0x28
 8001cf2:	f000 fcbb 	bl	800266c <SSD1306_GotoXY>
		  	    if(validHeartRate == 1)
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <oled_task_handler+0x178>)
 8001cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d110      	bne.n	8001d22 <oled_task_handler+0xd6>
		  	    {
		  	    	 char heart[10];
//		  	    	 taskENTER_CRITICAL();
		  	         sprintf(heart, "%i", (uint16_t)heartRate);
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <oled_task_handler+0x17c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4929      	ldr	r1, [pc, #164]	; (8001db4 <oled_task_handler+0x168>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f00e fc4c 	bl	80105ac <siprintf>
//		  	         taskEXIT_CRITICAL();
		  	         SSD1306_Puts ( heart, &Font_7x10, 1);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4927      	ldr	r1, [pc, #156]	; (8001db8 <oled_task_handler+0x16c>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fd3b 	bl	8002798 <SSD1306_Puts>
		  	    }

		  	    //VPB value
		  	    SSD1306_GotoXY (40, 40);
 8001d22:	2128      	movs	r1, #40	; 0x28
 8001d24:	2028      	movs	r0, #40	; 0x28
 8001d26:	f000 fca1 	bl	800266c <SSD1306_GotoXY>
		  	    char vpb[10];
		  	    sprintf(vpb, "%i", volumePerBreath);
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <oled_task_handler+0x180>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d34:	491f      	ldr	r1, [pc, #124]	; (8001db4 <oled_task_handler+0x168>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00e fc38 	bl	80105ac <siprintf>
		  	    SSD1306_Puts (vpb, &Font_7x10, 1);
 8001d3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d40:	2201      	movs	r2, #1
 8001d42:	491d      	ldr	r1, [pc, #116]	; (8001db8 <oled_task_handler+0x16c>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fd27 	bl	8002798 <SSD1306_Puts>

		  	    //BPM value
		  	    SSD1306_GotoXY (40, 50);
 8001d4a:	2132      	movs	r1, #50	; 0x32
 8001d4c:	2028      	movs	r0, #40	; 0x28
 8001d4e:	f000 fc8d 	bl	800266c <SSD1306_GotoXY>
		  	    char bpm[10];
		  	    sprintf(bpm, "%i", breathsPerMinute);
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <oled_task_handler+0x184>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5c:	4915      	ldr	r1, [pc, #84]	; (8001db4 <oled_task_handler+0x168>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00e fc24 	bl	80105ac <siprintf>
		  	    SSD1306_Puts (bpm, &Font_7x10, 1);
 8001d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4913      	ldr	r1, [pc, #76]	; (8001db8 <oled_task_handler+0x16c>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fd13 	bl	8002798 <SSD1306_Puts>

		  	    //I:E value
		  	    char ie[10];
		  	    sprintf(ie, "%i", expirationRatio);
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <oled_task_handler+0x188>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	490d      	ldr	r1, [pc, #52]	; (8001db4 <oled_task_handler+0x168>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00e fc14 	bl	80105ac <siprintf>
		  	    SSD1306_GotoXY (40, 50);
 8001d84:	2132      	movs	r1, #50	; 0x32
 8001d86:	2028      	movs	r0, #40	; 0x28
 8001d88:	f000 fc70 	bl	800266c <SSD1306_GotoXY>
		  	    SSD1306_Puts (ie, &Font_7x10, 1);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	2201      	movs	r2, #1
 8001d92:	4909      	ldr	r1, [pc, #36]	; (8001db8 <oled_task_handler+0x16c>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fcff 	bl	8002798 <SSD1306_Puts>

		  	    taskENTER_CRITICAL();
 8001d9a:	f00d fce5 	bl	800f768 <vPortEnterCritical>
		  	    SSD1306_UpdateScreen(); // update screen
 8001d9e:	f000 fbbf 	bl	8002520 <SSD1306_UpdateScreen>
		  	    taskEXIT_CRITICAL();
 8001da2:	f00d fd11 	bl	800f7c8 <vPortExitCritical>
		 if( uxQueueMessagesWaiting( xQueueReadings ) != 0 )
 8001da6:	e755      	b.n	8001c54 <oled_task_handler+0x8>
 8001da8:	200005e8 	.word	0x200005e8
 8001dac:	200006fc 	.word	0x200006fc
 8001db0:	20000714 	.word	0x20000714
 8001db4:	08010d94 	.word	0x08010d94
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000a38 	.word	0x20000a38
 8001dc0:	20000010 	.word	0x20000010
 8001dc4:	20000a39 	.word	0x20000a39
 8001dc8:	20000014 	.word	0x20000014
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	2000000a 	.word	0x2000000a
 8001dd4:	2000000d 	.word	0x2000000d

08001dd8 <adc_task_handler>:
		  }

	}
}
static void adc_task_handler(void* parameters)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001de0:	f00c fbce 	bl	800e580 <xTaskGetTickCount>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		 sConfig.Channel = ADC_CHANNEL_0;
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <adc_task_handler+0xf8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
		 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001dee:	4938      	ldr	r1, [pc, #224]	; (8001ed0 <adc_task_handler+0xf8>)
 8001df0:	4838      	ldr	r0, [pc, #224]	; (8001ed4 <adc_task_handler+0xfc>)
 8001df2:	f001 faf7 	bl	80033e4 <HAL_ADC_ConfigChannel>

		 //get raw value for I:E
		 HAL_ADC_Start(&hadc1);
 8001df6:	4837      	ldr	r0, [pc, #220]	; (8001ed4 <adc_task_handler+0xfc>)
 8001df8:	f001 f956 	bl	80030a8 <HAL_ADC_Start>
		 if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8001dfc:	2105      	movs	r1, #5
 8001dfe:	4835      	ldr	r0, [pc, #212]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e00:	f001 fa57 	bl	80032b2 <HAL_ADC_PollForConversion>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <adc_task_handler+0x40>
		 {
			rawIE = HAL_ADC_GetValue(&hadc1);
 8001e0a:	4832      	ldr	r0, [pc, #200]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e0c:	f001 fadc 	bl	80033c8 <HAL_ADC_GetValue>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <adc_task_handler+0x100>)
 8001e16:	801a      	strh	r2, [r3, #0]
		 }
		 HAL_ADC_Stop(&hadc1);
 8001e18:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e1a:	f001 fa17 	bl	800324c <HAL_ADC_Stop>

		 setIE(rawIE);
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <adc_task_handler+0x100>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd01 	bl	800182c <setIE>

		 sConfig.Channel = ADC_CHANNEL_1;
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <adc_task_handler+0xf8>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
		 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001e30:	4927      	ldr	r1, [pc, #156]	; (8001ed0 <adc_task_handler+0xf8>)
 8001e32:	4828      	ldr	r0, [pc, #160]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e34:	f001 fad6 	bl	80033e4 <HAL_ADC_ConfigChannel>

		 //get raw value for Volume per breath
		 HAL_ADC_Start(&hadc1);
 8001e38:	4826      	ldr	r0, [pc, #152]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e3a:	f001 f935 	bl	80030a8 <HAL_ADC_Start>
		 if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8001e3e:	2105      	movs	r1, #5
 8001e40:	4824      	ldr	r0, [pc, #144]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e42:	f001 fa36 	bl	80032b2 <HAL_ADC_PollForConversion>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <adc_task_handler+0x82>
		 {
		  rawVpb = HAL_ADC_GetValue(&hadc1);
 8001e4c:	4821      	ldr	r0, [pc, #132]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e4e:	f001 fabb 	bl	80033c8 <HAL_ADC_GetValue>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <adc_task_handler+0x104>)
 8001e58:	801a      	strh	r2, [r3, #0]
		 }
		 volumePerBreath = map(rawVpb, 0, 255, 100, 367);
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <adc_task_handler+0x104>)
 8001e5c:	8818      	ldrh	r0, [r3, #0]
 8001e5e:	f240 136f 	movw	r3, #367	; 0x16f
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2364      	movs	r3, #100	; 0x64
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	2100      	movs	r1, #0
 8001e6a:	f7ff fd0d 	bl	8001888 <map>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <adc_task_handler+0x108>)
 8001e74:	801a      	strh	r2, [r3, #0]

		 sConfig.Channel = ADC_CHANNEL_2;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <adc_task_handler+0xf8>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
		 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001e7c:	4914      	ldr	r1, [pc, #80]	; (8001ed0 <adc_task_handler+0xf8>)
 8001e7e:	4815      	ldr	r0, [pc, #84]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e80:	f001 fab0 	bl	80033e4 <HAL_ADC_ConfigChannel>

		 HAL_ADC_Start(&hadc1);
 8001e84:	4813      	ldr	r0, [pc, #76]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e86:	f001 f90f 	bl	80030a8 <HAL_ADC_Start>
		 //get raw value for Breaths per minute
		 if(HAL_ADC_PollForConversion(&hadc1, 3) == HAL_OK)
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e8e:	f001 fa10 	bl	80032b2 <HAL_ADC_PollForConversion>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d106      	bne.n	8001ea6 <adc_task_handler+0xce>
		 {
		   rawBpm = HAL_ADC_GetValue(&hadc1);
 8001e98:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <adc_task_handler+0xfc>)
 8001e9a:	f001 fa95 	bl	80033c8 <HAL_ADC_GetValue>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <adc_task_handler+0x10c>)
 8001ea4:	801a      	strh	r2, [r3, #0]
		 }

		breathsPerMinute = map(rawVpb, 0, 255, 10, 40);
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <adc_task_handler+0x104>)
 8001ea8:	8818      	ldrh	r0, [r3, #0]
 8001eaa:	2328      	movs	r3, #40	; 0x28
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	230a      	movs	r3, #10
 8001eb0:	22ff      	movs	r2, #255	; 0xff
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	f7ff fce8 	bl	8001888 <map>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <adc_task_handler+0x110>)
 8001ebe:	801a      	strh	r2, [r3, #0]

	    vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 2000 ) );
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00c f94b 	bl	800e164 <xTaskDelayUntil>
		 sConfig.Channel = ADC_CHANNEL_0;
 8001ece:	e78b      	b.n	8001de8 <adc_task_handler+0x10>
 8001ed0:	20000704 	.word	0x20000704
 8001ed4:	200003f0 	.word	0x200003f0
 8001ed8:	200006fe 	.word	0x200006fe
 8001edc:	20000700 	.word	0x20000700
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000702 	.word	0x20000702
 8001ee8:	2000000a 	.word	0x2000000a

08001eec <indicator_task_handler>:
	}
}
static void indicator_task_handler(void* parameters)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 if(airwayPressure > 35)
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <indicator_task_handler+0x9c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b23      	cmp	r3, #35	; 0x23
 8001efa:	d912      	bls.n	8001f22 <indicator_task_handler+0x36>
		   {
			   //pressure is too high
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f02:	4822      	ldr	r0, [pc, #136]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f04:	f001 ff3a 	bl	8003d7c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f0e:	481f      	ldr	r0, [pc, #124]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f10:	f001 ff34 	bl	8003d7c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1a:	481c      	ldr	r0, [pc, #112]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f1c:	f001 ff2e 	bl	8003d7c <HAL_GPIO_WritePin>
 8001f20:	e011      	b.n	8001f46 <indicator_task_handler+0x5a>
		   }else{
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f28:	4818      	ldr	r0, [pc, #96]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f2a:	f001 ff27 	bl	8003d7c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f34:	4815      	ldr	r0, [pc, #84]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f36:	f001 ff21 	bl	8003d7c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f40:	4812      	ldr	r0, [pc, #72]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f42:	f001 ff1b 	bl	8003d7c <HAL_GPIO_WritePin>
		   }
		 //wrong heart rate values, spo2 & airway pressure
		   if(validSPO2 == 0 && validHeartRate ==0 && airwayPressure >35)
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <indicator_task_handler+0xa4>)
 8001f48:	f993 3000 	ldrsb.w	r3, [r3]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1d1      	bne.n	8001ef4 <indicator_task_handler+0x8>
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <indicator_task_handler+0xa8>)
 8001f52:	f993 3000 	ldrsb.w	r3, [r3]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1cc      	bne.n	8001ef4 <indicator_task_handler+0x8>
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <indicator_task_handler+0x9c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b23      	cmp	r3, #35	; 0x23
 8001f60:	d9c8      	bls.n	8001ef4 <indicator_task_handler+0x8>
		   {
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f68:	4808      	ldr	r0, [pc, #32]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f6a:	f001 ff07 	bl	8003d7c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f76:	f001 ff01 	bl	8003d7c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <indicator_task_handler+0xa0>)
 8001f82:	f001 fefb 	bl	8003d7c <HAL_GPIO_WritePin>
		 if(airwayPressure > 35)
 8001f86:	e7b5      	b.n	8001ef4 <indicator_task_handler+0x8>
 8001f88:	20000018 	.word	0x20000018
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	20000a38 	.word	0x20000a38
 8001f94:	20000a39 	.word	0x20000a39

08001f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001faa:	f000 fff5 	bl	8002f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40001000 	.word	0x40001000

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>

08001fc6 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102 *obj, I2C_HandleTypeDef *hi2c)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]
//    obj->_interrupt_flag = 0;
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00e f9ec 	bl	80103bc <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3388      	adds	r3, #136	; 0x88
 8001fe8:	2280      	movs	r2, #128	; 0x80
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00e f9e5 	bl	80103bc <memset>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <max30102_write>:
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */

void max30102_write(max30102 *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b088      	sub	sp, #32
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	461a      	mov	r2, r3
 8002006:	460b      	mov	r3, r1
 8002008:	72fb      	strb	r3, [r7, #11]
 800200a:	4613      	mov	r3, r2
 800200c:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800200e:	893b      	ldrh	r3, [r7, #8]
 8002010:	3301      	adds	r3, #1
 8002012:	4618      	mov	r0, r3
 8002014:	f00e f9b4 	bl	8010380 <malloc>
 8002018:	4603      	mov	r3, r0
 800201a:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	7afa      	ldrb	r2, [r7, #11]
 8002020:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <max30102_write+0x42>
 8002028:	893b      	ldrh	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	893a      	ldrh	r2, [r7, #8]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4618      	mov	r0, r3
 8002038:	f00e f9b2 	bl	80103a0 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, I2C_DELAY);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	893b      	ldrh	r3, [r7, #8]
 8002042:	3301      	adds	r3, #1
 8002044:	b29b      	uxth	r3, r3
 8002046:	2205      	movs	r2, #5
 8002048:	9200      	str	r2, [sp, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	21ae      	movs	r1, #174	; 0xae
 800204e:	f003 fc17 	bl	8005880 <HAL_I2C_Master_Transmit>
    free(payload);
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f00e f99c 	bl	8010390 <free>
}
 8002058:	bf00      	nop
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102 *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	460b      	mov	r3, r1
 800206e:	72fb      	strb	r3, [r7, #11]
 8002070:	4613      	mov	r3, r2
 8002072:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_WRITE_ADDRESS, &reg_addr, 1, I2C_DELAY);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	f107 0217 	add.w	r2, r7, #23
 8002080:	2305      	movs	r3, #5
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2301      	movs	r3, #1
 8002086:	21ae      	movs	r1, #174	; 0xae
 8002088:	f003 fbfa 	bl	8005880 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_READ_ADDRESS, buf, buflen, I2C_DELAY);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	893b      	ldrh	r3, [r7, #8]
 8002092:	2205      	movs	r2, #5
 8002094:	9200      	str	r2, [sp, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	21af      	movs	r1, #175	; 0xaf
 800209a:	f003 fcef 	bl	8005a7c <HAL_I2C_Master_Receive>
 }
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102 *obj)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80020ae:	2340      	movs	r3, #64	; 0x40
 80020b0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MODE_CONFIGURATION, &val, 1);
 80020b2:	f107 020f 	add.w	r2, r7, #15
 80020b6:	2301      	movs	r3, #1
 80020b8:	2109      	movs	r1, #9
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff9d 	bl	8001ffa <max30102_write>
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102 *obj)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, FIFO_WRITE_POINTER, &val, 3);
 80020d4:	f107 020f 	add.w	r2, r7, #15
 80020d8:	2303      	movs	r3, #3
 80020da:	2104      	movs	r1, #4
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff8c 	bl	8001ffa <max30102_write>
    max30102_write(obj, FIFO_READ_POINTER, &val, 3);
 80020e2:	f107 020f 	add.w	r2, r7, #15
 80020e6:	2303      	movs	r3, #3
 80020e8:	2106      	movs	r1, #6
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff85 	bl	8001ffa <max30102_write>
    max30102_write(obj, OVERFLOW_COUNTER, &val, 3);
 80020f0:	f107 020f 	add.w	r2, r7, #15
 80020f4:	2303      	movs	r3, #3
 80020f6:	2105      	movs	r1, #5
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff7e 	bl	8001ffa <max30102_write>
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <max30102_set_mode>:



//set mode for max30102
void max30102_set_mode(max30102 *obj)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	uint8_t value = spo2Mode;
 800210e:	2303      	movs	r3, #3
 8002110:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, MODE_CONFIGURATION, &value, 1);
 8002112:	f107 020f 	add.w	r2, r7, #15
 8002116:	2301      	movs	r3, #1
 8002118:	2109      	movs	r1, #9
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff6d 	bl	8001ffa <max30102_write>
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <max30102_interrupt_config>:

//enable interrupts
void max30102_interrupt_config(max30102 *obj)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	uint8_t value = allInterruptsEnable;
 8002130:	23e0      	movs	r3, #224	; 0xe0
 8002132:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, INTERRUPT_ENABLE_1, &value, 1);
 8002134:	f107 020f 	add.w	r2, r7, #15
 8002138:	2301      	movs	r3, #1
 800213a:	2102      	movs	r1, #2
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff5c 	bl	8001ffa <max30102_write>
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <max30102_spo2_config>:

//spo2 config
void max30102_spo2_config(max30102 *obj)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
	uint8_t value = spo2ModeConfiguration;
 8002152:	2327      	movs	r3, #39	; 0x27
 8002154:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, SPO2_CONFIGURATION, &value, 1);
 8002156:	f107 020f 	add.w	r2, r7, #15
 800215a:	2301      	movs	r3, #1
 800215c:	210a      	movs	r1, #10
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ff4b 	bl	8001ffa <max30102_write>
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <max30102_fifo_config>:

//fifo config
void max30102_fifo_config(max30102 *obj)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	uint8_t value = fifoConfigurationData;
 8002174:	2351      	movs	r3, #81	; 0x51
 8002176:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, FIFO_CONFIGURATION, &value, 1);
 8002178:	f107 020f 	add.w	r2, r7, #15
 800217c:	2301      	movs	r3, #1
 800217e:	2108      	movs	r1, #8
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff3a 	bl	8001ffa <max30102_write>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <max30102_led1_settings>:

void max30102_led1_settings(max30102 *obj)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	uint8_t v = defaultLedPulse;
 8002196:	231f      	movs	r3, #31
 8002198:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, LED1_PA, &v, 1);
 800219a:	f107 020f 	add.w	r2, r7, #15
 800219e:	2301      	movs	r3, #1
 80021a0:	210c      	movs	r1, #12
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ff29 	bl	8001ffa <max30102_write>

}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <max30102_led2_settings>:

void max30102_led2_settings(max30102 *obj)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	uint8_t a = defaultLedPulse;
 80021b8:	231f      	movs	r3, #31
 80021ba:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, LED2_PA, &a, 1);
 80021bc:	f107 020f 	add.w	r2, r7, #15
 80021c0:	2301      	movs	r3, #1
 80021c2:	210d      	movs	r1, #13
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff18 	bl	8001ffa <max30102_write>

}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <max30102_set_die_temp_en>:

void max30102_set_die_temp_en(max30102 *obj)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	uint8_t value = enableTempMeasurement;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, DIE_TEMPERATURE_CONFIG, &value, 1);
 80021de:	f107 020f 	add.w	r2, r7, #15
 80021e2:	2301      	movs	r3, #1
 80021e4:	2121      	movs	r1, #33	; 0x21
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff07 	bl	8001ffa <max30102_write>
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <max30102_set_die_temp_rdy>:

void max30102_set_die_temp_rdy(max30102 *obj)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	uint8_t value = dieTempRdyEn;
 80021fc:	2302      	movs	r3, #2
 80021fe:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, INTERRUPT_ENABLE_2, &value, 1);
 8002200:	f107 020f 	add.w	r2, r7, #15
 8002204:	2301      	movs	r3, #1
 8002206:	2103      	movs	r1, #3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fef6 	bl	8001ffa <max30102_write>
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <max30102_interrupt_handler>:

void max30102_interrupt_handler(max30102 *obj)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	//read register 0x00 and 0X01 interrupt status register
    uint8_t reg[2] = {0x00};
 8002220:	2300      	movs	r3, #0
 8002222:	823b      	strh	r3, [r7, #16]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, INTERRUPT_STATUS_1, reg, 2);
 8002224:	f107 0210 	add.w	r2, r7, #16
 8002228:	2302      	movs	r3, #2
 800222a:	2100      	movs	r1, #0
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff17 	bl	8002060 <max30102_read>

    uint8_t b = reg[0];
 8002232:	7c3b      	ldrb	r3, [r7, #16]
 8002234:	75fb      	strb	r3, [r7, #23]
    	{
    	//PWR_RDY shows that sensor has been set off. Configure sensor again.

    	}

    	uint8_t a = reg[0];
 8002236:	7c3b      	ldrb	r3, [r7, #16]
 8002238:	75bb      	strb	r3, [r7, #22]
    	if(((a>>7) & 0X01) == 1 )
 800223a:	7dbb      	ldrb	r3, [r7, #22]
 800223c:	09db      	lsrs	r3, r3, #7
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <max30102_interrupt_handler+0x36>
    	{
    	//Interrupt becoming full now read sensor FIFO data
	     max30102_read_fifo(obj);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f82b 	bl	80022a4 <max30102_read_fifo>
    	}

    	uint8_t c = reg[0];
 800224e:	7c3b      	ldrb	r3, [r7, #16]
 8002250:	757b      	strb	r3, [r7, #21]
    	if(((c>>6) & 0X01) == 1 )
    	{
    	//PPG_RDY
    	}

    	if((reg[1]>>1) & 0X01)
 8002252:	7c7b      	ldrb	r3, [r7, #17]
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01b      	beq.n	8002298 <max30102_interrupt_handler+0x80>
    	{
    	// Temperature data ready
    		  int8_t temp_int;
    		  uint8_t temp_frac;
    		  max30102_read_temp(obj, &temp_int, &temp_frac);
 8002260:	f107 020e 	add.w	r2, r7, #14
 8002264:	f107 030f 	add.w	r3, r7, #15
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f87e 	bl	800236c <max30102_read_temp>

    		  obj->temperature = temp_int + 0.0625f * temp_frac;
 8002270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227c:	7bbb      	ldrb	r3, [r7, #14]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002286:	eddf 6a06 	vldr	s13, [pc, #24]	; 80022a0 <max30102_interrupt_handler+0x88>
 800228a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800228e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	edc3 7a01 	vstr	s15, [r3, #4]
    	}
}
 8002298:	bf00      	nop
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	3d800000 	.word	0x3d800000

080022a4 <max30102_read_fifo>:

void max30102_read_fifo(max30102 *obj)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr;
    uint8_t rd_ptr;
    max30102_read(obj, FIFO_WRITE_POINTER, &wr_ptr, 1);
 80022ac:	f107 0213 	add.w	r2, r7, #19
 80022b0:	2301      	movs	r3, #1
 80022b2:	2104      	movs	r1, #4
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff fed3 	bl	8002060 <max30102_read>
    max30102_read(obj, FIFO_READ_POINTER, &rd_ptr, 1);
 80022ba:	f107 0212 	add.w	r2, r7, #18
 80022be:	2301      	movs	r3, #1
 80022c0:	2106      	movs	r1, #6
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fecc 	bl	8002060 <max30102_read>

    uint8_t num_samples = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	77bb      	strb	r3, [r7, #30]

    if(wr_ptr > 0 )
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <max30102_read_fifo+0x38>
    {
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80022d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d6:	4824      	ldr	r0, [pc, #144]	; (8002368 <max30102_read_fifo+0xc4>)
 80022d8:	f001 fd69 	bl	8003dae <HAL_GPIO_TogglePin>
    }


    num_samples  = ((uint8_t)wr_ptr - (uint8_t)rd_ptr + 32)%32;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	461a      	mov	r2, r3
 80022e0:	7cbb      	ldrb	r3, [r7, #18]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	3320      	adds	r3, #32
 80022e6:	425a      	negs	r2, r3
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	f002 021f 	and.w	r2, r2, #31
 80022f0:	bf58      	it	pl
 80022f2:	4253      	negpl	r3, r2
 80022f4:	77bb      	strb	r3, [r7, #30]


    for(uint8_t i = 0; i< num_samples; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	77fb      	strb	r3, [r7, #31]
 80022fa:	e02b      	b.n	8002354 <max30102_read_fifo+0xb0>
    {
    	uint8_t sample[6];
    	max30102_read(obj, FIFO_DATA_REGISTER, sample, 6);
 80022fc:	f107 020c 	add.w	r2, r7, #12
 8002300:	2306      	movs	r3, #6
 8002302:	2107      	movs	r1, #7
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff feab 	bl	8002060 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800230a:	7b3b      	ldrb	r3, [r7, #12]
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	461a      	mov	r2, r3
 8002310:	7b7b      	ldrb	r3, [r7, #13]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	4313      	orrs	r3, r2
 8002316:	7bba      	ldrb	r2, [r7, #14]
 8002318:	4313      	orrs	r3, r2
 800231a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800231e:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	461a      	mov	r2, r3
 8002326:	7c3b      	ldrb	r3, [r7, #16]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	4313      	orrs	r3, r2
 800232c:	7c7a      	ldrb	r2, [r7, #17]
 800232e:	4313      	orrs	r3, r2
 8002330:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002334:	617b      	str	r3, [r7, #20]

        obj->_ir_samples[i] = ir_sample;
 8002336:	7ffa      	ldrb	r2, [r7, #31]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3202      	adds	r2, #2
 800233c:	69b9      	ldr	r1, [r7, #24]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        obj->_red_samples[i] = red_sample;
 8002342:	7ffa      	ldrb	r2, [r7, #31]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3222      	adds	r2, #34	; 0x22
 8002348:	6979      	ldr	r1, [r7, #20]
 800234a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(uint8_t i = 0; i< num_samples; i++)
 800234e:	7ffb      	ldrb	r3, [r7, #31]
 8002350:	3301      	adds	r3, #1
 8002352:	77fb      	strb	r3, [r7, #31]
 8002354:	7ffa      	ldrb	r2, [r7, #31]
 8002356:	7fbb      	ldrb	r3, [r7, #30]
 8002358:	429a      	cmp	r2, r3
 800235a:	d3cf      	bcc.n	80022fc <max30102_read_fifo+0x58>
    }


}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40020c00 	.word	0x40020c00

0800236c <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102 *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
    max30102_read(obj, DIE_TEMPERATURE_INTEGER, (uint8_t *)temp_int, 1);
 8002378:	2301      	movs	r3, #1
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	211f      	movs	r1, #31
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fe6e 	bl	8002060 <max30102_read>
    max30102_read(obj, DIE_TEMPERATURE_FRACTION, temp_frac, 1);
 8002384:	2301      	movs	r3, #1
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	2120      	movs	r1, #32
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f7ff fe68 	bl	8002060 <max30102_read>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800239e:	f000 fa21 	bl	80027e4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80023a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80023a6:	2201      	movs	r2, #1
 80023a8:	2178      	movs	r1, #120	; 0x78
 80023aa:	485b      	ldr	r0, [pc, #364]	; (8002518 <SSD1306_Init+0x180>)
 80023ac:	f003 fd8c 	bl	8005ec8 <HAL_I2C_IsDeviceReady>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e0a9      	b.n	800250e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80023ba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80023be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023c0:	e002      	b.n	80023c8 <SSD1306_Init+0x30>
		p--;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f9      	bne.n	80023c2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80023ce:	22ae      	movs	r2, #174	; 0xae
 80023d0:	2100      	movs	r1, #0
 80023d2:	2078      	movs	r0, #120	; 0x78
 80023d4:	f000 fa82 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80023d8:	2220      	movs	r2, #32
 80023da:	2100      	movs	r1, #0
 80023dc:	2078      	movs	r0, #120	; 0x78
 80023de:	f000 fa7d 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80023e2:	2210      	movs	r2, #16
 80023e4:	2100      	movs	r1, #0
 80023e6:	2078      	movs	r0, #120	; 0x78
 80023e8:	f000 fa78 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80023ec:	22b0      	movs	r2, #176	; 0xb0
 80023ee:	2100      	movs	r1, #0
 80023f0:	2078      	movs	r0, #120	; 0x78
 80023f2:	f000 fa73 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80023f6:	22c8      	movs	r2, #200	; 0xc8
 80023f8:	2100      	movs	r1, #0
 80023fa:	2078      	movs	r0, #120	; 0x78
 80023fc:	f000 fa6e 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	2078      	movs	r0, #120	; 0x78
 8002406:	f000 fa69 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800240a:	2210      	movs	r2, #16
 800240c:	2100      	movs	r1, #0
 800240e:	2078      	movs	r0, #120	; 0x78
 8002410:	f000 fa64 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	2100      	movs	r1, #0
 8002418:	2078      	movs	r0, #120	; 0x78
 800241a:	f000 fa5f 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800241e:	2281      	movs	r2, #129	; 0x81
 8002420:	2100      	movs	r1, #0
 8002422:	2078      	movs	r0, #120	; 0x78
 8002424:	f000 fa5a 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	2100      	movs	r1, #0
 800242c:	2078      	movs	r0, #120	; 0x78
 800242e:	f000 fa55 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002432:	22a1      	movs	r2, #161	; 0xa1
 8002434:	2100      	movs	r1, #0
 8002436:	2078      	movs	r0, #120	; 0x78
 8002438:	f000 fa50 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800243c:	22a6      	movs	r2, #166	; 0xa6
 800243e:	2100      	movs	r1, #0
 8002440:	2078      	movs	r0, #120	; 0x78
 8002442:	f000 fa4b 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002446:	22a8      	movs	r2, #168	; 0xa8
 8002448:	2100      	movs	r1, #0
 800244a:	2078      	movs	r0, #120	; 0x78
 800244c:	f000 fa46 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	2100      	movs	r1, #0
 8002454:	2078      	movs	r0, #120	; 0x78
 8002456:	f000 fa41 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800245a:	22a4      	movs	r2, #164	; 0xa4
 800245c:	2100      	movs	r1, #0
 800245e:	2078      	movs	r0, #120	; 0x78
 8002460:	f000 fa3c 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002464:	22d3      	movs	r2, #211	; 0xd3
 8002466:	2100      	movs	r1, #0
 8002468:	2078      	movs	r0, #120	; 0x78
 800246a:	f000 fa37 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	2078      	movs	r0, #120	; 0x78
 8002474:	f000 fa32 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002478:	22d5      	movs	r2, #213	; 0xd5
 800247a:	2100      	movs	r1, #0
 800247c:	2078      	movs	r0, #120	; 0x78
 800247e:	f000 fa2d 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002482:	22f0      	movs	r2, #240	; 0xf0
 8002484:	2100      	movs	r1, #0
 8002486:	2078      	movs	r0, #120	; 0x78
 8002488:	f000 fa28 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800248c:	22d9      	movs	r2, #217	; 0xd9
 800248e:	2100      	movs	r1, #0
 8002490:	2078      	movs	r0, #120	; 0x78
 8002492:	f000 fa23 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002496:	2222      	movs	r2, #34	; 0x22
 8002498:	2100      	movs	r1, #0
 800249a:	2078      	movs	r0, #120	; 0x78
 800249c:	f000 fa1e 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80024a0:	22da      	movs	r2, #218	; 0xda
 80024a2:	2100      	movs	r1, #0
 80024a4:	2078      	movs	r0, #120	; 0x78
 80024a6:	f000 fa19 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80024aa:	2212      	movs	r2, #18
 80024ac:	2100      	movs	r1, #0
 80024ae:	2078      	movs	r0, #120	; 0x78
 80024b0:	f000 fa14 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80024b4:	22db      	movs	r2, #219	; 0xdb
 80024b6:	2100      	movs	r1, #0
 80024b8:	2078      	movs	r0, #120	; 0x78
 80024ba:	f000 fa0f 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80024be:	2220      	movs	r2, #32
 80024c0:	2100      	movs	r1, #0
 80024c2:	2078      	movs	r0, #120	; 0x78
 80024c4:	f000 fa0a 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80024c8:	228d      	movs	r2, #141	; 0x8d
 80024ca:	2100      	movs	r1, #0
 80024cc:	2078      	movs	r0, #120	; 0x78
 80024ce:	f000 fa05 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80024d2:	2214      	movs	r2, #20
 80024d4:	2100      	movs	r1, #0
 80024d6:	2078      	movs	r0, #120	; 0x78
 80024d8:	f000 fa00 	bl	80028dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80024dc:	22af      	movs	r2, #175	; 0xaf
 80024de:	2100      	movs	r1, #0
 80024e0:	2078      	movs	r0, #120	; 0x78
 80024e2:	f000 f9fb 	bl	80028dc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80024e6:	222e      	movs	r2, #46	; 0x2e
 80024e8:	2100      	movs	r1, #0
 80024ea:	2078      	movs	r0, #120	; 0x78
 80024ec:	f000 f9f6 	bl	80028dc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f000 f843 	bl	800257c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80024f6:	f000 f813 	bl	8002520 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <SSD1306_Init+0x184>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <SSD1306_Init+0x184>)
 8002502:	2200      	movs	r2, #0
 8002504:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <SSD1306_Init+0x184>)
 8002508:	2201      	movs	r2, #1
 800250a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000438 	.word	0x20000438
 800251c:	20000e3c 	.word	0x20000e3c

08002520 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002526:	2300      	movs	r3, #0
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	e01d      	b.n	8002568 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	3b50      	subs	r3, #80	; 0x50
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	2100      	movs	r1, #0
 8002536:	2078      	movs	r0, #120	; 0x78
 8002538:	f000 f9d0 	bl	80028dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	2078      	movs	r0, #120	; 0x78
 8002542:	f000 f9cb 	bl	80028dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002546:	2210      	movs	r2, #16
 8002548:	2100      	movs	r1, #0
 800254a:	2078      	movs	r0, #120	; 0x78
 800254c:	f000 f9c6 	bl	80028dc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <SSD1306_UpdateScreen+0x58>)
 8002556:	441a      	add	r2, r3
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	2140      	movs	r1, #64	; 0x40
 800255c:	2078      	movs	r0, #120	; 0x78
 800255e:	f000 f957 	bl	8002810 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	3301      	adds	r3, #1
 8002566:	71fb      	strb	r3, [r7, #7]
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b07      	cmp	r3, #7
 800256c:	d9de      	bls.n	800252c <SSD1306_UpdateScreen+0xc>
	}
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000a3c 	.word	0x20000a3c

0800257c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <SSD1306_Fill+0x14>
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <SSD1306_Fill+0x16>
 8002590:	23ff      	movs	r3, #255	; 0xff
 8002592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002596:	4619      	mov	r1, r3
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <SSD1306_Fill+0x2c>)
 800259a:	f00d ff0f 	bl	80103bc <memset>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000a3c 	.word	0x20000a3c

080025ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	80fb      	strh	r3, [r7, #6]
 80025b6:	460b      	mov	r3, r1
 80025b8:	80bb      	strh	r3, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	70fb      	strb	r3, [r7, #3]
	if (
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	2b7f      	cmp	r3, #127	; 0x7f
 80025c2:	d848      	bhi.n	8002656 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	2b3f      	cmp	r3, #63	; 0x3f
 80025c8:	d845      	bhi.n	8002656 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <SSD1306_DrawPixel+0xb8>)
 80025cc:	791b      	ldrb	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d11a      	bne.n	800261c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	88bb      	ldrh	r3, [r7, #4]
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	b298      	uxth	r0, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	01db      	lsls	r3, r3, #7
 80025f2:	4413      	add	r3, r2
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <SSD1306_DrawPixel+0xbc>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	b25a      	sxtb	r2, r3
 80025fa:	88bb      	ldrh	r3, [r7, #4]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	b25b      	sxtb	r3, r3
 8002608:	4313      	orrs	r3, r2
 800260a:	b259      	sxtb	r1, r3
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	4603      	mov	r3, r0
 8002610:	01db      	lsls	r3, r3, #7
 8002612:	4413      	add	r3, r2
 8002614:	b2c9      	uxtb	r1, r1
 8002616:	4a14      	ldr	r2, [pc, #80]	; (8002668 <SSD1306_DrawPixel+0xbc>)
 8002618:	54d1      	strb	r1, [r2, r3]
 800261a:	e01d      	b.n	8002658 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800261c:	88fa      	ldrh	r2, [r7, #6]
 800261e:	88bb      	ldrh	r3, [r7, #4]
 8002620:	08db      	lsrs	r3, r3, #3
 8002622:	b298      	uxth	r0, r3
 8002624:	4603      	mov	r3, r0
 8002626:	01db      	lsls	r3, r3, #7
 8002628:	4413      	add	r3, r2
 800262a:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <SSD1306_DrawPixel+0xbc>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	b25a      	sxtb	r2, r3
 8002630:	88bb      	ldrh	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	b25b      	sxtb	r3, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4013      	ands	r3, r2
 8002644:	b259      	sxtb	r1, r3
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	4603      	mov	r3, r0
 800264a:	01db      	lsls	r3, r3, #7
 800264c:	4413      	add	r3, r2
 800264e:	b2c9      	uxtb	r1, r1
 8002650:	4a05      	ldr	r2, [pc, #20]	; (8002668 <SSD1306_DrawPixel+0xbc>)
 8002652:	54d1      	strb	r1, [r2, r3]
 8002654:	e000      	b.n	8002658 <SSD1306_DrawPixel+0xac>
		return;
 8002656:	bf00      	nop
	}
}
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000e3c 	.word	0x20000e3c
 8002668:	20000a3c 	.word	0x20000a3c

0800266c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	460a      	mov	r2, r1
 8002676:	80fb      	strh	r3, [r7, #6]
 8002678:	4613      	mov	r3, r2
 800267a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800267c:	4a05      	ldr	r2, [pc, #20]	; (8002694 <SSD1306_GotoXY+0x28>)
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <SSD1306_GotoXY+0x28>)
 8002684:	88bb      	ldrh	r3, [r7, #4]
 8002686:	8053      	strh	r3, [r2, #2]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000e3c 	.word	0x20000e3c

08002698 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	4613      	mov	r3, r2
 80026a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <SSD1306_Putc+0xfc>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
	if (
 80026b4:	2b7f      	cmp	r3, #127	; 0x7f
 80026b6:	dc07      	bgt.n	80026c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80026b8:	4b36      	ldr	r3, [pc, #216]	; (8002794 <SSD1306_Putc+0xfc>)
 80026ba:	885b      	ldrh	r3, [r3, #2]
 80026bc:	461a      	mov	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	785b      	ldrb	r3, [r3, #1]
 80026c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80026c4:	2b3f      	cmp	r3, #63	; 0x3f
 80026c6:	dd01      	ble.n	80026cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e05e      	b.n	800278a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e04b      	b.n	800276a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	3b20      	subs	r3, #32
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	7849      	ldrb	r1, [r1, #1]
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4619      	mov	r1, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	440b      	add	r3, r1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e030      	b.n	8002758 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d010      	beq.n	8002728 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <SSD1306_Putc+0xfc>)
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4413      	add	r3, r2
 8002710:	b298      	uxth	r0, r3
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <SSD1306_Putc+0xfc>)
 8002714:	885a      	ldrh	r2, [r3, #2]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	b29b      	uxth	r3, r3
 800271a:	4413      	add	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	79ba      	ldrb	r2, [r7, #6]
 8002720:	4619      	mov	r1, r3
 8002722:	f7ff ff43 	bl	80025ac <SSD1306_DrawPixel>
 8002726:	e014      	b.n	8002752 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <SSD1306_Putc+0xfc>)
 800272a:	881a      	ldrh	r2, [r3, #0]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	b29b      	uxth	r3, r3
 8002730:	4413      	add	r3, r2
 8002732:	b298      	uxth	r0, r3
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <SSD1306_Putc+0xfc>)
 8002736:	885a      	ldrh	r2, [r3, #2]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	b29b      	uxth	r3, r3
 800273c:	4413      	add	r3, r2
 800273e:	b299      	uxth	r1, r3
 8002740:	79bb      	ldrb	r3, [r7, #6]
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	f7ff ff2d 	bl	80025ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	3301      	adds	r3, #1
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4293      	cmp	r3, r2
 8002762:	d3c8      	bcc.n	80026f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	461a      	mov	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4293      	cmp	r3, r2
 8002774:	d3ad      	bcc.n	80026d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <SSD1306_Putc+0xfc>)
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b29a      	uxth	r2, r3
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <SSD1306_Putc+0xfc>)
 8002786:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002788:	79fb      	ldrb	r3, [r7, #7]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000e3c 	.word	0x20000e3c

08002798 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80027a6:	e012      	b.n	80027ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	79fa      	ldrb	r2, [r7, #7]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff71 	bl	8002698 <SSD1306_Putc>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d002      	beq.n	80027c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	e008      	b.n	80027da <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3301      	adds	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e8      	bne.n	80027a8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <ssd1306_I2C_Init+0x28>)
 80027ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80027ee:	e002      	b.n	80027f6 <ssd1306_I2C_Init+0x12>
		p--;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f9      	bne.n	80027f0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	0003d090 	.word	0x0003d090

08002810 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b0c7      	sub	sp, #284	; 0x11c
 8002814:	af02      	add	r7, sp, #8
 8002816:	4604      	mov	r4, r0
 8002818:	4608      	mov	r0, r1
 800281a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800281e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002822:	600a      	str	r2, [r1, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800282a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800282e:	4622      	mov	r2, r4
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002836:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800283a:	4602      	mov	r2, r0
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002842:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002846:	460a      	mov	r2, r1
 8002848:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800284a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800284e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002852:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002856:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002864:	e015      	b.n	8002892 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002866:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800286a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800286e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	441a      	add	r2, r3
 8002876:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800287a:	3301      	adds	r3, #1
 800287c:	7811      	ldrb	r1, [r2, #0]
 800287e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002882:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002886:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002888:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800288c:	3301      	adds	r3, #1
 800288e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002892:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002896:	b29b      	uxth	r3, r3
 8002898:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800289c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80028a0:	8812      	ldrh	r2, [r2, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d8df      	bhi.n	8002866 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80028a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028aa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b299      	uxth	r1, r3
 80028b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f107 020c 	add.w	r2, r7, #12
 80028c4:	200a      	movs	r0, #10
 80028c6:	9000      	str	r0, [sp, #0]
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <ssd1306_I2C_WriteMulti+0xc8>)
 80028ca:	f002 ffd9 	bl	8005880 <HAL_I2C_Master_Transmit>
}
 80028ce:	bf00      	nop
 80028d0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	20000438 	.word	0x20000438

080028dc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	460b      	mov	r3, r1
 80028e8:	71bb      	strb	r3, [r7, #6]
 80028ea:	4613      	mov	r3, r2
 80028ec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80028ee:	79bb      	ldrb	r3, [r7, #6]
 80028f0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80028f2:	797b      	ldrb	r3, [r7, #5]
 80028f4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	b299      	uxth	r1, r3
 80028fa:	f107 020c 	add.w	r2, r7, #12
 80028fe:	230a      	movs	r3, #10
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2302      	movs	r3, #2
 8002904:	4803      	ldr	r0, [pc, #12]	; (8002914 <ssd1306_I2C_Write+0x38>)
 8002906:	f002 ffbb 	bl	8005880 <HAL_I2C_Master_Transmit>
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000438 	.word	0x20000438

08002918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_MspInit+0x4c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <HAL_MspInit+0x4c>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_MspInit+0x4c>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_MspInit+0x4c>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <HAL_MspInit+0x4c>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_MspInit+0x4c>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800

08002968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <HAL_ADC_MspInit+0xb0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d141      	bne.n	8002a0e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_ADC_MspInit+0xb4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80029de:	230e      	movs	r3, #14
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e2:	2303      	movs	r3, #3
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <HAL_ADC_MspInit+0xb8>)
 80029f2:	f001 f827 	bl	8003a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029f6:	2310      	movs	r3, #16
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029fa:	2303      	movs	r3, #3
 80029fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <HAL_ADC_MspInit+0xbc>)
 8002a0a:	f001 f81b 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40012000 	.word	0x40012000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40020800 	.word	0x40020800

08002a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a46      	ldr	r2, [pc, #280]	; (8002b60 <HAL_I2C_MspInit+0x138>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d12d      	bne.n	8002aa6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a44      	ldr	r2, [pc, #272]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002a66:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a6c:	2312      	movs	r3, #18
 8002a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a70:	2301      	movs	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a78:	2304      	movs	r3, #4
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4839      	ldr	r0, [pc, #228]	; (8002b68 <HAL_I2C_MspInit+0x140>)
 8002a84:	f000 ffde 	bl	8003a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a96:	6413      	str	r3, [r2, #64]	; 0x40
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002aa4:	e058      	b.n	8002b58 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a30      	ldr	r2, [pc, #192]	; (8002b6c <HAL_I2C_MspInit+0x144>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d153      	bne.n	8002b58 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aee:	2312      	movs	r3, #18
 8002af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002afa:	2304      	movs	r3, #4
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	4619      	mov	r1, r3
 8002b04:	481a      	ldr	r0, [pc, #104]	; (8002b70 <HAL_I2C_MspInit+0x148>)
 8002b06:	f000 ff9d 	bl	8003a44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b10:	2312      	movs	r3, #18
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	4619      	mov	r1, r3
 8002b26:	4813      	ldr	r0, [pc, #76]	; (8002b74 <HAL_I2C_MspInit+0x14c>)
 8002b28:	f000 ff8c 	bl	8003a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002b36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_I2C_MspInit+0x13c>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2048      	movs	r0, #72	; 0x48
 8002b4e:	f000 ff1f 	bl	8003990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002b52:	2048      	movs	r0, #72	; 0x48
 8002b54:	f000 ff38 	bl	80039c8 <HAL_NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3730      	adds	r7, #48	; 0x30
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40005400 	.word	0x40005400
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40005c00 	.word	0x40005c00
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40020000 	.word	0x40020000

08002b78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	; 0x38
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_I2S_MspInit+0xf0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d15a      	bne.n	8002c5e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002bac:	23c0      	movs	r3, #192	; 0xc0
 8002bae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f006 fafb 	bl	80091b4 <HAL_RCCEx_PeriphCLKConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002bc4:	f7ff f9fa 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_I2S_MspInit+0xf4>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	4619      	mov	r1, r3
 8002c36:	480e      	ldr	r0, [pc, #56]	; (8002c70 <HAL_I2S_MspInit+0xf8>)
 8002c38:	f000 ff04 	bl	8003a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002c3c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c4e:	2306      	movs	r3, #6
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c56:	4619      	mov	r1, r3
 8002c58:	4806      	ldr	r0, [pc, #24]	; (8002c74 <HAL_I2S_MspInit+0xfc>)
 8002c5a:	f000 fef3 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c5e:	bf00      	nop
 8002c60:	3738      	adds	r7, #56	; 0x38
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40003c00 	.word	0x40003c00
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020800 	.word	0x40020800

08002c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_SPI_MspInit+0x84>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d12b      	bne.n	8002cf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002cd2:	23e0      	movs	r3, #224	; 0xe0
 8002cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	; (8002d04 <HAL_SPI_MspInit+0x8c>)
 8002cee:	f000 fea9 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3728      	adds	r7, #40	; 0x28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40013000 	.word	0x40013000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020000 	.word	0x40020000

08002d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_TIM_Base_MspInit+0x3c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10d      	bne.n	8002d36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_TIM_Base_MspInit+0x40>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_TIM_Base_MspInit+0x40>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_TIM_Base_MspInit+0x40>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_TIM_MspPostInit+0x68>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d11e      	bne.n	8002dac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_TIM_MspPostInit+0x6c>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a10      	ldr	r2, [pc, #64]	; (8002db8 <HAL_TIM_MspPostInit+0x6c>)
 8002d78:	f043 0310 	orr.w	r3, r3, #16
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_TIM_MspPostInit+0x6c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	4619      	mov	r1, r3
 8002da6:	4805      	ldr	r0, [pc, #20]	; (8002dbc <HAL_TIM_MspPostInit+0x70>)
 8002da8:	f000 fe4c 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002dac:	bf00      	nop
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08c      	sub	sp, #48	; 0x30
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	2036      	movs	r0, #54	; 0x36
 8002dd6:	f000 fddb 	bl	8003990 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dda:	2036      	movs	r0, #54	; 0x36
 8002ddc:	f000 fdf4 	bl	80039c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <HAL_InitTick+0xa4>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_InitTick+0xa4>)
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	6413      	str	r3, [r2, #64]	; 0x40
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_InitTick+0xa4>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dfc:	f107 0210 	add.w	r2, r7, #16
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f006 f9a2 	bl	8009150 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e0c:	f006 f98c 	bl	8009128 <HAL_RCC_GetPCLK1Freq>
 8002e10:	4603      	mov	r3, r0
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <HAL_InitTick+0xa8>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0c9b      	lsrs	r3, r3, #18
 8002e20:	3b01      	subs	r3, #1
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_InitTick+0xac>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <HAL_InitTick+0xb0>)
 8002e28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_InitTick+0xac>)
 8002e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_InitTick+0xac>)
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_InitTick+0xac>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_InitTick+0xac>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e44:	4809      	ldr	r0, [pc, #36]	; (8002e6c <HAL_InitTick+0xac>)
 8002e46:	f006 fb7e 	bl	8009546 <HAL_TIM_Base_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e50:	4806      	ldr	r0, [pc, #24]	; (8002e6c <HAL_InitTick+0xac>)
 8002e52:	f006 fbc7 	bl	80095e4 <HAL_TIM_Base_Start_IT>
 8002e56:	4603      	mov	r3, r0
 8002e58:	e000      	b.n	8002e5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	20000e44 	.word	0x20000e44
 8002e70:	40001000 	.word	0x40001000

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <NMI_Handler+0x4>

08002e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <HardFault_Handler+0x4>

08002e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <MemManage_Handler+0x4>

08002e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <BusFault_Handler+0x4>

08002e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <UsageFault_Handler+0x4>

08002e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <TIM6_DAC_IRQHandler+0x10>)
 8002ea6:	f006 fc66 	bl	8009776 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000e44 	.word	0x20000e44

08002eb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <OTG_FS_IRQHandler+0x10>)
 8002eba:	f001 f9fd 	bl	80042b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20014014 	.word	0x20014014

08002ec8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <I2C3_EV_IRQHandler+0x10>)
 8002ece:	f003 f929 	bl	8006124 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2000048c 	.word	0x2000048c

08002edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <SystemInit+0x20>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <SystemInit+0x20>)
 8002ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f06:	490e      	ldr	r1, [pc, #56]	; (8002f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f08:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f1c:	4c0b      	ldr	r4, [pc, #44]	; (8002f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f2a:	f7ff ffd7 	bl	8002edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f00d fa03 	bl	8010338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f32:	f7fd ffad 	bl	8000e90 <main>
  bx  lr    
 8002f36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f40:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002f44:	08011634 	.word	0x08011634
  ldr r2, =_sbss
 8002f48:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002f4c:	2001432c 	.word	0x2001432c

08002f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f50:	e7fe      	b.n	8002f50 <ADC_IRQHandler>
	...

08002f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_Init+0x40>)
 8002f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_Init+0x40>)
 8002f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_Init+0x40>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f000 fcfc 	bl	800397a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff ff1c 	bl	8002dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f88:	f7ff fcc6 	bl	8002918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000024 	.word	0x20000024
 8002fbc:	20000e8c 	.word	0x20000e8c

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000e8c 	.word	0x20000e8c

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000024 	.word	0x20000024

08003020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e033      	b.n	800309e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fc92 	bl	8002968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003066:	f023 0302 	bic.w	r3, r3, #2
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fad8 	bl	8003628 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
 800308e:	e001      	b.n	8003094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_Start+0x1a>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0b2      	b.n	8003228 <HAL_ADC_Start+0x180>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d018      	beq.n	800310a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030e8:	4b52      	ldr	r3, [pc, #328]	; (8003234 <HAL_ADC_Start+0x18c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_ADC_Start+0x190>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9a      	lsrs	r2, r3, #18
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030fc:	e002      	b.n	8003104 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3b01      	subs	r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f9      	bne.n	80030fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d17a      	bne.n	800320e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003142:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003156:	d106      	bne.n	8003166 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	f023 0206 	bic.w	r2, r3, #6
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	645a      	str	r2, [r3, #68]	; 0x44
 8003164:	e002      	b.n	800316c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003174:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_ADC_Start+0x194>)
 8003176:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003180:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2b00      	cmp	r3, #0
 800318c:	d12a      	bne.n	80031e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <HAL_ADC_Start+0x198>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d015      	beq.n	80031c4 <HAL_ADC_Start+0x11c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a29      	ldr	r2, [pc, #164]	; (8003244 <HAL_ADC_Start+0x19c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d105      	bne.n	80031ae <HAL_ADC_Start+0x106>
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <HAL_ADC_Start+0x194>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a25      	ldr	r2, [pc, #148]	; (8003248 <HAL_ADC_Start+0x1a0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d136      	bne.n	8003226 <HAL_ADC_Start+0x17e>
 80031b8:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_ADC_Start+0x194>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d130      	bne.n	8003226 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d129      	bne.n	8003226 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	e020      	b.n	8003226 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a15      	ldr	r2, [pc, #84]	; (8003240 <HAL_ADC_Start+0x198>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d11b      	bne.n	8003226 <HAL_ADC_Start+0x17e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d114      	bne.n	8003226 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	e00b      	b.n	8003226 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	2000001c 	.word	0x2000001c
 8003238:	431bde83 	.word	0x431bde83
 800323c:	40012300 	.word	0x40012300
 8003240:	40012000 	.word	0x40012000
 8003244:	40012100 	.word	0x40012100
 8003248:	40012200 	.word	0x40012200

0800324c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_ADC_Stop+0x16>
 800325e:	2302      	movs	r3, #2
 8003260:	e021      	b.n	80032a6 <HAL_ADC_Stop+0x5a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ce:	d113      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032de:	d10b      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e063      	b.n	80033c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80032f8:	f7ff fe62 	bl	8002fc0 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032fe:	e021      	b.n	8003344 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d01d      	beq.n	8003344 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_ADC_PollForConversion+0x6c>
 800330e:	f7ff fe57 	bl	8002fc0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d212      	bcs.n	8003344 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d00b      	beq.n	8003344 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e03d      	b.n	80033c0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d1d6      	bne.n	8003300 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0212 	mvn.w	r2, #18
 800335a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d123      	bne.n	80033be <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11f      	bne.n	80033be <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003396:	2b00      	cmp	r3, #0
 8003398:	d111      	bne.n	80033be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d105      	bne.n	80033be <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e105      	b.n	800360c <HAL_ADC_ConfigChannel+0x228>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b09      	cmp	r3, #9
 800340e:	d925      	bls.n	800345c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68d9      	ldr	r1, [r3, #12]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	3b1e      	subs	r3, #30
 8003426:	2207      	movs	r2, #7
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43da      	mvns	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	400a      	ands	r2, r1
 8003434:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68d9      	ldr	r1, [r3, #12]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	4618      	mov	r0, r3
 8003448:	4603      	mov	r3, r0
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4403      	add	r3, r0
 800344e:	3b1e      	subs	r3, #30
 8003450:	409a      	lsls	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	e022      	b.n	80034a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6919      	ldr	r1, [r3, #16]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	2207      	movs	r2, #7
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	400a      	ands	r2, r1
 800347e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6919      	ldr	r1, [r3, #16]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	4618      	mov	r0, r3
 8003492:	4603      	mov	r3, r0
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4403      	add	r3, r0
 8003498:	409a      	lsls	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d824      	bhi.n	80034f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	3b05      	subs	r3, #5
 80034bc:	221f      	movs	r2, #31
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	400a      	ands	r2, r1
 80034ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	3b05      	subs	r3, #5
 80034e6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34
 80034f2:	e04c      	b.n	800358e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d824      	bhi.n	8003546 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	3b23      	subs	r3, #35	; 0x23
 800350e:	221f      	movs	r2, #31
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43da      	mvns	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	400a      	ands	r2, r1
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	4618      	mov	r0, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	3b23      	subs	r3, #35	; 0x23
 8003538:	fa00 f203 	lsl.w	r2, r0, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
 8003544:	e023      	b.n	800358e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	3b41      	subs	r3, #65	; 0x41
 8003558:	221f      	movs	r2, #31
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	400a      	ands	r2, r1
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	3b41      	subs	r3, #65	; 0x41
 8003582:	fa00 f203 	lsl.w	r2, r0, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_ADC_ConfigChannel+0x234>)
 8003590:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a21      	ldr	r2, [pc, #132]	; (800361c <HAL_ADC_ConfigChannel+0x238>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d109      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1cc>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b12      	cmp	r3, #18
 80035a2:	d105      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_ADC_ConfigChannel+0x238>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d123      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x21e>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d003      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x1e6>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b11      	cmp	r3, #17
 80035c8:	d11b      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d111      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <HAL_ADC_ConfigChannel+0x23c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_ADC_ConfigChannel+0x240>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	0c9a      	lsrs	r2, r3, #18
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035f4:	e002      	b.n	80035fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f9      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40012300 	.word	0x40012300
 800361c:	40012000 	.word	0x40012000
 8003620:	2000001c 	.word	0x2000001c
 8003624:	431bde83 	.word	0x431bde83

08003628 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003630:	4b79      	ldr	r3, [pc, #484]	; (8003818 <ADC_Init+0x1f0>)
 8003632:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	431a      	orrs	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800365c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	021a      	lsls	r2, r3, #8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	4a58      	ldr	r2, [pc, #352]	; (800381c <ADC_Init+0x1f4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d022      	beq.n	8003706 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	e00f      	b.n	8003726 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003724:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0202 	bic.w	r2, r2, #2
 8003734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6899      	ldr	r1, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7e1b      	ldrb	r3, [r3, #24]
 8003740:	005a      	lsls	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01b      	beq.n	800378c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003762:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003772:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	3b01      	subs	r3, #1
 8003780:	035a      	lsls	r2, r3, #13
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e007      	b.n	800379c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	051a      	lsls	r2, r3, #20
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6899      	ldr	r1, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037de:	025a      	lsls	r2, r3, #9
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	029a      	lsls	r2, r3, #10
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40012300 	.word	0x40012300
 800381c:	0f000001 	.word	0x0f000001

08003820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800383c:	4013      	ands	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800384c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	; (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <__NVIC_GetPriorityGrouping+0x18>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 0307 	and.w	r3, r3, #7
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	db0b      	blt.n	80038ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4907      	ldr	r1, [pc, #28]	; (80038bc <__NVIC_EnableIRQ+0x38>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2001      	movs	r0, #1
 80038a6:	fa00 f202 	lsl.w	r2, r0, r2
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	6039      	str	r1, [r7, #0]
 80038ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	db0a      	blt.n	80038ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	490c      	ldr	r1, [pc, #48]	; (800390c <__NVIC_SetPriority+0x4c>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	440b      	add	r3, r1
 80038e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e8:	e00a      	b.n	8003900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4908      	ldr	r1, [pc, #32]	; (8003910 <__NVIC_SetPriority+0x50>)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	3b04      	subs	r3, #4
 80038f8:	0112      	lsls	r2, r2, #4
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	440b      	add	r3, r1
 80038fe:	761a      	strb	r2, [r3, #24]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000e100 	.word	0xe000e100
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f1c3 0307 	rsb	r3, r3, #7
 800392e:	2b04      	cmp	r3, #4
 8003930:	bf28      	it	cs
 8003932:	2304      	movcs	r3, #4
 8003934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3304      	adds	r3, #4
 800393a:	2b06      	cmp	r3, #6
 800393c:	d902      	bls.n	8003944 <NVIC_EncodePriority+0x30>
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3b03      	subs	r3, #3
 8003942:	e000      	b.n	8003946 <NVIC_EncodePriority+0x32>
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003948:	f04f 32ff 	mov.w	r2, #4294967295
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	401a      	ands	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800395c:	f04f 31ff 	mov.w	r1, #4294967295
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43d9      	mvns	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	4313      	orrs	r3, r2
         );
}
 800396e:	4618      	mov	r0, r3
 8003970:	3724      	adds	r7, #36	; 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff4c 	bl	8003820 <__NVIC_SetPriorityGrouping>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a2:	f7ff ff61 	bl	8003868 <__NVIC_GetPriorityGrouping>
 80039a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	6978      	ldr	r0, [r7, #20]
 80039ae:	f7ff ffb1 	bl	8003914 <NVIC_EncodePriority>
 80039b2:	4602      	mov	r2, r0
 80039b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff80 	bl	80038c0 <__NVIC_SetPriority>
}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ff54 	bl	8003884 <__NVIC_EnableIRQ>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d004      	beq.n	8003a02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2280      	movs	r2, #128	; 0x80
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e00c      	b.n	8003a1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2205      	movs	r2, #5
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a36:	b2db      	uxtb	r3, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	e16b      	b.n	8003d38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a60:	2201      	movs	r2, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	f040 815a 	bne.w	8003d32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d005      	beq.n	8003a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d130      	bne.n	8003af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003acc:	2201      	movs	r2, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 0201 	and.w	r2, r3, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d017      	beq.n	8003b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d123      	bne.n	8003b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	08da      	lsrs	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3208      	adds	r2, #8
 8003b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	08da      	lsrs	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3208      	adds	r2, #8
 8003b82:	69b9      	ldr	r1, [r7, #24]
 8003b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0203 	and.w	r2, r3, #3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80b4 	beq.w	8003d32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	4b60      	ldr	r3, [pc, #384]	; (8003d50 <HAL_GPIO_Init+0x30c>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	4a5f      	ldr	r2, [pc, #380]	; (8003d50 <HAL_GPIO_Init+0x30c>)
 8003bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bda:	4b5d      	ldr	r3, [pc, #372]	; (8003d50 <HAL_GPIO_Init+0x30c>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be6:	4a5b      	ldr	r2, [pc, #364]	; (8003d54 <HAL_GPIO_Init+0x310>)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_GPIO_Init+0x314>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d02b      	beq.n	8003c6a <HAL_GPIO_Init+0x226>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a51      	ldr	r2, [pc, #324]	; (8003d5c <HAL_GPIO_Init+0x318>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d025      	beq.n	8003c66 <HAL_GPIO_Init+0x222>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a50      	ldr	r2, [pc, #320]	; (8003d60 <HAL_GPIO_Init+0x31c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01f      	beq.n	8003c62 <HAL_GPIO_Init+0x21e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4f      	ldr	r2, [pc, #316]	; (8003d64 <HAL_GPIO_Init+0x320>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d019      	beq.n	8003c5e <HAL_GPIO_Init+0x21a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4e      	ldr	r2, [pc, #312]	; (8003d68 <HAL_GPIO_Init+0x324>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_GPIO_Init+0x216>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4d      	ldr	r2, [pc, #308]	; (8003d6c <HAL_GPIO_Init+0x328>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00d      	beq.n	8003c56 <HAL_GPIO_Init+0x212>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4c      	ldr	r2, [pc, #304]	; (8003d70 <HAL_GPIO_Init+0x32c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <HAL_GPIO_Init+0x20e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4b      	ldr	r2, [pc, #300]	; (8003d74 <HAL_GPIO_Init+0x330>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <HAL_GPIO_Init+0x20a>
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	e00e      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	; (8003d54 <HAL_GPIO_Init+0x310>)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cae:	4a32      	ldr	r2, [pc, #200]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb4:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2c:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	f67f ae90 	bls.w	8003a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40021c00 	.word	0x40021c00
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d8c:	787b      	ldrb	r3, [r7, #1]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d98:	e003      	b.n	8003da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d9a:	887b      	ldrh	r3, [r7, #2]
 8003d9c:	041a      	lsls	r2, r3, #16
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	619a      	str	r2, [r3, #24]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dc0:	887a      	ldrh	r2, [r7, #2]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	041a      	lsls	r2, r3, #16
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43d9      	mvns	r1, r3
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	400b      	ands	r3, r1
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de4:	b08f      	sub	sp, #60	; 0x3c
 8003de6:	af0a      	add	r7, sp, #40	; 0x28
 8003de8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e054      	b.n	8003e9e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f00b ffe8 	bl	800fde4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2203      	movs	r2, #3
 8003e18:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f006 fb98 	bl	800a568 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	687e      	ldr	r6, [r7, #4]
 8003e40:	466d      	mov	r5, sp
 8003e42:	f106 0410 	add.w	r4, r6, #16
 8003e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e52:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e56:	1d33      	adds	r3, r6, #4
 8003e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f006 fb12 	bl	800a484 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f006 fb8f 	bl	800a58a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	687e      	ldr	r6, [r7, #4]
 8003e74:	466d      	mov	r5, sp
 8003e76:	f106 0410 	add.w	r4, r6, #16
 8003e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e8a:	1d33      	adds	r3, r6, #4
 8003e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8e:	6838      	ldr	r0, [r7, #0]
 8003e90:	f006 fd18 	bl	800a8c4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ea6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003ea6:	b590      	push	{r4, r7, lr}
 8003ea8:	b089      	sub	sp, #36	; 0x24
 8003eaa:	af04      	add	r7, sp, #16
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	4608      	mov	r0, r1
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	70fb      	strb	r3, [r7, #3]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70bb      	strb	r3, [r7, #2]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_HCD_HC_Init+0x28>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e076      	b.n	8003fbc <HAL_HCD_HC_Init+0x116>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	333d      	adds	r3, #61	; 0x3d
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3338      	adds	r3, #56	; 0x38
 8003ef6:	787a      	ldrb	r2, [r7, #1]
 8003ef8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	3340      	adds	r3, #64	; 0x40
 8003f08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f0a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3339      	adds	r3, #57	; 0x39
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	212c      	movs	r1, #44	; 0x2c
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	333f      	adds	r3, #63	; 0x3f
 8003f2c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	78ba      	ldrb	r2, [r7, #2]
 8003f36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f3a:	b2d0      	uxtb	r0, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	333a      	adds	r3, #58	; 0x3a
 8003f48:	4602      	mov	r2, r0
 8003f4a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003f4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da09      	bge.n	8003f68 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	212c      	movs	r1, #44	; 0x2c
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	333b      	adds	r3, #59	; 0x3b
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e008      	b.n	8003f7a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	333b      	adds	r3, #59	; 0x3b
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	212c      	movs	r1, #44	; 0x2c
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	333c      	adds	r3, #60	; 0x3c
 8003f88:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f8c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	787c      	ldrb	r4, [r7, #1]
 8003f94:	78ba      	ldrb	r2, [r7, #2]
 8003f96:	78f9      	ldrb	r1, [r7, #3]
 8003f98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f9a:	9302      	str	r3, [sp, #8]
 8003f9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4623      	mov	r3, r4
 8003faa:	f006 fe11 	bl	800abd0 <USB_HC_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd90      	pop	{r4, r7, pc}

08003fc4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_HCD_HC_Halt+0x1e>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e00f      	b.n	8004002 <HAL_HCD_HC_Halt+0x3e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f007 f861 	bl	800b0ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	70fb      	strb	r3, [r7, #3]
 800401e:	460b      	mov	r3, r1
 8004020:	70bb      	strb	r3, [r7, #2]
 8004022:	4613      	mov	r3, r2
 8004024:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	212c      	movs	r1, #44	; 0x2c
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	333b      	adds	r3, #59	; 0x3b
 8004034:	78ba      	ldrb	r2, [r7, #2]
 8004036:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	333f      	adds	r3, #63	; 0x3f
 8004046:	787a      	ldrb	r2, [r7, #1]
 8004048:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800404a:	7c3b      	ldrb	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d112      	bne.n	8004076 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	3342      	adds	r3, #66	; 0x42
 800405e:	2203      	movs	r2, #3
 8004060:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	212c      	movs	r1, #44	; 0x2c
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	4413      	add	r3, r2
 800406e:	333d      	adds	r3, #61	; 0x3d
 8004070:	7f3a      	ldrb	r2, [r7, #28]
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	e008      	b.n	8004088 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	212c      	movs	r1, #44	; 0x2c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	3342      	adds	r3, #66	; 0x42
 8004084:	2202      	movs	r2, #2
 8004086:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b03      	cmp	r3, #3
 800408c:	f200 80c6 	bhi.w	800421c <HAL_HCD_HC_SubmitRequest+0x210>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040a9 	.word	0x080040a9
 800409c:	08004209 	.word	0x08004209
 80040a0:	0800410d 	.word	0x0800410d
 80040a4:	0800418b 	.word	0x0800418b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80040a8:	7c3b      	ldrb	r3, [r7, #16]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	f040 80b8 	bne.w	8004220 <HAL_HCD_HC_SubmitRequest+0x214>
 80040b0:	78bb      	ldrb	r3, [r7, #2]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 80b4 	bne.w	8004220 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80040b8:	8b3b      	ldrh	r3, [r7, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	3355      	adds	r3, #85	; 0x55
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	3355      	adds	r3, #85	; 0x55
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3342      	adds	r3, #66	; 0x42
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040f6:	e093      	b.n	8004220 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3342      	adds	r3, #66	; 0x42
 8004106:	2202      	movs	r2, #2
 8004108:	701a      	strb	r2, [r3, #0]
      break;
 800410a:	e089      	b.n	8004220 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800410c:	78bb      	ldrb	r3, [r7, #2]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11d      	bne.n	800414e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	3355      	adds	r3, #85	; 0x55
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	3342      	adds	r3, #66	; 0x42
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004138:	e073      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3342      	adds	r3, #66	; 0x42
 8004148:	2202      	movs	r2, #2
 800414a:	701a      	strb	r2, [r3, #0]
      break;
 800414c:	e069      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3354      	adds	r3, #84	; 0x54
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	3342      	adds	r3, #66	; 0x42
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
      break;
 8004174:	e055      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3342      	adds	r3, #66	; 0x42
 8004184:	2202      	movs	r2, #2
 8004186:	701a      	strb	r2, [r3, #0]
      break;
 8004188:	e04b      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800418a:	78bb      	ldrb	r3, [r7, #2]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11d      	bne.n	80041cc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3355      	adds	r3, #85	; 0x55
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	212c      	movs	r1, #44	; 0x2c
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	3342      	adds	r3, #66	; 0x42
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80041b6:	e034      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3342      	adds	r3, #66	; 0x42
 80041c6:	2202      	movs	r2, #2
 80041c8:	701a      	strb	r2, [r3, #0]
      break;
 80041ca:	e02a      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3354      	adds	r3, #84	; 0x54
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	212c      	movs	r1, #44	; 0x2c
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	3342      	adds	r3, #66	; 0x42
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
      break;
 80041f2:	e016      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	212c      	movs	r1, #44	; 0x2c
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	4413      	add	r3, r2
 8004200:	3342      	adds	r3, #66	; 0x42
 8004202:	2202      	movs	r2, #2
 8004204:	701a      	strb	r2, [r3, #0]
      break;
 8004206:	e00c      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3342      	adds	r3, #66	; 0x42
 8004216:	2200      	movs	r2, #0
 8004218:	701a      	strb	r2, [r3, #0]
      break;
 800421a:	e002      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800421c:	bf00      	nop
 800421e:	e000      	b.n	8004222 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004220:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3344      	adds	r3, #68	; 0x44
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	8b3a      	ldrh	r2, [r7, #24]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	202c      	movs	r0, #44	; 0x2c
 800423c:	fb00 f303 	mul.w	r3, r0, r3
 8004240:	440b      	add	r3, r1
 8004242:	334c      	adds	r3, #76	; 0x4c
 8004244:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3360      	adds	r3, #96	; 0x60
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3350      	adds	r3, #80	; 0x50
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3339      	adds	r3, #57	; 0x39
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	3361      	adds	r3, #97	; 0x61
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	222c      	movs	r2, #44	; 0x2c
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	3338      	adds	r3, #56	; 0x38
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	18d1      	adds	r1, r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	f006 fdb4 	bl	800ae14 <USB_HC_StartXfer>
 80042ac:	4603      	mov	r3, r0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop

080042b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f006 fab5 	bl	800a83e <USB_GetMode>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	f040 80f6 	bne.w	80044c8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f006 fa99 	bl	800a818 <USB_ReadInterrupts>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80ec 	beq.w	80044c6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f006 fa90 	bl	800a818 <USB_ReadInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004302:	d104      	bne.n	800430e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800430c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f006 fa80 	bl	800a818 <USB_ReadInterrupts>
 8004318:	4603      	mov	r3, r0
 800431a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004322:	d104      	bne.n	800432e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800432c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f006 fa70 	bl	800a818 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800433e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004342:	d104      	bne.n	800434e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800434c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f006 fa60 	bl	800a818 <USB_ReadInterrupts>
 8004358:	4603      	mov	r3, r0
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d103      	bne.n	800436a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2202      	movs	r2, #2
 8004368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f006 fa52 	bl	800a818 <USB_ReadInterrupts>
 8004374:	4603      	mov	r3, r0
 8004376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800437a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437e:	d11c      	bne.n	80043ba <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004388:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10f      	bne.n	80043ba <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800439a:	2110      	movs	r1, #16
 800439c:	6938      	ldr	r0, [r7, #16]
 800439e:	f006 f941 	bl	800a624 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80043a2:	6938      	ldr	r0, [r7, #16]
 80043a4:	f006 f972 	bl	800a68c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2101      	movs	r1, #1
 80043ae:	4618      	mov	r0, r3
 80043b0:	f006 fb48 	bl	800aa44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f00b fd93 	bl	800fee0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f006 fa2a 	bl	800a818 <USB_ReadInterrupts>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ce:	d102      	bne.n	80043d6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f001 f89e 	bl	8005512 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f006 fa1c 	bl	800a818 <USB_ReadInterrupts>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d106      	bne.n	80043f8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f00b fd5c 	bl	800fea8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2208      	movs	r2, #8
 80043f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f006 fa0b 	bl	800a818 <USB_ReadInterrupts>
 8004402:	4603      	mov	r3, r0
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d101      	bne.n	8004410 <HAL_HCD_IRQHandler+0x158>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_HCD_IRQHandler+0x15a>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d012      	beq.n	800443c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0210 	bic.w	r2, r2, #16
 8004424:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 ffa1 	bl	800536e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0210 	orr.w	r2, r2, #16
 800443a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f006 f9e9 	bl	800a818 <USB_ReadInterrupts>
 8004446:	4603      	mov	r3, r0
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004450:	d13a      	bne.n	80044c8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f006 fe1e 	bl	800b098 <USB_HC_ReadInterrupt>
 800445c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e025      	b.n	80044b0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d018      	beq.n	80044aa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448e:	d106      	bne.n	800449e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8ab 	bl	80045f2 <HCD_HC_IN_IRQHandler>
 800449c:	e005      	b.n	80044aa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fbf9 	bl	8004c9c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	3301      	adds	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d3d4      	bcc.n	8004464 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044c2:	615a      	str	r2, [r3, #20]
 80044c4:	e000      	b.n	80044c8 <HAL_HCD_IRQHandler+0x210>
      return;
 80044c6:	bf00      	nop
    }
  }
}
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_HCD_Start+0x16>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e013      	b.n	800450c <HAL_HCD_Start+0x3e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2101      	movs	r1, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f006 fb0a 	bl	800ab0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f006 f822 	bl	800a546 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_HCD_Stop+0x16>
 8004526:	2302      	movs	r3, #2
 8004528:	e00d      	b.n	8004546 <HAL_HCD_Stop+0x32>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f006 fef8 	bl	800b32c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f006 faac 	bl	800aab8 <USB_ResetPort>
 8004560:	4603      	mov	r3, r0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3360      	adds	r3, #96	; 0x60
 8004584:	781b      	ldrb	r3, [r3, #0]
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	212c      	movs	r1, #44	; 0x2c
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	3350      	adds	r3, #80	; 0x50
 80045ac:	681b      	ldr	r3, [r3, #0]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f006 faf0 	bl	800abac <USB_GetCurrentFrame>
 80045cc:	4603      	mov	r3, r0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f006 facb 	bl	800ab7e <USB_GetHostSpeed>
 80045e8:	4603      	mov	r3, r0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d11a      	bne.n	8004658 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	461a      	mov	r2, r3
 8004630:	2304      	movs	r3, #4
 8004632:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	3361      	adds	r3, #97	; 0x61
 8004642:	2206      	movs	r2, #6
 8004644:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f006 fd32 	bl	800b0ba <USB_HC_Halt>
 8004656:	e0af      	b.n	80047b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466e:	d11b      	bne.n	80046a8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	461a      	mov	r2, r3
 800467e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004682:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	212c      	movs	r1, #44	; 0x2c
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	3361      	adds	r3, #97	; 0x61
 8004692:	2207      	movs	r2, #7
 8004694:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f006 fd0a 	bl	800b0ba <USB_HC_Halt>
 80046a6:	e087      	b.n	80047b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d109      	bne.n	80046d2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ca:	461a      	mov	r2, r3
 80046cc:	2320      	movs	r3, #32
 80046ce:	6093      	str	r3, [r2, #8]
 80046d0:	e072      	b.n	80047b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d11a      	bne.n	800471e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	461a      	mov	r2, r3
 80046f6:	2308      	movs	r3, #8
 80046f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	3361      	adds	r3, #97	; 0x61
 8004708:	2205      	movs	r2, #5
 800470a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f006 fccf 	bl	800b0ba <USB_HC_Halt>
 800471c:	e04c      	b.n	80047b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	d11b      	bne.n	800476e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004742:	461a      	mov	r2, r3
 8004744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004748:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	3361      	adds	r3, #97	; 0x61
 8004758:	2208      	movs	r2, #8
 800475a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	4611      	mov	r1, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f006 fca7 	bl	800b0ba <USB_HC_Halt>
 800476c:	e024      	b.n	80047b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004780:	2b80      	cmp	r3, #128	; 0x80
 8004782:	d119      	bne.n	80047b8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004790:	461a      	mov	r2, r3
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	3361      	adds	r3, #97	; 0x61
 80047a4:	2206      	movs	r2, #6
 80047a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f006 fc81 	bl	800b0ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ce:	d112      	bne.n	80047f6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f006 fc6d 	bl	800b0ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	461a      	mov	r2, r3
 80047ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047f2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80047f4:	e24e      	b.n	8004c94 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	f040 80df 	bne.w	80049cc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	212c      	movs	r1, #44	; 0x2c
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	4413      	add	r3, r2
 8004822:	3348      	adds	r3, #72	; 0x48
 8004824:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	0159      	lsls	r1, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	440b      	add	r3, r1
 800482e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004838:	1ad2      	subs	r2, r2, r3
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	202c      	movs	r0, #44	; 0x2c
 8004840:	fb00 f303 	mul.w	r3, r0, r3
 8004844:	440b      	add	r3, r1
 8004846:	3350      	adds	r3, #80	; 0x50
 8004848:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	212c      	movs	r1, #44	; 0x2c
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	4413      	add	r3, r2
 8004856:	3361      	adds	r3, #97	; 0x61
 8004858:	2201      	movs	r2, #1
 800485a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	212c      	movs	r1, #44	; 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	335c      	adds	r3, #92	; 0x5c
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487a:	461a      	mov	r2, r3
 800487c:	2301      	movs	r3, #1
 800487e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	212c      	movs	r1, #44	; 0x2c
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	4413      	add	r3, r2
 800488c:	333f      	adds	r3, #63	; 0x3f
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	212c      	movs	r1, #44	; 0x2c
 800489a:	fb01 f303 	mul.w	r3, r1, r3
 800489e:	4413      	add	r3, r2
 80048a0:	333f      	adds	r3, #63	; 0x3f
 80048a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d111      	bne.n	80048cc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f006 fc01 	bl	800b0ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	461a      	mov	r2, r3
 80048c6:	2310      	movs	r3, #16
 80048c8:	6093      	str	r3, [r2, #8]
 80048ca:	e03a      	b.n	8004942 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	212c      	movs	r1, #44	; 0x2c
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	333f      	adds	r3, #63	; 0x3f
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d009      	beq.n	80048f4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	212c      	movs	r1, #44	; 0x2c
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	333f      	adds	r3, #63	; 0x3f
 80048ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d126      	bne.n	8004942 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	440a      	add	r2, r1
 800490a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800490e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004912:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	212c      	movs	r1, #44	; 0x2c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	3360      	adds	r3, #96	; 0x60
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	b2d9      	uxtb	r1, r3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	202c      	movs	r0, #44	; 0x2c
 8004930:	fb00 f303 	mul.w	r3, r0, r3
 8004934:	4413      	add	r3, r2
 8004936:	3360      	adds	r3, #96	; 0x60
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f00b fadd 	bl	800fefc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d12b      	bne.n	80049a2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	212c      	movs	r1, #44	; 0x2c
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	3348      	adds	r3, #72	; 0x48
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	202c      	movs	r0, #44	; 0x2c
 8004960:	fb00 f202 	mul.w	r2, r0, r2
 8004964:	440a      	add	r2, r1
 8004966:	3240      	adds	r2, #64	; 0x40
 8004968:	8812      	ldrh	r2, [r2, #0]
 800496a:	fbb3 f3f2 	udiv	r3, r3, r2
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 818e 	beq.w	8004c94 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	212c      	movs	r1, #44	; 0x2c
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	4413      	add	r3, r2
 8004984:	3354      	adds	r3, #84	; 0x54
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f083 0301 	eor.w	r3, r3, #1
 800498c:	b2d8      	uxtb	r0, r3
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	212c      	movs	r1, #44	; 0x2c
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	3354      	adds	r3, #84	; 0x54
 800499c:	4602      	mov	r2, r0
 800499e:	701a      	strb	r2, [r3, #0]
}
 80049a0:	e178      	b.n	8004c94 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	3354      	adds	r3, #84	; 0x54
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	f083 0301 	eor.w	r3, r3, #1
 80049b6:	b2d8      	uxtb	r0, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	212c      	movs	r1, #44	; 0x2c
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	3354      	adds	r3, #84	; 0x54
 80049c6:	4602      	mov	r2, r0
 80049c8:	701a      	strb	r2, [r3, #0]
}
 80049ca:	e163      	b.n	8004c94 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	f040 80f6 	bne.w	8004bd0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	3361      	adds	r3, #97	; 0x61
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d109      	bne.n	8004a0c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	212c      	movs	r1, #44	; 0x2c
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3360      	adds	r3, #96	; 0x60
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e0c9      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	3361      	adds	r3, #97	; 0x61
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	d109      	bne.n	8004a34 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3360      	adds	r3, #96	; 0x60
 8004a2e:	2205      	movs	r2, #5
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e0b5      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	212c      	movs	r1, #44	; 0x2c
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	3361      	adds	r3, #97	; 0x61
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d009      	beq.n	8004a5c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	212c      	movs	r1, #44	; 0x2c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	3361      	adds	r3, #97	; 0x61
 8004a56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d150      	bne.n	8004afe <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	335c      	adds	r3, #92	; 0x5c
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	202c      	movs	r0, #44	; 0x2c
 8004a74:	fb00 f303 	mul.w	r3, r0, r3
 8004a78:	440b      	add	r3, r1
 8004a7a:	335c      	adds	r3, #92	; 0x5c
 8004a7c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	212c      	movs	r1, #44	; 0x2c
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	335c      	adds	r3, #92	; 0x5c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d912      	bls.n	8004ab8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	335c      	adds	r3, #92	; 0x5c
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3360      	adds	r3, #96	; 0x60
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ab6:	e073      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3360      	adds	r3, #96	; 0x60
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ae8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af6:	461a      	mov	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004afc:	e050      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	212c      	movs	r1, #44	; 0x2c
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	4413      	add	r3, r2
 8004b0a:	3361      	adds	r3, #97	; 0x61
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d122      	bne.n	8004b58 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	212c      	movs	r1, #44	; 0x2c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3360      	adds	r3, #96	; 0x60
 8004b20:	2202      	movs	r2, #2
 8004b22:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b3a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b42:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b50:	461a      	mov	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e023      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3361      	adds	r3, #97	; 0x61
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b07      	cmp	r3, #7
 8004b6a:	d119      	bne.n	8004ba0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	212c      	movs	r1, #44	; 0x2c
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	335c      	adds	r3, #92	; 0x5c
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	202c      	movs	r0, #44	; 0x2c
 8004b84:	fb00 f303 	mul.w	r3, r0, r3
 8004b88:	440b      	add	r3, r1
 8004b8a:	335c      	adds	r3, #92	; 0x5c
 8004b8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3360      	adds	r3, #96	; 0x60
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bac:	461a      	mov	r2, r3
 8004bae:	2302      	movs	r3, #2
 8004bb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	b2d9      	uxtb	r1, r3
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	202c      	movs	r0, #44	; 0x2c
 8004bbc:	fb00 f303 	mul.w	r3, r0, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3360      	adds	r3, #96	; 0x60
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f00b f997 	bl	800fefc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bce:	e061      	b.n	8004c94 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d156      	bne.n	8004c94 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	333f      	adds	r3, #63	; 0x3f
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d111      	bne.n	8004c1e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	335c      	adds	r3, #92	; 0x5c
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f006 fa4f 	bl	800b0ba <USB_HC_Halt>
 8004c1c:	e031      	b.n	8004c82 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	333f      	adds	r3, #63	; 0x3f
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	333f      	adds	r3, #63	; 0x3f
 8004c40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d11d      	bne.n	8004c82 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	335c      	adds	r3, #92	; 0x5c
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d110      	bne.n	8004c82 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	212c      	movs	r1, #44	; 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3361      	adds	r3, #97	; 0x61
 8004c6e:	2203      	movs	r2, #3
 8004c70:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f006 fa1c 	bl	800b0ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2310      	movs	r3, #16
 8004c92:	6093      	str	r3, [r2, #8]
}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d11a      	bne.n	8004d02 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2304      	movs	r3, #4
 8004cdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	212c      	movs	r1, #44	; 0x2c
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	3361      	adds	r3, #97	; 0x61
 8004cec:	2206      	movs	r2, #6
 8004cee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f006 f9dd 	bl	800b0ba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004d00:	e331      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d12e      	bne.n	8004d76 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d24:	461a      	mov	r2, r3
 8004d26:	2320      	movs	r3, #32
 8004d28:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	333d      	adds	r3, #61	; 0x3d
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	f040 8313 	bne.w	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	212c      	movs	r1, #44	; 0x2c
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	333d      	adds	r3, #61	; 0x3d
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3360      	adds	r3, #96	; 0x60
 8004d60:	2202      	movs	r2, #2
 8004d62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f006 f9a3 	bl	800b0ba <USB_HC_Halt>
}
 8004d74:	e2f7      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d112      	bne.n	8004db4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f006 f984 	bl	800b0ba <USB_HC_Halt>
}
 8004db2:	e2d8      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d140      	bne.n	8004e4c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	212c      	movs	r1, #44	; 0x2c
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	335c      	adds	r3, #92	; 0x5c
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d111      	bne.n	8004e16 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	333d      	adds	r3, #61	; 0x3d
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e10:	461a      	mov	r2, r3
 8004e12:	2340      	movs	r3, #64	; 0x40
 8004e14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	461a      	mov	r2, r3
 8004e24:	2301      	movs	r3, #1
 8004e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	3361      	adds	r3, #97	; 0x61
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	4611      	mov	r1, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f006 f938 	bl	800b0ba <USB_HC_Halt>
}
 8004e4a:	e28c      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d12c      	bne.n	8004ebc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	212c      	movs	r1, #44	; 0x2c
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3361      	adds	r3, #97	; 0x61
 8004e70:	2204      	movs	r2, #4
 8004e72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	212c      	movs	r1, #44	; 0x2c
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	333d      	adds	r3, #61	; 0x3d
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	335c      	adds	r3, #92	; 0x5c
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f006 f909 	bl	800b0ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2340      	movs	r3, #64	; 0x40
 8004eb8:	6093      	str	r3, [r2, #8]
}
 8004eba:	e254      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d11a      	bne.n	8004f08 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	212c      	movs	r1, #44	; 0x2c
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3361      	adds	r3, #97	; 0x61
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	4611      	mov	r1, r2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f006 f8da 	bl	800b0ba <USB_HC_Halt>
}
 8004f06:	e22e      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d140      	bne.n	8004fa0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	212c      	movs	r1, #44	; 0x2c
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	4413      	add	r3, r2
 8004f2a:	335c      	adds	r3, #92	; 0x5c
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	212c      	movs	r1, #44	; 0x2c
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3361      	adds	r3, #97	; 0x61
 8004f3e:	2203      	movs	r2, #3
 8004f40:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	212c      	movs	r1, #44	; 0x2c
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	333d      	adds	r3, #61	; 0x3d
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d112      	bne.n	8004f7c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	212c      	movs	r1, #44	; 0x2c
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	4413      	add	r3, r2
 8004f62:	333c      	adds	r3, #60	; 0x3c
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d108      	bne.n	8004f7c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	212c      	movs	r1, #44	; 0x2c
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	4413      	add	r3, r2
 8004f76:	333d      	adds	r3, #61	; 0x3d
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	4611      	mov	r1, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f006 f897 	bl	800b0ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	6093      	str	r3, [r2, #8]
}
 8004f9e:	e1e2      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d164      	bne.n	8005080 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d111      	bne.n	8004fe2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	212c      	movs	r1, #44	; 0x2c
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	3361      	adds	r3, #97	; 0x61
 8004fcc:	2206      	movs	r2, #6
 8004fce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f006 f86d 	bl	800b0ba <USB_HC_Halt>
 8004fe0:	e044      	b.n	800506c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	212c      	movs	r1, #44	; 0x2c
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	4413      	add	r3, r2
 8004fee:	335c      	adds	r3, #92	; 0x5c
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	202c      	movs	r0, #44	; 0x2c
 8004ffa:	fb00 f303 	mul.w	r3, r0, r3
 8004ffe:	440b      	add	r3, r1
 8005000:	335c      	adds	r3, #92	; 0x5c
 8005002:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	212c      	movs	r1, #44	; 0x2c
 800500a:	fb01 f303 	mul.w	r3, r1, r3
 800500e:	4413      	add	r3, r2
 8005010:	335c      	adds	r3, #92	; 0x5c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d920      	bls.n	800505a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	212c      	movs	r1, #44	; 0x2c
 800501e:	fb01 f303 	mul.w	r3, r1, r3
 8005022:	4413      	add	r3, r2
 8005024:	335c      	adds	r3, #92	; 0x5c
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	212c      	movs	r1, #44	; 0x2c
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	4413      	add	r3, r2
 8005036:	3360      	adds	r3, #96	; 0x60
 8005038:	2204      	movs	r2, #4
 800503a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	b2d9      	uxtb	r1, r3
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	202c      	movs	r0, #44	; 0x2c
 8005046:	fb00 f303 	mul.w	r3, r0, r3
 800504a:	4413      	add	r3, r2
 800504c:	3360      	adds	r3, #96	; 0x60
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f00a ff52 	bl	800fefc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005058:	e008      	b.n	800506c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	212c      	movs	r1, #44	; 0x2c
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	4413      	add	r3, r2
 8005066:	3360      	adds	r3, #96	; 0x60
 8005068:	2202      	movs	r2, #2
 800506a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	4413      	add	r3, r2
 8005074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005078:	461a      	mov	r2, r3
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	6093      	str	r3, [r2, #8]
}
 800507e:	e172      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005096:	d11b      	bne.n	80050d0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	212c      	movs	r1, #44	; 0x2c
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	3361      	adds	r3, #97	; 0x61
 80050a6:	2208      	movs	r2, #8
 80050a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f006 f800 	bl	800b0ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c6:	461a      	mov	r2, r3
 80050c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050cc:	6093      	str	r3, [r2, #8]
}
 80050ce:	e14a      	b.n	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	f040 813f 	bne.w	8005366 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	212c      	movs	r1, #44	; 0x2c
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	3361      	adds	r3, #97	; 0x61
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d17d      	bne.n	80051f8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	212c      	movs	r1, #44	; 0x2c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	3360      	adds	r3, #96	; 0x60
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	212c      	movs	r1, #44	; 0x2c
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	4413      	add	r3, r2
 800511a:	333f      	adds	r3, #63	; 0x3f
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d00a      	beq.n	8005138 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	212c      	movs	r1, #44	; 0x2c
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	4413      	add	r3, r2
 800512e:	333f      	adds	r3, #63	; 0x3f
 8005130:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005132:	2b03      	cmp	r3, #3
 8005134:	f040 8100 	bne.w	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d113      	bne.n	8005168 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	212c      	movs	r1, #44	; 0x2c
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	4413      	add	r3, r2
 800514c:	3355      	adds	r3, #85	; 0x55
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f083 0301 	eor.w	r3, r3, #1
 8005154:	b2d8      	uxtb	r0, r3
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	3355      	adds	r3, #85	; 0x55
 8005164:	4602      	mov	r2, r0
 8005166:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b01      	cmp	r3, #1
 800516e:	f040 80e3 	bne.w	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	212c      	movs	r1, #44	; 0x2c
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	4413      	add	r3, r2
 800517e:	334c      	adds	r3, #76	; 0x4c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80d8 	beq.w	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	334c      	adds	r3, #76	; 0x4c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	202c      	movs	r0, #44	; 0x2c
 800519e:	fb00 f202 	mul.w	r2, r0, r2
 80051a2:	440a      	add	r2, r1
 80051a4:	3240      	adds	r2, #64	; 0x40
 80051a6:	8812      	ldrh	r2, [r2, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	202c      	movs	r0, #44	; 0x2c
 80051b2:	fb00 f202 	mul.w	r2, r0, r2
 80051b6:	440a      	add	r2, r1
 80051b8:	3240      	adds	r2, #64	; 0x40
 80051ba:	8812      	ldrh	r2, [r2, #0]
 80051bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80b5 	beq.w	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	212c      	movs	r1, #44	; 0x2c
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	4413      	add	r3, r2
 80051da:	3355      	adds	r3, #85	; 0x55
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	f083 0301 	eor.w	r3, r3, #1
 80051e2:	b2d8      	uxtb	r0, r3
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	212c      	movs	r1, #44	; 0x2c
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	4413      	add	r3, r2
 80051f0:	3355      	adds	r3, #85	; 0x55
 80051f2:	4602      	mov	r2, r0
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e09f      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	212c      	movs	r1, #44	; 0x2c
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	4413      	add	r3, r2
 8005204:	3361      	adds	r3, #97	; 0x61
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b03      	cmp	r3, #3
 800520a:	d109      	bne.n	8005220 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	3360      	adds	r3, #96	; 0x60
 800521a:	2202      	movs	r2, #2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	e08b      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3361      	adds	r3, #97	; 0x61
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b04      	cmp	r3, #4
 8005232:	d109      	bne.n	8005248 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3360      	adds	r3, #96	; 0x60
 8005242:	2202      	movs	r2, #2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e077      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	212c      	movs	r1, #44	; 0x2c
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	3361      	adds	r3, #97	; 0x61
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b05      	cmp	r3, #5
 800525a:	d109      	bne.n	8005270 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	3360      	adds	r3, #96	; 0x60
 800526a:	2205      	movs	r2, #5
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e063      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	3361      	adds	r3, #97	; 0x61
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b06      	cmp	r3, #6
 8005282:	d009      	beq.n	8005298 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3361      	adds	r3, #97	; 0x61
 8005292:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005294:	2b08      	cmp	r3, #8
 8005296:	d14f      	bne.n	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	212c      	movs	r1, #44	; 0x2c
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	335c      	adds	r3, #92	; 0x5c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	202c      	movs	r0, #44	; 0x2c
 80052b0:	fb00 f303 	mul.w	r3, r0, r3
 80052b4:	440b      	add	r3, r1
 80052b6:	335c      	adds	r3, #92	; 0x5c
 80052b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	212c      	movs	r1, #44	; 0x2c
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	335c      	adds	r3, #92	; 0x5c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d912      	bls.n	80052f4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	212c      	movs	r1, #44	; 0x2c
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	335c      	adds	r3, #92	; 0x5c
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	212c      	movs	r1, #44	; 0x2c
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	3360      	adds	r3, #96	; 0x60
 80052ee:	2204      	movs	r2, #4
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e021      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	212c      	movs	r1, #44	; 0x2c
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	4413      	add	r3, r2
 8005300:	3360      	adds	r3, #96	; 0x60
 8005302:	2202      	movs	r2, #2
 8005304:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	4413      	add	r3, r2
 800530e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800531c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005324:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005332:	461a      	mov	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	461a      	mov	r2, r3
 8005346:	2302      	movs	r3, #2
 8005348:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	b2d9      	uxtb	r1, r3
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	202c      	movs	r0, #44	; 0x2c
 8005354:	fb00 f303 	mul.w	r3, r0, r3
 8005358:	4413      	add	r3, r2
 800535a:	3360      	adds	r3, #96	; 0x60
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f00a fdcb 	bl	800fefc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005366:	bf00      	nop
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b08a      	sub	sp, #40	; 0x28
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	0c5b      	lsrs	r3, r3, #17
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053a2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d004      	beq.n	80053b4 <HCD_RXQLVL_IRQHandler+0x46>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	f000 80a9 	beq.w	8005504 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80053b2:	e0aa      	b.n	800550a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80a6 	beq.w	8005508 <HCD_RXQLVL_IRQHandler+0x19a>
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	212c      	movs	r1, #44	; 0x2c
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	3344      	adds	r3, #68	; 0x44
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 809b 	beq.w	8005508 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	212c      	movs	r1, #44	; 0x2c
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	3350      	adds	r3, #80	; 0x50
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	441a      	add	r2, r3
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	202c      	movs	r0, #44	; 0x2c
 80053ec:	fb00 f303 	mul.w	r3, r0, r3
 80053f0:	440b      	add	r3, r1
 80053f2:	334c      	adds	r3, #76	; 0x4c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d87a      	bhi.n	80054f0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	212c      	movs	r1, #44	; 0x2c
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	4413      	add	r3, r2
 800540a:	3344      	adds	r3, #68	; 0x44
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	b292      	uxth	r2, r2
 8005412:	4619      	mov	r1, r3
 8005414:	f005 f9a8 	bl	800a768 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	212c      	movs	r1, #44	; 0x2c
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	3344      	adds	r3, #68	; 0x44
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	441a      	add	r2, r3
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	202c      	movs	r0, #44	; 0x2c
 8005432:	fb00 f303 	mul.w	r3, r0, r3
 8005436:	440b      	add	r3, r1
 8005438:	3344      	adds	r3, #68	; 0x44
 800543a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	212c      	movs	r1, #44	; 0x2c
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	4413      	add	r3, r2
 8005448:	3350      	adds	r3, #80	; 0x50
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	441a      	add	r2, r3
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	202c      	movs	r0, #44	; 0x2c
 8005456:	fb00 f303 	mul.w	r3, r0, r3
 800545a:	440b      	add	r3, r1
 800545c:	3350      	adds	r3, #80	; 0x50
 800545e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	0cdb      	lsrs	r3, r3, #19
 8005470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005474:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	212c      	movs	r1, #44	; 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	3340      	adds	r3, #64	; 0x40
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4293      	cmp	r3, r2
 800548c:	d13c      	bne.n	8005508 <HCD_RXQLVL_IRQHandler+0x19a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d039      	beq.n	8005508 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054aa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054b2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	461a      	mov	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	212c      	movs	r1, #44	; 0x2c
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	4413      	add	r3, r2
 80054d2:	3354      	adds	r3, #84	; 0x54
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	f083 0301 	eor.w	r3, r3, #1
 80054da:	b2d8      	uxtb	r0, r3
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	212c      	movs	r1, #44	; 0x2c
 80054e2:	fb01 f303 	mul.w	r3, r1, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	3354      	adds	r3, #84	; 0x54
 80054ea:	4602      	mov	r2, r0
 80054ec:	701a      	strb	r2, [r3, #0]
      break;
 80054ee:	e00b      	b.n	8005508 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	212c      	movs	r1, #44	; 0x2c
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	3360      	adds	r3, #96	; 0x60
 80054fe:	2204      	movs	r2, #4
 8005500:	701a      	strb	r2, [r3, #0]
      break;
 8005502:	e001      	b.n	8005508 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005504:	bf00      	nop
 8005506:	e000      	b.n	800550a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005508:	bf00      	nop
  }
}
 800550a:	bf00      	nop
 800550c:	3728      	adds	r7, #40	; 0x28
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800553e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d10b      	bne.n	8005562 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d102      	bne.n	800555a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f00a fcb5 	bl	800fec4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d132      	bne.n	80055d2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f043 0308 	orr.w	r3, r3, #8
 8005572:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b04      	cmp	r3, #4
 800557c:	d126      	bne.n	80055cc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d113      	bne.n	80055ae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800558c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005590:	d106      	bne.n	80055a0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2102      	movs	r1, #2
 8005598:	4618      	mov	r0, r3
 800559a:	f005 fa53 	bl	800aa44 <USB_InitFSLSPClkSel>
 800559e:	e011      	b.n	80055c4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2101      	movs	r1, #1
 80055a6:	4618      	mov	r0, r3
 80055a8:	f005 fa4c 	bl	800aa44 <USB_InitFSLSPClkSel>
 80055ac:	e00a      	b.n	80055c4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d106      	bne.n	80055c4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055bc:	461a      	mov	r2, r3
 80055be:	f64e 2360 	movw	r3, #60000	; 0xea60
 80055c2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f00a fca7 	bl	800ff18 <HAL_HCD_PortEnabled_Callback>
 80055ca:	e002      	b.n	80055d2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f00a fcb1 	bl	800ff34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d103      	bne.n	80055e4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f043 0320 	orr.w	r3, r3, #32
 80055e2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ea:	461a      	mov	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6013      	str	r3, [r2, #0]
}
 80055f0:	bf00      	nop
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e12b      	b.n	8005862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fd fa02 	bl	8002a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	; 0x24
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800564a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800565a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800565c:	f003 fd64 	bl	8009128 <HAL_RCC_GetPCLK1Freq>
 8005660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4a81      	ldr	r2, [pc, #516]	; (800586c <HAL_I2C_Init+0x274>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d807      	bhi.n	800567c <HAL_I2C_Init+0x84>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a80      	ldr	r2, [pc, #512]	; (8005870 <HAL_I2C_Init+0x278>)
 8005670:	4293      	cmp	r3, r2
 8005672:	bf94      	ite	ls
 8005674:	2301      	movls	r3, #1
 8005676:	2300      	movhi	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e006      	b.n	800568a <HAL_I2C_Init+0x92>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a7d      	ldr	r2, [pc, #500]	; (8005874 <HAL_I2C_Init+0x27c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	bf94      	ite	ls
 8005684:	2301      	movls	r3, #1
 8005686:	2300      	movhi	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0e7      	b.n	8005862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a78      	ldr	r2, [pc, #480]	; (8005878 <HAL_I2C_Init+0x280>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	0c9b      	lsrs	r3, r3, #18
 800569c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4a6a      	ldr	r2, [pc, #424]	; (800586c <HAL_I2C_Init+0x274>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d802      	bhi.n	80056cc <HAL_I2C_Init+0xd4>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3301      	adds	r3, #1
 80056ca:	e009      	b.n	80056e0 <HAL_I2C_Init+0xe8>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	4a69      	ldr	r2, [pc, #420]	; (800587c <HAL_I2C_Init+0x284>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	099b      	lsrs	r3, r3, #6
 80056de:	3301      	adds	r3, #1
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	495c      	ldr	r1, [pc, #368]	; (800586c <HAL_I2C_Init+0x274>)
 80056fc:	428b      	cmp	r3, r1
 80056fe:	d819      	bhi.n	8005734 <HAL_I2C_Init+0x13c>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	1e59      	subs	r1, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	fbb1 f3f3 	udiv	r3, r1, r3
 800570e:	1c59      	adds	r1, r3, #1
 8005710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005714:	400b      	ands	r3, r1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_I2C_Init+0x138>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1e59      	subs	r1, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	fbb1 f3f3 	udiv	r3, r1, r3
 8005728:	3301      	adds	r3, #1
 800572a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572e:	e051      	b.n	80057d4 <HAL_I2C_Init+0x1dc>
 8005730:	2304      	movs	r3, #4
 8005732:	e04f      	b.n	80057d4 <HAL_I2C_Init+0x1dc>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d111      	bne.n	8005760 <HAL_I2C_Init+0x168>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1e58      	subs	r0, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	440b      	add	r3, r1
 800574a:	fbb0 f3f3 	udiv	r3, r0, r3
 800574e:	3301      	adds	r3, #1
 8005750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e012      	b.n	8005786 <HAL_I2C_Init+0x18e>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1e58      	subs	r0, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	0099      	lsls	r1, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	fbb0 f3f3 	udiv	r3, r0, r3
 8005776:	3301      	adds	r3, #1
 8005778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Init+0x196>
 800578a:	2301      	movs	r3, #1
 800578c:	e022      	b.n	80057d4 <HAL_I2C_Init+0x1dc>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10e      	bne.n	80057b4 <HAL_I2C_Init+0x1bc>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1e58      	subs	r0, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6859      	ldr	r1, [r3, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	440b      	add	r3, r1
 80057a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80057a8:	3301      	adds	r3, #1
 80057aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b2:	e00f      	b.n	80057d4 <HAL_I2C_Init+0x1dc>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1e58      	subs	r0, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6859      	ldr	r1, [r3, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	0099      	lsls	r1, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ca:	3301      	adds	r3, #1
 80057cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	6809      	ldr	r1, [r1, #0]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6911      	ldr	r1, [r2, #16]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68d2      	ldr	r2, [r2, #12]
 800580e:	4311      	orrs	r1, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	430b      	orrs	r3, r1
 8005816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	000186a0 	.word	0x000186a0
 8005870:	001e847f 	.word	0x001e847f
 8005874:	003d08ff 	.word	0x003d08ff
 8005878:	431bde83 	.word	0x431bde83
 800587c:	10624dd3 	.word	0x10624dd3

08005880 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	461a      	mov	r2, r3
 800588c:	460b      	mov	r3, r1
 800588e:	817b      	strh	r3, [r7, #10]
 8005890:	4613      	mov	r3, r2
 8005892:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005894:	f7fd fb94 	bl	8002fc0 <HAL_GetTick>
 8005898:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	f040 80e0 	bne.w	8005a68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	2319      	movs	r3, #25
 80058ae:	2201      	movs	r2, #1
 80058b0:	4970      	ldr	r1, [pc, #448]	; (8005a74 <HAL_I2C_Master_Transmit+0x1f4>)
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f002 f8fe 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
 80058c0:	e0d3      	b.n	8005a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_I2C_Master_Transmit+0x50>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e0cc      	b.n	8005a6a <HAL_I2C_Master_Transmit+0x1ea>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d007      	beq.n	80058f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005904:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2221      	movs	r2, #33	; 0x21
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2210      	movs	r2, #16
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	893a      	ldrh	r2, [r7, #8]
 8005926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a50      	ldr	r2, [pc, #320]	; (8005a78 <HAL_I2C_Master_Transmit+0x1f8>)
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005938:	8979      	ldrh	r1, [r7, #10]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f001 fec0 	bl	80076c4 <I2C_MasterRequestWrite>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e08d      	b.n	8005a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005964:	e066      	b.n	8005a34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	6a39      	ldr	r1, [r7, #32]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f002 f978 	bl	8007c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00d      	beq.n	8005992 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2b04      	cmp	r3, #4
 800597c:	d107      	bne.n	800598e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e06b      	b.n	8005a6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	781a      	ldrb	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d11b      	bne.n	8005a08 <HAL_I2C_Master_Transmit+0x188>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d017      	beq.n	8005a08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	6a39      	ldr	r1, [r7, #32]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f002 f968 	bl	8007ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d107      	bne.n	8005a30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e01a      	b.n	8005a6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d194      	bne.n	8005966 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e000      	b.n	8005a6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	00100002 	.word	0x00100002
 8005a78:	ffff0000 	.word	0xffff0000

08005a7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08c      	sub	sp, #48	; 0x30
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	461a      	mov	r2, r3
 8005a88:	460b      	mov	r3, r1
 8005a8a:	817b      	strh	r3, [r7, #10]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a90:	f7fd fa96 	bl	8002fc0 <HAL_GetTick>
 8005a94:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	f040 820b 	bne.w	8005eba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2319      	movs	r3, #25
 8005aaa:	2201      	movs	r2, #1
 8005aac:	497c      	ldr	r1, [pc, #496]	; (8005ca0 <HAL_I2C_Master_Receive+0x224>)
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f002 f800 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005aba:	2302      	movs	r3, #2
 8005abc:	e1fe      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_I2C_Master_Receive+0x50>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e1f7      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d007      	beq.n	8005af2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0201 	orr.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2222      	movs	r2, #34	; 0x22
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2210      	movs	r2, #16
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	893a      	ldrh	r2, [r7, #8]
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a5c      	ldr	r2, [pc, #368]	; (8005ca4 <HAL_I2C_Master_Receive+0x228>)
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b34:	8979      	ldrh	r1, [r7, #10]
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 fe44 	bl	80077c8 <I2C_MasterRequestRead>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e1b8      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d113      	bne.n	8005b7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b52:	2300      	movs	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	623b      	str	r3, [r7, #32]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e18c      	b.n	8005e94 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d11b      	bne.n	8005bba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	e16c      	b.n	8005e94 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d11b      	bne.n	8005bfa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be2:	2300      	movs	r3, #0
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	e14c      	b.n	8005e94 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c20:	e138      	b.n	8005e94 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	f200 80f1 	bhi.w	8005e0e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d123      	bne.n	8005c7c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f002 f8c5 	bl	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e139      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c7a:	e10b      	b.n	8005e94 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d14e      	bne.n	8005d22 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4906      	ldr	r1, [pc, #24]	; (8005ca8 <HAL_I2C_Master_Receive+0x22c>)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f001 ff10 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e10e      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
 8005c9e:	bf00      	nop
 8005ca0:	00100002 	.word	0x00100002
 8005ca4:	ffff0000 	.word	0xffff0000
 8005ca8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d20:	e0b8      	b.n	8005e94 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4966      	ldr	r1, [pc, #408]	; (8005ec4 <HAL_I2C_Master_Receive+0x448>)
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f001 fec1 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0bf      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	2200      	movs	r2, #0
 8005d86:	494f      	ldr	r1, [pc, #316]	; (8005ec4 <HAL_I2C_Master_Receive+0x448>)
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f001 fe93 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e091      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e0c:	e042      	b.n	8005e94 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f001 ffd8 	bl	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e04c      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d118      	bne.n	8005e94 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f aec2 	bne.w	8005c22 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e000      	b.n	8005ebc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
  }
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3728      	adds	r7, #40	; 0x28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	00010004 	.word	0x00010004

08005ec8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005ed8:	f7fd f872 	bl	8002fc0 <HAL_GetTick>
 8005edc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	f040 8111 	bne.w	8006112 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2319      	movs	r3, #25
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4988      	ldr	r1, [pc, #544]	; (800611c <HAL_I2C_IsDeviceReady+0x254>)
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f001 fdda 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
 8005f08:	e104      	b.n	8006114 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_I2C_IsDeviceReady+0x50>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e0fd      	b.n	8006114 <HAL_I2C_IsDeviceReady+0x24c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d007      	beq.n	8005f3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0201 	orr.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2224      	movs	r2, #36	; 0x24
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a70      	ldr	r2, [pc, #448]	; (8006120 <HAL_I2C_IsDeviceReady+0x258>)
 8005f60:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f001 fd98 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00d      	beq.n	8005fa6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f98:	d103      	bne.n	8005fa2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e0b6      	b.n	8006114 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fa6:	897b      	ldrh	r3, [r7, #10]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fb4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd f803 	bl	8002fc0 <HAL_GetTick>
 8005fba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	bf0c      	ite	eq
 8005fca:	2301      	moveq	r3, #1
 8005fcc:	2300      	movne	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe0:	bf0c      	ite	eq
 8005fe2:	2301      	moveq	r3, #1
 8005fe4:	2300      	movne	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005fea:	e025      	b.n	8006038 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fec:	f7fc ffe8 	bl	8002fc0 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <HAL_I2C_IsDeviceReady+0x13a>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	22a0      	movs	r2, #160	; 0xa0
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b02      	cmp	r3, #2
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602e:	bf0c      	ite	eq
 8006030:	2301      	moveq	r3, #1
 8006032:	2300      	movne	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2ba0      	cmp	r3, #160	; 0xa0
 8006042:	d005      	beq.n	8006050 <HAL_I2C_IsDeviceReady+0x188>
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <HAL_I2C_IsDeviceReady+0x188>
 800604a:	7dbb      	ldrb	r3, [r7, #22]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0cd      	beq.n	8005fec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b02      	cmp	r3, #2
 8006064:	d129      	bne.n	80060ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006074:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006076:	2300      	movs	r3, #0
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	2319      	movs	r3, #25
 8006092:	2201      	movs	r2, #1
 8006094:	4921      	ldr	r1, [pc, #132]	; (800611c <HAL_I2C_IsDeviceReady+0x254>)
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f001 fd0c 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e036      	b.n	8006114 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e02c      	b.n	8006114 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2319      	movs	r3, #25
 80060da:	2201      	movs	r2, #1
 80060dc:	490f      	ldr	r1, [pc, #60]	; (800611c <HAL_I2C_IsDeviceReady+0x254>)
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f001 fce8 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e012      	b.n	8006114 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	f4ff af32 	bcc.w	8005f62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006112:	2302      	movs	r3, #2
  }
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	00100002 	.word	0x00100002
 8006120:	ffff0000 	.word	0xffff0000

08006124 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006144:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	2b10      	cmp	r3, #16
 8006152:	d003      	beq.n	800615c <HAL_I2C_EV_IRQHandler+0x38>
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	f040 80c1 	bne.w	80062de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10d      	bne.n	8006192 <HAL_I2C_EV_IRQHandler+0x6e>
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800617c:	d003      	beq.n	8006186 <HAL_I2C_EV_IRQHandler+0x62>
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006184:	d101      	bne.n	800618a <HAL_I2C_EV_IRQHandler+0x66>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <HAL_I2C_EV_IRQHandler+0x68>
 800618a:	2300      	movs	r3, #0
 800618c:	2b01      	cmp	r3, #1
 800618e:	f000 8132 	beq.w	80063f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00c      	beq.n	80061b6 <HAL_I2C_EV_IRQHandler+0x92>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	0a5b      	lsrs	r3, r3, #9
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d006      	beq.n	80061b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fe92 	bl	8007ed2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fcdc 	bl	8006b6c <I2C_Master_SB>
 80061b4:	e092      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	08db      	lsrs	r3, r3, #3
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	0a5b      	lsrs	r3, r3, #9
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fd52 	bl	8006c78 <I2C_Master_ADD10>
 80061d4:	e082      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	0a5b      	lsrs	r3, r3, #9
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fd6c 	bl	8006ccc <I2C_Master_ADDR>
 80061f4:	e072      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	089b      	lsrs	r3, r3, #2
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d03b      	beq.n	800627a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006210:	f000 80f3 	beq.w	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	09db      	lsrs	r3, r3, #7
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <HAL_I2C_EV_IRQHandler+0x11c>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	0a9b      	lsrs	r3, r3, #10
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <HAL_I2C_EV_IRQHandler+0x11c>
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	089b      	lsrs	r3, r3, #2
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f94c 	bl	80064d6 <I2C_MasterTransmit_TXE>
 800623e:	e04d      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	089b      	lsrs	r3, r3, #2
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80d6 	beq.w	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	0a5b      	lsrs	r3, r3, #9
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80cf 	beq.w	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	2b21      	cmp	r3, #33	; 0x21
 8006260:	d103      	bne.n	800626a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f9d3 	bl	800660e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006268:	e0c7      	b.n	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	f040 80c4 	bne.w	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fa41 	bl	80066fa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006278:	e0bf      	b.n	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006288:	f000 80b7 	beq.w	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	099b      	lsrs	r3, r3, #6
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00f      	beq.n	80062b8 <HAL_I2C_EV_IRQHandler+0x194>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	0a9b      	lsrs	r3, r3, #10
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <HAL_I2C_EV_IRQHandler+0x194>
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	089b      	lsrs	r3, r3, #2
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fab6 	bl	8006822 <I2C_MasterReceive_RXNE>
 80062b6:	e011      	b.n	80062dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 809a 	beq.w	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	0a5b      	lsrs	r3, r3, #9
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8093 	beq.w	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fb5f 	bl	8006998 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062da:	e08e      	b.n	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80062dc:	e08d      	b.n	80063fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	e007      	b.n	8006300 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d012      	beq.n	8006332 <HAL_I2C_EV_IRQHandler+0x20e>
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	0a5b      	lsrs	r3, r3, #9
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00c      	beq.n	8006332 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 ff1d 	bl	800716a <I2C_Slave_ADDR>
 8006330:	e066      	b.n	8006400 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_I2C_EV_IRQHandler+0x22e>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	0a5b      	lsrs	r3, r3, #9
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 ff58 	bl	8007200 <I2C_Slave_STOPF>
 8006350:	e056      	b.n	8006400 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b21      	cmp	r3, #33	; 0x21
 8006356:	d002      	beq.n	800635e <HAL_I2C_EV_IRQHandler+0x23a>
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b29      	cmp	r3, #41	; 0x29
 800635c:	d125      	bne.n	80063aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	09db      	lsrs	r3, r3, #7
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00f      	beq.n	800638a <HAL_I2C_EV_IRQHandler+0x266>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	0a9b      	lsrs	r3, r3, #10
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <HAL_I2C_EV_IRQHandler+0x266>
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d103      	bne.n	800638a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fe33 	bl	8006fee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006388:	e039      	b.n	80063fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	089b      	lsrs	r3, r3, #2
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d033      	beq.n	80063fe <HAL_I2C_EV_IRQHandler+0x2da>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	0a5b      	lsrs	r3, r3, #9
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d02d      	beq.n	80063fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fe60 	bl	8007068 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063a8:	e029      	b.n	80063fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	099b      	lsrs	r3, r3, #6
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00f      	beq.n	80063d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	0a9b      	lsrs	r3, r3, #10
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fe6b 	bl	80070aa <I2C_SlaveReceive_RXNE>
 80063d4:	e014      	b.n	8006400 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00e      	beq.n	8006400 <HAL_I2C_EV_IRQHandler+0x2dc>
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	0a5b      	lsrs	r3, r3, #9
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fe99 	bl	8007126 <I2C_SlaveReceive_BTF>
 80063f4:	e004      	b.n	8006400 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80063f6:	bf00      	nop
 80063f8:	e002      	b.n	8006400 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006400:	3720      	adds	r7, #32
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	460b      	mov	r3, r1
 8006460:	70fb      	strb	r3, [r7, #3]
 8006462:	4613      	mov	r3, r2
 8006464:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ec:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d150      	bne.n	800659e <I2C_MasterTransmit_TXE+0xc8>
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b21      	cmp	r3, #33	; 0x21
 8006500:	d14d      	bne.n	800659e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d01d      	beq.n	8006544 <I2C_MasterTransmit_TXE+0x6e>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b20      	cmp	r3, #32
 800650c:	d01a      	beq.n	8006544 <I2C_MasterTransmit_TXE+0x6e>
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006514:	d016      	beq.n	8006544 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006524:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2211      	movs	r2, #17
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff ff62 	bl	8006406 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006542:	e060      	b.n	8006606 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006552:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006562:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d107      	bne.n	800658e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff ff7d 	bl	8006486 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800658c:	e03b      	b.n	8006606 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7ff ff35 	bl	8006406 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800659c:	e033      	b.n	8006606 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b21      	cmp	r3, #33	; 0x21
 80065a2:	d005      	beq.n	80065b0 <I2C_MasterTransmit_TXE+0xda>
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d12d      	bne.n	8006606 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b22      	cmp	r3, #34	; 0x22
 80065ae:	d12a      	bne.n	8006606 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d108      	bne.n	80065cc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80065ca:	e01c      	b.n	8006606 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d103      	bne.n	80065e0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f88e 	bl	80066fa <I2C_MemoryTransmit_TXE_BTF>
}
 80065de:	e012      	b.n	8006606 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006604:	e7ff      	b.n	8006606 <I2C_MasterTransmit_TXE+0x130>
 8006606:	bf00      	nop
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b21      	cmp	r3, #33	; 0x21
 8006626:	d164      	bne.n	80066f2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d012      	beq.n	8006658 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006656:	e04c      	b.n	80066f2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b08      	cmp	r3, #8
 800665c:	d01d      	beq.n	800669a <I2C_MasterTransmit_BTF+0x8c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b20      	cmp	r3, #32
 8006662:	d01a      	beq.n	800669a <I2C_MasterTransmit_BTF+0x8c>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800666a:	d016      	beq.n	800669a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800667a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2211      	movs	r2, #17
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff feb7 	bl	8006406 <HAL_I2C_MasterTxCpltCallback>
}
 8006698:	e02b      	b.n	80066f2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066a8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d107      	bne.n	80066e4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff fed2 	bl	8006486 <HAL_I2C_MemTxCpltCallback>
}
 80066e2:	e006      	b.n	80066f2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff fe8a 	bl	8006406 <HAL_I2C_MasterTxCpltCallback>
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006708:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670e:	2b00      	cmp	r3, #0
 8006710:	d11d      	bne.n	800674e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d10b      	bne.n	8006732 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671e:	b2da      	uxtb	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006730:	e073      	b.n	800681a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006736:	b29b      	uxth	r3, r3
 8006738:	121b      	asrs	r3, r3, #8
 800673a:	b2da      	uxtb	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800674c:	e065      	b.n	800681a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	2b01      	cmp	r3, #1
 8006754:	d10b      	bne.n	800676e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675a:	b2da      	uxtb	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800676c:	e055      	b.n	800681a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006772:	2b02      	cmp	r3, #2
 8006774:	d151      	bne.n	800681a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	2b22      	cmp	r3, #34	; 0x22
 800677a:	d10d      	bne.n	8006798 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800678a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006796:	e040      	b.n	800681a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d015      	beq.n	80067ce <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b21      	cmp	r3, #33	; 0x21
 80067a6:	d112      	bne.n	80067ce <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067cc:	e025      	b.n	800681a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d120      	bne.n	800681a <I2C_MemoryTransmit_TXE_BTF+0x120>
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b21      	cmp	r3, #33	; 0x21
 80067dc:	d11d      	bne.n	800681a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067ec:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067fc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff fe36 	bl	8006486 <HAL_I2C_MemTxCpltCallback>
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b22      	cmp	r3, #34	; 0x22
 8006834:	f040 80ac 	bne.w	8006990 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b03      	cmp	r3, #3
 8006844:	d921      	bls.n	800688a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b03      	cmp	r3, #3
 8006874:	f040 808c 	bne.w	8006990 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006886:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006888:	e082      	b.n	8006990 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	2b02      	cmp	r3, #2
 8006890:	d075      	beq.n	800697e <I2C_MasterReceive_RXNE+0x15c>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d002      	beq.n	800689e <I2C_MasterReceive_RXNE+0x7c>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d16f      	bne.n	800697e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fa60 	bl	8007d64 <I2C_WaitOnSTOPRequestThroughIT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d142      	bne.n	8006930 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d10a      	bne.n	800691a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff fdc1 	bl	800649a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006918:	e03a      	b.n	8006990 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2212      	movs	r2, #18
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fd76 	bl	800641a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800692e:	e02f      	b.n	8006990 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800693e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fd99 	bl	80064ae <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800697c:	e008      	b.n	8006990 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698c:	605a      	str	r2, [r3, #4]
}
 800698e:	e7ff      	b.n	8006990 <I2C_MasterReceive_RXNE+0x16e>
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d11b      	bne.n	80069e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80069e6:	e0bd      	b.n	8006b64 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d129      	bne.n	8006a46 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a00:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d00a      	beq.n	8006a1e <I2C_MasterReceive_BTF+0x86>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d007      	beq.n	8006a1e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a44:	e08e      	b.n	8006b64 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d176      	bne.n	8006b3e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d002      	beq.n	8006a5c <I2C_MasterReceive_BTF+0xc4>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b10      	cmp	r3, #16
 8006a5a:	d108      	bne.n	8006a6e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e019      	b.n	8006aa2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d002      	beq.n	8006a7a <I2C_MasterReceive_BTF+0xe2>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d108      	bne.n	8006a8c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e00a      	b.n	8006aa2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d007      	beq.n	8006aa2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006afc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d10a      	bne.n	8006b28 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fcba 	bl	800649a <HAL_I2C_MemRxCpltCallback>
}
 8006b26:	e01d      	b.n	8006b64 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2212      	movs	r2, #18
 8006b34:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fc6f 	bl	800641a <HAL_I2C_MasterRxCpltCallback>
}
 8006b3c:	e012      	b.n	8006b64 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d117      	bne.n	8006bb0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b98:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b9a:	e067      	b.n	8006c6c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	611a      	str	r2, [r3, #16]
}
 8006bae:	e05d      	b.n	8006c6c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bb8:	d133      	bne.n	8006c22 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b21      	cmp	r3, #33	; 0x21
 8006bc4:	d109      	bne.n	8006bda <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bd6:	611a      	str	r2, [r3, #16]
 8006bd8:	e008      	b.n	8006bec <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <I2C_Master_SB+0x92>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d108      	bne.n	8006c10 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d032      	beq.n	8006c6c <I2C_Master_SB+0x100>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d02d      	beq.n	8006c6c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c1e:	605a      	str	r2, [r3, #4]
}
 8006c20:	e024      	b.n	8006c6c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10e      	bne.n	8006c48 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	11db      	asrs	r3, r3, #7
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0306 	and.w	r3, r3, #6
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f063 030f 	orn	r3, r3, #15
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	611a      	str	r2, [r3, #16]
}
 8006c46:	e011      	b.n	8006c6c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d10d      	bne.n	8006c6c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	11db      	asrs	r3, r3, #7
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f003 0306 	and.w	r3, r3, #6
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	f063 030e 	orn	r3, r3, #14
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	611a      	str	r2, [r3, #16]
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <I2C_Master_ADD10+0x26>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d108      	bne.n	8006cb0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00c      	beq.n	8006cc0 <I2C_Master_ADD10+0x48>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cbe:	605a      	str	r2, [r3, #4]
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b091      	sub	sp, #68	; 0x44
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b22      	cmp	r3, #34	; 0x22
 8006cf4:	f040 8169 	bne.w	8006fca <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10f      	bne.n	8006d20 <I2C_Master_ADDR+0x54>
 8006d00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d10b      	bne.n	8006d20 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	633b      	str	r3, [r7, #48]	; 0x30
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	e160      	b.n	8006fe2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11d      	bne.n	8006d64 <I2C_Master_ADDR+0x98>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d30:	d118      	bne.n	8006d64 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d32:	2300      	movs	r3, #0
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d56:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	651a      	str	r2, [r3, #80]	; 0x50
 8006d62:	e13e      	b.n	8006fe2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d113      	bne.n	8006d96 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e115      	b.n	8006fc2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	f040 808a 	bne.w	8006eb6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006da8:	d137      	bne.n	8006e1a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc8:	d113      	bne.n	8006df2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	e0e7      	b.n	8006fc2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df2:	2300      	movs	r3, #0
 8006df4:	623b      	str	r3, [r7, #32]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	623b      	str	r3, [r7, #32]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	623b      	str	r3, [r7, #32]
 8006e06:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e0d3      	b.n	8006fc2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d02e      	beq.n	8006e7e <I2C_Master_ADDR+0x1b2>
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d02b      	beq.n	8006e7e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e28:	2b12      	cmp	r3, #18
 8006e2a:	d102      	bne.n	8006e32 <I2C_Master_ADDR+0x166>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d125      	bne.n	8006e7e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d00e      	beq.n	8006e56 <I2C_Master_ADDR+0x18a>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d00b      	beq.n	8006e56 <I2C_Master_ADDR+0x18a>
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d008      	beq.n	8006e56 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e007      	b.n	8006e66 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e64:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	e0a1      	b.n	8006fc2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e085      	b.n	8006fc2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d14d      	bne.n	8006f5c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d016      	beq.n	8006ef4 <I2C_Master_ADDR+0x228>
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d013      	beq.n	8006ef4 <I2C_Master_ADDR+0x228>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d010      	beq.n	8006ef4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	e007      	b.n	8006f04 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f02:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f12:	d117      	bne.n	8006f44 <I2C_Master_ADDR+0x278>
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f1a:	d00b      	beq.n	8006f34 <I2C_Master_ADDR+0x268>
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d008      	beq.n	8006f34 <I2C_Master_ADDR+0x268>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d005      	beq.n	8006f34 <I2C_Master_ADDR+0x268>
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	2b10      	cmp	r3, #16
 8006f2c:	d002      	beq.n	8006f34 <I2C_Master_ADDR+0x268>
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d107      	bne.n	8006f44 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f42:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	e032      	b.n	8006fc2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f6a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f7a:	d117      	bne.n	8006fac <I2C_Master_ADDR+0x2e0>
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f82:	d00b      	beq.n	8006f9c <I2C_Master_ADDR+0x2d0>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d008      	beq.n	8006f9c <I2C_Master_ADDR+0x2d0>
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d005      	beq.n	8006f9c <I2C_Master_ADDR+0x2d0>
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	2b10      	cmp	r3, #16
 8006f94:	d002      	beq.n	8006f9c <I2C_Master_ADDR+0x2d0>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d107      	bne.n	8006fac <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006faa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006fc8:	e00b      	b.n	8006fe2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
}
 8006fe0:	e7ff      	b.n	8006fe2 <I2C_Master_ADDR+0x316>
 8006fe2:	bf00      	nop
 8006fe4:	3744      	adds	r7, #68	; 0x44
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d02b      	beq.n	8007060 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d114      	bne.n	8007060 <I2C_SlaveTransmit_TXE+0x72>
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	2b29      	cmp	r3, #41	; 0x29
 800703a:	d111      	bne.n	8007060 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800704a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2221      	movs	r2, #33	; 0x21
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2228      	movs	r2, #40	; 0x28
 8007056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff f9e7 	bl	800642e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d011      	beq.n	800709e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d02c      	beq.n	800711e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d114      	bne.n	800711e <I2C_SlaveReceive_RXNE+0x74>
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b2a      	cmp	r3, #42	; 0x2a
 80070f8:	d111      	bne.n	800711e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007108:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2222      	movs	r2, #34	; 0x22
 800710e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2228      	movs	r2, #40	; 0x28
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff f992 	bl	8006442 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d012      	beq.n	800715e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007184:	2b28      	cmp	r3, #40	; 0x28
 8007186:	d127      	bne.n	80071d8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007196:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80071a4:	2301      	movs	r3, #1
 80071a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	09db      	lsrs	r3, r3, #7
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	81bb      	strh	r3, [r7, #12]
 80071ba:	e002      	b.n	80071c2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80071ca:	89ba      	ldrh	r2, [r7, #12]
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff f940 	bl	8006456 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80071d6:	e00e      	b.n	80071f6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071d8:	2300      	movs	r3, #0
 80071da:	60bb      	str	r3, [r7, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	60bb      	str	r3, [r7, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800721e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007220:	2300      	movs	r3, #0
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800725c:	d172      	bne.n	8007344 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	2b22      	cmp	r3, #34	; 0x22
 8007262:	d002      	beq.n	800726a <I2C_Slave_STOPF+0x6a>
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b2a      	cmp	r3, #42	; 0x2a
 8007268:	d135      	bne.n	80072d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	b29a      	uxth	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f043 0204 	orr.w	r2, r3, #4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800729c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fc fbc0 	bl	8003a28 <HAL_DMA_GetState>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d049      	beq.n	8007342 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	4a69      	ldr	r2, [pc, #420]	; (8007458 <I2C_Slave_STOPF+0x258>)
 80072b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fc fb92 	bl	80039e4 <HAL_DMA_Abort_IT>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d03d      	beq.n	8007342 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072d4:	e035      	b.n	8007342 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f043 0204 	orr.w	r2, r3, #4
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007308:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730e:	4618      	mov	r0, r3
 8007310:	f7fc fb8a 	bl	8003a28 <HAL_DMA_GetState>
 8007314:	4603      	mov	r3, r0
 8007316:	2b01      	cmp	r3, #1
 8007318:	d014      	beq.n	8007344 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731e:	4a4e      	ldr	r2, [pc, #312]	; (8007458 <I2C_Slave_STOPF+0x258>)
 8007320:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007326:	4618      	mov	r0, r3
 8007328:	f7fc fb5c 	bl	80039e4 <HAL_DMA_Abort_IT>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	e000      	b.n	8007344 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007342:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d03e      	beq.n	80073cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b04      	cmp	r3, #4
 800735a:	d112      	bne.n	8007382 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d112      	bne.n	80073b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691a      	ldr	r2, [r3, #16]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	f043 0204 	orr.w	r2, r3, #4
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f843 	bl	8007460 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80073da:	e039      	b.n	8007450 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	2b2a      	cmp	r3, #42	; 0x2a
 80073e0:	d109      	bne.n	80073f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2228      	movs	r2, #40	; 0x28
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff f826 	bl	8006442 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b28      	cmp	r3, #40	; 0x28
 8007400:	d111      	bne.n	8007426 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a15      	ldr	r2, [pc, #84]	; (800745c <I2C_Slave_STOPF+0x25c>)
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff f827 	bl	8006472 <HAL_I2C_ListenCpltCallback>
}
 8007424:	e014      	b.n	8007450 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	2b22      	cmp	r3, #34	; 0x22
 800742c:	d002      	beq.n	8007434 <I2C_Slave_STOPF+0x234>
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	2b22      	cmp	r3, #34	; 0x22
 8007432:	d10d      	bne.n	8007450 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fe fff9 	bl	8006442 <HAL_I2C_SlaveRxCpltCallback>
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08007965 	.word	0x08007965
 800745c:	ffff0000 	.word	0xffff0000

08007460 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800746e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007476:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b10      	cmp	r3, #16
 800747c:	d002      	beq.n	8007484 <I2C_ITError+0x24>
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	d10a      	bne.n	800749a <I2C_ITError+0x3a>
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b22      	cmp	r3, #34	; 0x22
 8007488:	d107      	bne.n	800749a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007498:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074a0:	2b28      	cmp	r3, #40	; 0x28
 80074a2:	d107      	bne.n	80074b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2228      	movs	r2, #40	; 0x28
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074b2:	e015      	b.n	80074e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c2:	d00a      	beq.n	80074da <I2C_ITError+0x7a>
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b60      	cmp	r3, #96	; 0x60
 80074c8:	d007      	beq.n	80074da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ee:	d162      	bne.n	80075b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b01      	cmp	r3, #1
 800750c:	d020      	beq.n	8007550 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	4a6a      	ldr	r2, [pc, #424]	; (80076bc <I2C_ITError+0x25c>)
 8007514:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	4618      	mov	r0, r3
 800751c:	f7fc fa62 	bl	80039e4 <HAL_DMA_Abort_IT>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8089 	beq.w	800763a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0201 	bic.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800754a:	4610      	mov	r0, r2
 800754c:	4798      	blx	r3
 800754e:	e074      	b.n	800763a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	4a59      	ldr	r2, [pc, #356]	; (80076bc <I2C_ITError+0x25c>)
 8007556:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	4618      	mov	r0, r3
 800755e:	f7fc fa41 	bl	80039e4 <HAL_DMA_Abort_IT>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d068      	beq.n	800763a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d10b      	bne.n	800758e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0201 	bic.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	e041      	b.n	800763a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b60      	cmp	r3, #96	; 0x60
 80075c0:	d125      	bne.n	800760e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d10b      	bne.n	80075f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fe ff5b 	bl	80064c2 <HAL_I2C_AbortCpltCallback>
 800760c:	e015      	b.n	800763a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d10b      	bne.n	8007634 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fe ff3a 	bl	80064ae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10e      	bne.n	8007668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007664:	2b00      	cmp	r3, #0
 8007666:	d007      	beq.n	8007678 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007676:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b04      	cmp	r3, #4
 800768a:	d113      	bne.n	80076b4 <I2C_ITError+0x254>
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	2b28      	cmp	r3, #40	; 0x28
 8007690:	d110      	bne.n	80076b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <I2C_ITError+0x260>)
 8007696:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fe fedf 	bl	8006472 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	08007965 	.word	0x08007965
 80076c0:	ffff0000 	.word	0xffff0000

080076c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	460b      	mov	r3, r1
 80076d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d006      	beq.n	80076ee <I2C_MasterRequestWrite+0x2a>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d003      	beq.n	80076ee <I2C_MasterRequestWrite+0x2a>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076ec:	d108      	bne.n	8007700 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e00b      	b.n	8007718 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007704:	2b12      	cmp	r3, #18
 8007706:	d107      	bne.n	8007718 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f9c5 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00d      	beq.n	800774c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773e:	d103      	bne.n	8007748 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e035      	b.n	80077b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007754:	d108      	bne.n	8007768 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007756:	897b      	ldrh	r3, [r7, #10]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	461a      	mov	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007764:	611a      	str	r2, [r3, #16]
 8007766:	e01b      	b.n	80077a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007768:	897b      	ldrh	r3, [r7, #10]
 800776a:	11db      	asrs	r3, r3, #7
 800776c:	b2db      	uxtb	r3, r3
 800776e:	f003 0306 	and.w	r3, r3, #6
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f063 030f 	orn	r3, r3, #15
 8007778:	b2da      	uxtb	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	490e      	ldr	r1, [pc, #56]	; (80077c0 <I2C_MasterRequestWrite+0xfc>)
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f9eb 	bl	8007b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e010      	b.n	80077b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007796:	897b      	ldrh	r3, [r7, #10]
 8007798:	b2da      	uxtb	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4907      	ldr	r1, [pc, #28]	; (80077c4 <I2C_MasterRequestWrite+0x100>)
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f9db 	bl	8007b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	00010008 	.word	0x00010008
 80077c4:	00010002 	.word	0x00010002

080077c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	607a      	str	r2, [r7, #4]
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	460b      	mov	r3, r1
 80077d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	d006      	beq.n	8007802 <I2C_MasterRequestRead+0x3a>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d003      	beq.n	8007802 <I2C_MasterRequestRead+0x3a>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007800:	d108      	bne.n	8007814 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e00b      	b.n	800782c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	2b11      	cmp	r3, #17
 800781a:	d107      	bne.n	800782c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 f93b 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00d      	beq.n	8007860 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007852:	d103      	bne.n	800785c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e079      	b.n	8007954 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007868:	d108      	bne.n	800787c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800786a:	897b      	ldrh	r3, [r7, #10]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	b2da      	uxtb	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	611a      	str	r2, [r3, #16]
 800787a:	e05f      	b.n	800793c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800787c:	897b      	ldrh	r3, [r7, #10]
 800787e:	11db      	asrs	r3, r3, #7
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f003 0306 	and.w	r3, r3, #6
 8007886:	b2db      	uxtb	r3, r3
 8007888:	f063 030f 	orn	r3, r3, #15
 800788c:	b2da      	uxtb	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	4930      	ldr	r1, [pc, #192]	; (800795c <I2C_MasterRequestRead+0x194>)
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 f961 	bl	8007b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e054      	b.n	8007954 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4929      	ldr	r1, [pc, #164]	; (8007960 <I2C_MasterRequestRead+0x198>)
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f951 	bl	8007b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e044      	b.n	8007954 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ca:	2300      	movs	r3, #0
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f8d9 	bl	8007ab4 <I2C_WaitOnFlagUntilTimeout>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00d      	beq.n	8007924 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007916:	d103      	bne.n	8007920 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800791e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e017      	b.n	8007954 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007924:	897b      	ldrh	r3, [r7, #10]
 8007926:	11db      	asrs	r3, r3, #7
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 0306 	and.w	r3, r3, #6
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f063 030e 	orn	r3, r3, #14
 8007934:	b2da      	uxtb	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4907      	ldr	r1, [pc, #28]	; (8007960 <I2C_MasterRequestRead+0x198>)
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f90d 	bl	8007b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	00010008 	.word	0x00010008
 8007960:	00010002 	.word	0x00010002

08007964 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800797e:	4b4b      	ldr	r3, [pc, #300]	; (8007aac <I2C_DMAAbort+0x148>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	08db      	lsrs	r3, r3, #3
 8007984:	4a4a      	ldr	r2, [pc, #296]	; (8007ab0 <I2C_DMAAbort+0x14c>)
 8007986:	fba2 2303 	umull	r2, r3, r2, r3
 800798a:	0a1a      	lsrs	r2, r3, #8
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	00da      	lsls	r2, r3, #3
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f043 0220 	orr.w	r2, r3, #32
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80079aa:	e00a      	b.n	80079c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c0:	d0ea      	beq.n	8007998 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ce:	2200      	movs	r2, #0
 80079d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	2200      	movs	r2, #0
 80079e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2200      	movs	r2, #0
 80079f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a04:	2200      	movs	r2, #0
 8007a06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	2200      	movs	r2, #0
 8007a16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0201 	bic.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b60      	cmp	r3, #96	; 0x60
 8007a32:	d10e      	bne.n	8007a52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2200      	movs	r2, #0
 8007a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a4a:	6978      	ldr	r0, [r7, #20]
 8007a4c:	f7fe fd39 	bl	80064c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007a50:	e027      	b.n	8007aa2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a52:	7cfb      	ldrb	r3, [r7, #19]
 8007a54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a58:	2b28      	cmp	r3, #40	; 0x28
 8007a5a:	d117      	bne.n	8007a8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0201 	orr.w	r2, r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2228      	movs	r2, #40	; 0x28
 8007a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a8a:	e007      	b.n	8007a9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007a9c:	6978      	ldr	r0, [r7, #20]
 8007a9e:	f7fe fd06 	bl	80064ae <HAL_I2C_ErrorCallback>
}
 8007aa2:	bf00      	nop
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	2000001c 	.word	0x2000001c
 8007ab0:	14f8b589 	.word	0x14f8b589

08007ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ac4:	e025      	b.n	8007b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d021      	beq.n	8007b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ace:	f7fb fa77 	bl	8002fc0 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d302      	bcc.n	8007ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d116      	bne.n	8007b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f043 0220 	orr.w	r2, r3, #32
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e023      	b.n	8007b5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d10d      	bne.n	8007b38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	43da      	mvns	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4013      	ands	r3, r2
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf0c      	ite	eq
 8007b2e:	2301      	moveq	r3, #1
 8007b30:	2300      	movne	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	e00c      	b.n	8007b52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	43da      	mvns	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4013      	ands	r3, r2
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bf0c      	ite	eq
 8007b4a:	2301      	moveq	r3, #1
 8007b4c:	2300      	movne	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d0b6      	beq.n	8007ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b70:	e051      	b.n	8007c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b80:	d123      	bne.n	8007bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f043 0204 	orr.w	r2, r3, #4
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e046      	b.n	8007c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd0:	d021      	beq.n	8007c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd2:	f7fb f9f5 	bl	8002fc0 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d302      	bcc.n	8007be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d116      	bne.n	8007c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f043 0220 	orr.w	r2, r3, #32
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e020      	b.n	8007c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	0c1b      	lsrs	r3, r3, #16
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d10c      	bne.n	8007c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	43da      	mvns	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bf14      	ite	ne
 8007c32:	2301      	movne	r3, #1
 8007c34:	2300      	moveq	r3, #0
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	e00b      	b.n	8007c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	43da      	mvns	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4013      	ands	r3, r2
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bf14      	ite	ne
 8007c4c:	2301      	movne	r3, #1
 8007c4e:	2300      	moveq	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d18d      	bne.n	8007b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c6c:	e02d      	b.n	8007cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 f900 	bl	8007e74 <I2C_IsAcknowledgeFailed>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e02d      	b.n	8007cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d021      	beq.n	8007cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c86:	f7fb f99b 	bl	8002fc0 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d302      	bcc.n	8007c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d116      	bne.n	8007cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	f043 0220 	orr.w	r2, r3, #32
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e007      	b.n	8007cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd4:	2b80      	cmp	r3, #128	; 0x80
 8007cd6:	d1ca      	bne.n	8007c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cee:	e02d      	b.n	8007d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f8bf 	bl	8007e74 <I2C_IsAcknowledgeFailed>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e02d      	b.n	8007d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d021      	beq.n	8007d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d08:	f7fb f95a 	bl	8002fc0 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d302      	bcc.n	8007d1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d116      	bne.n	8007d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	f043 0220 	orr.w	r2, r3, #32
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e007      	b.n	8007d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	f003 0304 	and.w	r3, r3, #4
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d1ca      	bne.n	8007cf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007d70:	4b13      	ldr	r3, [pc, #76]	; (8007dc0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	08db      	lsrs	r3, r3, #3
 8007d76:	4a13      	ldr	r2, [pc, #76]	; (8007dc4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007d78:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7c:	0a1a      	lsrs	r2, r3, #8
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d107      	bne.n	8007da2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d96:	f043 0220 	orr.w	r2, r3, #32
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e008      	b.n	8007db4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db0:	d0e9      	beq.n	8007d86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	2000001c 	.word	0x2000001c
 8007dc4:	14f8b589 	.word	0x14f8b589

08007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dd4:	e042      	b.n	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b10      	cmp	r3, #16
 8007de2:	d119      	bne.n	8007e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0210 	mvn.w	r2, #16
 8007dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e029      	b.n	8007e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e18:	f7fb f8d2 	bl	8002fc0 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d302      	bcc.n	8007e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d116      	bne.n	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	f043 0220 	orr.w	r2, r3, #32
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e007      	b.n	8007e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d1b5      	bne.n	8007dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e8a:	d11b      	bne.n	8007ec4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	f043 0204 	orr.w	r2, r3, #4
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007ee2:	d103      	bne.n	8007eec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007eea:	e007      	b.n	8007efc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007ef4:	d102      	bne.n	8007efc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e128      	b.n	800816c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a90      	ldr	r2, [pc, #576]	; (8008174 <HAL_I2S_Init+0x26c>)
 8007f32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fa fe1f 	bl	8002b78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6812      	ldr	r2, [r2, #0]
 8007f4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007f50:	f023 030f 	bic.w	r3, r3, #15
 8007f54:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d060      	beq.n	8008028 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007f6e:	2310      	movs	r3, #16
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	e001      	b.n	8007f78 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007f74:	2320      	movs	r3, #32
 8007f76:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d802      	bhi.n	8007f86 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	005b      	lsls	r3, r3, #1
 8007f84:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007f86:	2001      	movs	r0, #1
 8007f88:	f001 f9f6 	bl	8009378 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f8c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f96:	d125      	bne.n	8007fe4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d010      	beq.n	8007fc2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbc:	3305      	adds	r3, #5
 8007fbe:	613b      	str	r3, [r7, #16]
 8007fc0:	e01f      	b.n	8008002 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fde:	3305      	adds	r3, #5
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	e00e      	b.n	8008002 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffe:	3305      	adds	r3, #5
 8008000:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	4a5c      	ldr	r2, [pc, #368]	; (8008178 <HAL_I2S_Init+0x270>)
 8008006:	fba2 2303 	umull	r2, r3, r2, r3
 800800a:	08db      	lsrs	r3, r3, #3
 800800c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	085b      	lsrs	r3, r3, #1
 800801e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	e003      	b.n	8008030 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008028:	2302      	movs	r3, #2
 800802a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d902      	bls.n	800803c <HAL_I2S_Init+0x134>
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	2bff      	cmp	r3, #255	; 0xff
 800803a:	d907      	bls.n	800804c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008040:	f043 0210 	orr.w	r2, r3, #16
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e08f      	b.n	800816c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	ea42 0103 	orr.w	r1, r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	430a      	orrs	r2, r1
 800805e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800806a:	f023 030f 	bic.w	r3, r3, #15
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6851      	ldr	r1, [r2, #4]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6892      	ldr	r2, [r2, #8]
 8008076:	4311      	orrs	r1, r2
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68d2      	ldr	r2, [r2, #12]
 800807c:	4311      	orrs	r1, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6992      	ldr	r2, [r2, #24]
 8008082:	430a      	orrs	r2, r1
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800808e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d161      	bne.n	800815c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a38      	ldr	r2, [pc, #224]	; (800817c <HAL_I2S_Init+0x274>)
 800809c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a37      	ldr	r2, [pc, #220]	; (8008180 <HAL_I2S_Init+0x278>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d101      	bne.n	80080ac <HAL_I2S_Init+0x1a4>
 80080a8:	4b36      	ldr	r3, [pc, #216]	; (8008184 <HAL_I2S_Init+0x27c>)
 80080aa:	e001      	b.n	80080b0 <HAL_I2S_Init+0x1a8>
 80080ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	4932      	ldr	r1, [pc, #200]	; (8008180 <HAL_I2S_Init+0x278>)
 80080b8:	428a      	cmp	r2, r1
 80080ba:	d101      	bne.n	80080c0 <HAL_I2S_Init+0x1b8>
 80080bc:	4a31      	ldr	r2, [pc, #196]	; (8008184 <HAL_I2S_Init+0x27c>)
 80080be:	e001      	b.n	80080c4 <HAL_I2S_Init+0x1bc>
 80080c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80080c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80080c8:	f023 030f 	bic.w	r3, r3, #15
 80080cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a2b      	ldr	r2, [pc, #172]	; (8008180 <HAL_I2S_Init+0x278>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d101      	bne.n	80080dc <HAL_I2S_Init+0x1d4>
 80080d8:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <HAL_I2S_Init+0x27c>)
 80080da:	e001      	b.n	80080e0 <HAL_I2S_Init+0x1d8>
 80080dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080e0:	2202      	movs	r2, #2
 80080e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a25      	ldr	r2, [pc, #148]	; (8008180 <HAL_I2S_Init+0x278>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d101      	bne.n	80080f2 <HAL_I2S_Init+0x1ea>
 80080ee:	4b25      	ldr	r3, [pc, #148]	; (8008184 <HAL_I2S_Init+0x27c>)
 80080f0:	e001      	b.n	80080f6 <HAL_I2S_Init+0x1ee>
 80080f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008102:	d003      	beq.n	800810c <HAL_I2S_Init+0x204>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800810c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	e001      	b.n	8008118 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008122:	4313      	orrs	r3, r2
 8008124:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800812c:	4313      	orrs	r3, r2
 800812e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008136:	4313      	orrs	r3, r2
 8008138:	b29a      	uxth	r2, r3
 800813a:	897b      	ldrh	r3, [r7, #10]
 800813c:	4313      	orrs	r3, r2
 800813e:	b29b      	uxth	r3, r3
 8008140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008144:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a0d      	ldr	r2, [pc, #52]	; (8008180 <HAL_I2S_Init+0x278>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d101      	bne.n	8008154 <HAL_I2S_Init+0x24c>
 8008150:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <HAL_I2S_Init+0x27c>)
 8008152:	e001      	b.n	8008158 <HAL_I2S_Init+0x250>
 8008154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008158:	897a      	ldrh	r2, [r7, #10]
 800815a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	0800827f 	.word	0x0800827f
 8008178:	cccccccd 	.word	0xcccccccd
 800817c:	08008395 	.word	0x08008395
 8008180:	40003800 	.word	0x40003800
 8008184:	40003400 	.word	0x40003400

08008188 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	881a      	ldrh	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	1c9a      	adds	r2, r3, #2
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	3b01      	subs	r3, #1
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10e      	bne.n	8008218 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008208:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff ffb8 	bl	8008188 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	b292      	uxth	r2, r2
 8008234:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	1c9a      	adds	r2, r3, #2
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008252:	b29b      	uxth	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10e      	bne.n	8008276 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008266:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff ff93 	bl	800819c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b04      	cmp	r3, #4
 8008298:	d13a      	bne.n	8008310 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d109      	bne.n	80082b8 <I2S_IRQHandler+0x3a>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ae:	2b40      	cmp	r3, #64	; 0x40
 80082b0:	d102      	bne.n	80082b8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff ffb4 	bl	8008220 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	d126      	bne.n	8008310 <I2S_IRQHandler+0x92>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d11f      	bne.n	8008310 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80082de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80082e0:	2300      	movs	r3, #0
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	613b      	str	r3, [r7, #16]
 80082f4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008302:	f043 0202 	orr.w	r2, r3, #2
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff ff50 	bl	80081b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b03      	cmp	r3, #3
 800831a:	d136      	bne.n	800838a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b02      	cmp	r3, #2
 8008324:	d109      	bne.n	800833a <I2S_IRQHandler+0xbc>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008330:	2b80      	cmp	r3, #128	; 0x80
 8008332:	d102      	bne.n	800833a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff ff45 	bl	80081c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b08      	cmp	r3, #8
 8008342:	d122      	bne.n	800838a <I2S_IRQHandler+0x10c>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b20      	cmp	r3, #32
 8008350:	d11b      	bne.n	800838a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008360:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837c:	f043 0204 	orr.w	r2, r3, #4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff13 	bl	80081b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800838a:	bf00      	nop
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a92      	ldr	r2, [pc, #584]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d101      	bne.n	80083b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80083ae:	4b92      	ldr	r3, [pc, #584]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80083b0:	e001      	b.n	80083b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80083b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a8b      	ldr	r2, [pc, #556]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d101      	bne.n	80083d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80083cc:	4b8a      	ldr	r3, [pc, #552]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80083ce:	e001      	b.n	80083d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80083d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e0:	d004      	beq.n	80083ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f040 8099 	bne.w	800851e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d107      	bne.n	8008406 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f925 	bl	8008650 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b01      	cmp	r3, #1
 800840e:	d107      	bne.n	8008420 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9c8 	bl	80087b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d13a      	bne.n	80084a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	d035      	beq.n	80084a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a6e      	ldr	r2, [pc, #440]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d101      	bne.n	8008442 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800843e:	4b6e      	ldr	r3, [pc, #440]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008440:	e001      	b.n	8008446 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8008442:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4969      	ldr	r1, [pc, #420]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800844e:	428b      	cmp	r3, r1
 8008450:	d101      	bne.n	8008456 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8008452:	4b69      	ldr	r3, [pc, #420]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008454:	e001      	b.n	800845a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8008456:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800845a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800845e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800846e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008492:	f043 0202 	orr.w	r2, r3, #2
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff fe88 	bl	80081b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	f040 80c3 	bne.w	8008632 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 80bd 	beq.w	8008632 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80084c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a49      	ldr	r2, [pc, #292]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d101      	bne.n	80084d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80084d2:	4b49      	ldr	r3, [pc, #292]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80084d4:	e001      	b.n	80084da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80084d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4944      	ldr	r1, [pc, #272]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80084e2:	428b      	cmp	r3, r1
 80084e4:	d101      	bne.n	80084ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80084e6:	4b44      	ldr	r3, [pc, #272]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80084e8:	e001      	b.n	80084ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80084ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80084ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80084f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80084f4:	2300      	movs	r3, #0
 80084f6:	60bb      	str	r3, [r7, #8]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850e:	f043 0204 	orr.w	r2, r3, #4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff fe4a 	bl	80081b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800851c:	e089      	b.n	8008632 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b02      	cmp	r3, #2
 8008526:	d107      	bne.n	8008538 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f8be 	bl	80086b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b01      	cmp	r3, #1
 8008540:	d107      	bne.n	8008552 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8fd 	bl	800874c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d12f      	bne.n	80085bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	d02a      	beq.n	80085bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008574:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1e      	ldr	r2, [pc, #120]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d101      	bne.n	8008584 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008580:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008582:	e001      	b.n	8008588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4919      	ldr	r1, [pc, #100]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008590:	428b      	cmp	r3, r1
 8008592:	d101      	bne.n	8008598 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008594:	4b18      	ldr	r3, [pc, #96]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008596:	e001      	b.n	800859c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800859c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80085a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ae:	f043 0202 	orr.w	r2, r3, #2
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff fdfa 	bl	80081b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	f003 0308 	and.w	r3, r3, #8
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d136      	bne.n	8008634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d031      	beq.n	8008634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a07      	ldr	r2, [pc, #28]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d101      	bne.n	80085de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80085dc:	e001      	b.n	80085e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80085de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4902      	ldr	r1, [pc, #8]	; (80085f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80085ea:	428b      	cmp	r3, r1
 80085ec:	d106      	bne.n	80085fc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80085ee:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80085f0:	e006      	b.n	8008600 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80085f2:	bf00      	nop
 80085f4:	40003800 	.word	0x40003800
 80085f8:	40003400 	.word	0x40003400
 80085fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008604:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008614:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008622:	f043 0204 	orr.w	r2, r3, #4
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff fdc0 	bl	80081b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008630:	e000      	b.n	8008634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008632:	bf00      	nop
}
 8008634:	bf00      	nop
 8008636:	3720      	adds	r7, #32
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	1c99      	adds	r1, r3, #2
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6251      	str	r1, [r2, #36]	; 0x24
 8008662:	881a      	ldrh	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d113      	bne.n	80086aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008690:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff ffc9 	bl	800863c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	1c99      	adds	r1, r3, #2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6251      	str	r1, [r2, #36]	; 0x24
 80086c6:	8819      	ldrh	r1, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1d      	ldr	r2, [pc, #116]	; (8008744 <I2SEx_TxISR_I2SExt+0x90>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d101      	bne.n	80086d6 <I2SEx_TxISR_I2SExt+0x22>
 80086d2:	4b1d      	ldr	r3, [pc, #116]	; (8008748 <I2SEx_TxISR_I2SExt+0x94>)
 80086d4:	e001      	b.n	80086da <I2SEx_TxISR_I2SExt+0x26>
 80086d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086da:	460a      	mov	r2, r1
 80086dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b01      	subs	r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d121      	bne.n	800873a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a12      	ldr	r2, [pc, #72]	; (8008744 <I2SEx_TxISR_I2SExt+0x90>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d101      	bne.n	8008704 <I2SEx_TxISR_I2SExt+0x50>
 8008700:	4b11      	ldr	r3, [pc, #68]	; (8008748 <I2SEx_TxISR_I2SExt+0x94>)
 8008702:	e001      	b.n	8008708 <I2SEx_TxISR_I2SExt+0x54>
 8008704:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	490d      	ldr	r1, [pc, #52]	; (8008744 <I2SEx_TxISR_I2SExt+0x90>)
 8008710:	428b      	cmp	r3, r1
 8008712:	d101      	bne.n	8008718 <I2SEx_TxISR_I2SExt+0x64>
 8008714:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <I2SEx_TxISR_I2SExt+0x94>)
 8008716:	e001      	b.n	800871c <I2SEx_TxISR_I2SExt+0x68>
 8008718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800871c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008720:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d106      	bne.n	800873a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff ff81 	bl	800863c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40003800 	.word	0x40003800
 8008748:	40003400 	.word	0x40003400

0800874c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68d8      	ldr	r0, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	1c99      	adds	r1, r3, #2
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008764:	b282      	uxth	r2, r0
 8008766:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800876c:	b29b      	uxth	r3, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	b29a      	uxth	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d113      	bne.n	80087a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800878e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d106      	bne.n	80087a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff ff4a 	bl	800863c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a20      	ldr	r2, [pc, #128]	; (8008840 <I2SEx_RxISR_I2SExt+0x90>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d101      	bne.n	80087c6 <I2SEx_RxISR_I2SExt+0x16>
 80087c2:	4b20      	ldr	r3, [pc, #128]	; (8008844 <I2SEx_RxISR_I2SExt+0x94>)
 80087c4:	e001      	b.n	80087ca <I2SEx_RxISR_I2SExt+0x1a>
 80087c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087ca:	68d8      	ldr	r0, [r3, #12]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	1c99      	adds	r1, r3, #2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80087d6:	b282      	uxth	r2, r0
 80087d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087de:	b29b      	uxth	r3, r3
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d121      	bne.n	8008836 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a12      	ldr	r2, [pc, #72]	; (8008840 <I2SEx_RxISR_I2SExt+0x90>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d101      	bne.n	8008800 <I2SEx_RxISR_I2SExt+0x50>
 80087fc:	4b11      	ldr	r3, [pc, #68]	; (8008844 <I2SEx_RxISR_I2SExt+0x94>)
 80087fe:	e001      	b.n	8008804 <I2SEx_RxISR_I2SExt+0x54>
 8008800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	490d      	ldr	r1, [pc, #52]	; (8008840 <I2SEx_RxISR_I2SExt+0x90>)
 800880c:	428b      	cmp	r3, r1
 800880e:	d101      	bne.n	8008814 <I2SEx_RxISR_I2SExt+0x64>
 8008810:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <I2SEx_RxISR_I2SExt+0x94>)
 8008812:	e001      	b.n	8008818 <I2SEx_RxISR_I2SExt+0x68>
 8008814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008818:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800881c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d106      	bne.n	8008836 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff ff03 	bl	800863c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	40003800 	.word	0x40003800
 8008844:	40003400 	.word	0x40003400

08008848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e267      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d075      	beq.n	8008952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008866:	4b88      	ldr	r3, [pc, #544]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f003 030c 	and.w	r3, r3, #12
 800886e:	2b04      	cmp	r3, #4
 8008870:	d00c      	beq.n	800888c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008872:	4b85      	ldr	r3, [pc, #532]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800887a:	2b08      	cmp	r3, #8
 800887c:	d112      	bne.n	80088a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800887e:	4b82      	ldr	r3, [pc, #520]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800888a:	d10b      	bne.n	80088a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800888c:	4b7e      	ldr	r3, [pc, #504]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d05b      	beq.n	8008950 <HAL_RCC_OscConfig+0x108>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d157      	bne.n	8008950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e242      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ac:	d106      	bne.n	80088bc <HAL_RCC_OscConfig+0x74>
 80088ae:	4b76      	ldr	r3, [pc, #472]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a75      	ldr	r2, [pc, #468]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	e01d      	b.n	80088f8 <HAL_RCC_OscConfig+0xb0>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088c4:	d10c      	bne.n	80088e0 <HAL_RCC_OscConfig+0x98>
 80088c6:	4b70      	ldr	r3, [pc, #448]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a6f      	ldr	r2, [pc, #444]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	4b6d      	ldr	r3, [pc, #436]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a6c      	ldr	r2, [pc, #432]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	e00b      	b.n	80088f8 <HAL_RCC_OscConfig+0xb0>
 80088e0:	4b69      	ldr	r3, [pc, #420]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a68      	ldr	r2, [pc, #416]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	4b66      	ldr	r3, [pc, #408]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a65      	ldr	r2, [pc, #404]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d013      	beq.n	8008928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008900:	f7fa fb5e 	bl	8002fc0 <HAL_GetTick>
 8008904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008908:	f7fa fb5a 	bl	8002fc0 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b64      	cmp	r3, #100	; 0x64
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e207      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800891a:	4b5b      	ldr	r3, [pc, #364]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f0      	beq.n	8008908 <HAL_RCC_OscConfig+0xc0>
 8008926:	e014      	b.n	8008952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008928:	f7fa fb4a 	bl	8002fc0 <HAL_GetTick>
 800892c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008930:	f7fa fb46 	bl	8002fc0 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b64      	cmp	r3, #100	; 0x64
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e1f3      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008942:	4b51      	ldr	r3, [pc, #324]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f0      	bne.n	8008930 <HAL_RCC_OscConfig+0xe8>
 800894e:	e000      	b.n	8008952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d063      	beq.n	8008a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800895e:	4b4a      	ldr	r3, [pc, #296]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 030c 	and.w	r3, r3, #12
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800896a:	4b47      	ldr	r3, [pc, #284]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008972:	2b08      	cmp	r3, #8
 8008974:	d11c      	bne.n	80089b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008976:	4b44      	ldr	r3, [pc, #272]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d116      	bne.n	80089b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008982:	4b41      	ldr	r3, [pc, #260]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <HAL_RCC_OscConfig+0x152>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d001      	beq.n	800899a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e1c7      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800899a:	4b3b      	ldr	r3, [pc, #236]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	4937      	ldr	r1, [pc, #220]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089ae:	e03a      	b.n	8008a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d020      	beq.n	80089fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089b8:	4b34      	ldr	r3, [pc, #208]	; (8008a8c <HAL_RCC_OscConfig+0x244>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089be:	f7fa faff 	bl	8002fc0 <HAL_GetTick>
 80089c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089c4:	e008      	b.n	80089d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089c6:	f7fa fafb 	bl	8002fc0 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d901      	bls.n	80089d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e1a8      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089d8:	4b2b      	ldr	r3, [pc, #172]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0f0      	beq.n	80089c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089e4:	4b28      	ldr	r3, [pc, #160]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	4925      	ldr	r1, [pc, #148]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	600b      	str	r3, [r1, #0]
 80089f8:	e015      	b.n	8008a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089fa:	4b24      	ldr	r3, [pc, #144]	; (8008a8c <HAL_RCC_OscConfig+0x244>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a00:	f7fa fade 	bl	8002fc0 <HAL_GetTick>
 8008a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a06:	e008      	b.n	8008a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a08:	f7fa fada 	bl	8002fc0 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e187      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f0      	bne.n	8008a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d036      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <HAL_RCC_OscConfig+0x248>)
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a40:	f7fa fabe 	bl	8002fc0 <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a46:	e008      	b.n	8008a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a48:	f7fa faba 	bl	8002fc0 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e167      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a5a:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f0      	beq.n	8008a48 <HAL_RCC_OscConfig+0x200>
 8008a66:	e01b      	b.n	8008aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a68:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <HAL_RCC_OscConfig+0x248>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a6e:	f7fa faa7 	bl	8002fc0 <HAL_GetTick>
 8008a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a74:	e00e      	b.n	8008a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a76:	f7fa faa3 	bl	8002fc0 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d907      	bls.n	8008a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e150      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	42470000 	.word	0x42470000
 8008a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a94:	4b88      	ldr	r3, [pc, #544]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1ea      	bne.n	8008a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 8097 	beq.w	8008bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ab2:	4b81      	ldr	r3, [pc, #516]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10f      	bne.n	8008ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	4b7d      	ldr	r3, [pc, #500]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	4a7c      	ldr	r2, [pc, #496]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008acc:	6413      	str	r3, [r2, #64]	; 0x40
 8008ace:	4b7a      	ldr	r3, [pc, #488]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad6:	60bb      	str	r3, [r7, #8]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ada:	2301      	movs	r3, #1
 8008adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ade:	4b77      	ldr	r3, [pc, #476]	; (8008cbc <HAL_RCC_OscConfig+0x474>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d118      	bne.n	8008b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008aea:	4b74      	ldr	r3, [pc, #464]	; (8008cbc <HAL_RCC_OscConfig+0x474>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a73      	ldr	r2, [pc, #460]	; (8008cbc <HAL_RCC_OscConfig+0x474>)
 8008af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008af6:	f7fa fa63 	bl	8002fc0 <HAL_GetTick>
 8008afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008afe:	f7fa fa5f 	bl	8002fc0 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e10c      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b10:	4b6a      	ldr	r3, [pc, #424]	; (8008cbc <HAL_RCC_OscConfig+0x474>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0f0      	beq.n	8008afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d106      	bne.n	8008b32 <HAL_RCC_OscConfig+0x2ea>
 8008b24:	4b64      	ldr	r3, [pc, #400]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b28:	4a63      	ldr	r2, [pc, #396]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b30:	e01c      	b.n	8008b6c <HAL_RCC_OscConfig+0x324>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b05      	cmp	r3, #5
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCC_OscConfig+0x30c>
 8008b3a:	4b5f      	ldr	r3, [pc, #380]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3e:	4a5e      	ldr	r2, [pc, #376]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b40:	f043 0304 	orr.w	r3, r3, #4
 8008b44:	6713      	str	r3, [r2, #112]	; 0x70
 8008b46:	4b5c      	ldr	r3, [pc, #368]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4a:	4a5b      	ldr	r2, [pc, #364]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b4c:	f043 0301 	orr.w	r3, r3, #1
 8008b50:	6713      	str	r3, [r2, #112]	; 0x70
 8008b52:	e00b      	b.n	8008b6c <HAL_RCC_OscConfig+0x324>
 8008b54:	4b58      	ldr	r3, [pc, #352]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b58:	4a57      	ldr	r2, [pc, #348]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b5a:	f023 0301 	bic.w	r3, r3, #1
 8008b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b60:	4b55      	ldr	r3, [pc, #340]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b64:	4a54      	ldr	r2, [pc, #336]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b66:	f023 0304 	bic.w	r3, r3, #4
 8008b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d015      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b74:	f7fa fa24 	bl	8002fc0 <HAL_GetTick>
 8008b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b7a:	e00a      	b.n	8008b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b7c:	f7fa fa20 	bl	8002fc0 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e0cb      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b92:	4b49      	ldr	r3, [pc, #292]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0ee      	beq.n	8008b7c <HAL_RCC_OscConfig+0x334>
 8008b9e:	e014      	b.n	8008bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ba0:	f7fa fa0e 	bl	8002fc0 <HAL_GetTick>
 8008ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ba6:	e00a      	b.n	8008bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ba8:	f7fa fa0a 	bl	8002fc0 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e0b5      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bbe:	4b3e      	ldr	r3, [pc, #248]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1ee      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d105      	bne.n	8008bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bd0:	4b39      	ldr	r3, [pc, #228]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd4:	4a38      	ldr	r2, [pc, #224]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 80a1 	beq.w	8008d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008be6:	4b34      	ldr	r3, [pc, #208]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 030c 	and.w	r3, r3, #12
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d05c      	beq.n	8008cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d141      	bne.n	8008c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bfa:	4b31      	ldr	r3, [pc, #196]	; (8008cc0 <HAL_RCC_OscConfig+0x478>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c00:	f7fa f9de 	bl	8002fc0 <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c06:	e008      	b.n	8008c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c08:	f7fa f9da 	bl	8002fc0 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e087      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c1a:	4b27      	ldr	r3, [pc, #156]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1f0      	bne.n	8008c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69da      	ldr	r2, [r3, #28]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	019b      	lsls	r3, r3, #6
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	085b      	lsrs	r3, r3, #1
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	041b      	lsls	r3, r3, #16
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	061b      	lsls	r3, r3, #24
 8008c4a:	491b      	ldr	r1, [pc, #108]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c50:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <HAL_RCC_OscConfig+0x478>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c56:	f7fa f9b3 	bl	8002fc0 <HAL_GetTick>
 8008c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c5c:	e008      	b.n	8008c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c5e:	f7fa f9af 	bl	8002fc0 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d901      	bls.n	8008c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e05c      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c70:	4b11      	ldr	r3, [pc, #68]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0f0      	beq.n	8008c5e <HAL_RCC_OscConfig+0x416>
 8008c7c:	e054      	b.n	8008d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c7e:	4b10      	ldr	r3, [pc, #64]	; (8008cc0 <HAL_RCC_OscConfig+0x478>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c84:	f7fa f99c 	bl	8002fc0 <HAL_GetTick>
 8008c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c8c:	f7fa f998 	bl	8002fc0 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e045      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c9e:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1f0      	bne.n	8008c8c <HAL_RCC_OscConfig+0x444>
 8008caa:	e03d      	b.n	8008d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d107      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e038      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
 8008cb8:	40023800 	.word	0x40023800
 8008cbc:	40007000 	.word	0x40007000
 8008cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008cc4:	4b1b      	ldr	r3, [pc, #108]	; (8008d34 <HAL_RCC_OscConfig+0x4ec>)
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d028      	beq.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d121      	bne.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d11a      	bne.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d111      	bne.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	085b      	lsrs	r3, r3, #1
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d107      	bne.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d001      	beq.n	8008d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40023800 	.word	0x40023800

08008d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0cc      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d4c:	4b68      	ldr	r3, [pc, #416]	; (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d90c      	bls.n	8008d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d5a:	4b65      	ldr	r3, [pc, #404]	; (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d62:	4b63      	ldr	r3, [pc, #396]	; (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d001      	beq.n	8008d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0b8      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d020      	beq.n	8008dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d005      	beq.n	8008d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d8c:	4b59      	ldr	r3, [pc, #356]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	4a58      	ldr	r2, [pc, #352]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008da4:	4b53      	ldr	r3, [pc, #332]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	4a52      	ldr	r2, [pc, #328]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008db0:	4b50      	ldr	r3, [pc, #320]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	494d      	ldr	r1, [pc, #308]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d044      	beq.n	8008e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d107      	bne.n	8008de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dd6:	4b47      	ldr	r3, [pc, #284]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d119      	bne.n	8008e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e07f      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d003      	beq.n	8008df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d107      	bne.n	8008e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008df6:	4b3f      	ldr	r3, [pc, #252]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e06f      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e06:	4b3b      	ldr	r3, [pc, #236]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e067      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e16:	4b37      	ldr	r3, [pc, #220]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f023 0203 	bic.w	r2, r3, #3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	4934      	ldr	r1, [pc, #208]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e28:	f7fa f8ca 	bl	8002fc0 <HAL_GetTick>
 8008e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e2e:	e00a      	b.n	8008e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e30:	f7fa f8c6 	bl	8002fc0 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d901      	bls.n	8008e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e04f      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e46:	4b2b      	ldr	r3, [pc, #172]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 020c 	and.w	r2, r3, #12
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d1eb      	bne.n	8008e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e58:	4b25      	ldr	r3, [pc, #148]	; (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d20c      	bcs.n	8008e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e66:	4b22      	ldr	r3, [pc, #136]	; (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e6e:	4b20      	ldr	r3, [pc, #128]	; (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d001      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e032      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d008      	beq.n	8008e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e8c:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	4916      	ldr	r1, [pc, #88]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0308 	and.w	r3, r3, #8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008eaa:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	490e      	ldr	r1, [pc, #56]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008ebe:	f000 f821 	bl	8008f04 <HAL_RCC_GetSysClockFreq>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	091b      	lsrs	r3, r3, #4
 8008eca:	f003 030f 	and.w	r3, r3, #15
 8008ece:	490a      	ldr	r1, [pc, #40]	; (8008ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8008ed0:	5ccb      	ldrb	r3, [r1, r3]
 8008ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed6:	4a09      	ldr	r2, [pc, #36]	; (8008efc <HAL_RCC_ClockConfig+0x1c4>)
 8008ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008eda:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <HAL_RCC_ClockConfig+0x1c8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f9 ff6e 	bl	8002dc0 <HAL_InitTick>

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40023c00 	.word	0x40023c00
 8008ef4:	40023800 	.word	0x40023800
 8008ef8:	080115d8 	.word	0x080115d8
 8008efc:	2000001c 	.word	0x2000001c
 8008f00:	20000020 	.word	0x20000020

08008f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f08:	b094      	sub	sp, #80	; 0x50
 8008f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f10:	2300      	movs	r3, #0
 8008f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f14:	2300      	movs	r3, #0
 8008f16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f1c:	4b79      	ldr	r3, [pc, #484]	; (8009104 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f003 030c 	and.w	r3, r3, #12
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d00d      	beq.n	8008f44 <HAL_RCC_GetSysClockFreq+0x40>
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	f200 80e1 	bhi.w	80090f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <HAL_RCC_GetSysClockFreq+0x34>
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d003      	beq.n	8008f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8008f36:	e0db      	b.n	80090f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f38:	4b73      	ldr	r3, [pc, #460]	; (8009108 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008f3c:	e0db      	b.n	80090f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f3e:	4b73      	ldr	r3, [pc, #460]	; (800910c <HAL_RCC_GetSysClockFreq+0x208>)
 8008f40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f42:	e0d8      	b.n	80090f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f44:	4b6f      	ldr	r3, [pc, #444]	; (8009104 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f4e:	4b6d      	ldr	r3, [pc, #436]	; (8009104 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d063      	beq.n	8009022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f5a:	4b6a      	ldr	r3, [pc, #424]	; (8009104 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	099b      	lsrs	r3, r3, #6
 8008f60:	2200      	movs	r2, #0
 8008f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f6e:	2300      	movs	r3, #0
 8008f70:	637b      	str	r3, [r7, #52]	; 0x34
 8008f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008f76:	4622      	mov	r2, r4
 8008f78:	462b      	mov	r3, r5
 8008f7a:	f04f 0000 	mov.w	r0, #0
 8008f7e:	f04f 0100 	mov.w	r1, #0
 8008f82:	0159      	lsls	r1, r3, #5
 8008f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f88:	0150      	lsls	r0, r2, #5
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4621      	mov	r1, r4
 8008f90:	1a51      	subs	r1, r2, r1
 8008f92:	6139      	str	r1, [r7, #16]
 8008f94:	4629      	mov	r1, r5
 8008f96:	eb63 0301 	sbc.w	r3, r3, r1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fa8:	4659      	mov	r1, fp
 8008faa:	018b      	lsls	r3, r1, #6
 8008fac:	4651      	mov	r1, sl
 8008fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008fb2:	4651      	mov	r1, sl
 8008fb4:	018a      	lsls	r2, r1, #6
 8008fb6:	4651      	mov	r1, sl
 8008fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fd6:	4690      	mov	r8, r2
 8008fd8:	4699      	mov	r9, r3
 8008fda:	4623      	mov	r3, r4
 8008fdc:	eb18 0303 	adds.w	r3, r8, r3
 8008fe0:	60bb      	str	r3, [r7, #8]
 8008fe2:	462b      	mov	r3, r5
 8008fe4:	eb49 0303 	adc.w	r3, r9, r3
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	f04f 0200 	mov.w	r2, #0
 8008fee:	f04f 0300 	mov.w	r3, #0
 8008ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	024b      	lsls	r3, r1, #9
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009000:	4621      	mov	r1, r4
 8009002:	024a      	lsls	r2, r1, #9
 8009004:	4610      	mov	r0, r2
 8009006:	4619      	mov	r1, r3
 8009008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800900a:	2200      	movs	r2, #0
 800900c:	62bb      	str	r3, [r7, #40]	; 0x28
 800900e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009014:	f7f7 f92c 	bl	8000270 <__aeabi_uldivmod>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4613      	mov	r3, r2
 800901e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009020:	e058      	b.n	80090d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009022:	4b38      	ldr	r3, [pc, #224]	; (8009104 <HAL_RCC_GetSysClockFreq+0x200>)
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	099b      	lsrs	r3, r3, #6
 8009028:	2200      	movs	r2, #0
 800902a:	4618      	mov	r0, r3
 800902c:	4611      	mov	r1, r2
 800902e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009032:	623b      	str	r3, [r7, #32]
 8009034:	2300      	movs	r3, #0
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
 8009038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800903c:	4642      	mov	r2, r8
 800903e:	464b      	mov	r3, r9
 8009040:	f04f 0000 	mov.w	r0, #0
 8009044:	f04f 0100 	mov.w	r1, #0
 8009048:	0159      	lsls	r1, r3, #5
 800904a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800904e:	0150      	lsls	r0, r2, #5
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4641      	mov	r1, r8
 8009056:	ebb2 0a01 	subs.w	sl, r2, r1
 800905a:	4649      	mov	r1, r9
 800905c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	f04f 0300 	mov.w	r3, #0
 8009068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800906c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009074:	ebb2 040a 	subs.w	r4, r2, sl
 8009078:	eb63 050b 	sbc.w	r5, r3, fp
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	f04f 0300 	mov.w	r3, #0
 8009084:	00eb      	lsls	r3, r5, #3
 8009086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800908a:	00e2      	lsls	r2, r4, #3
 800908c:	4614      	mov	r4, r2
 800908e:	461d      	mov	r5, r3
 8009090:	4643      	mov	r3, r8
 8009092:	18e3      	adds	r3, r4, r3
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	464b      	mov	r3, r9
 8009098:	eb45 0303 	adc.w	r3, r5, r3
 800909c:	607b      	str	r3, [r7, #4]
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80090aa:	4629      	mov	r1, r5
 80090ac:	028b      	lsls	r3, r1, #10
 80090ae:	4621      	mov	r1, r4
 80090b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80090b4:	4621      	mov	r1, r4
 80090b6:	028a      	lsls	r2, r1, #10
 80090b8:	4610      	mov	r0, r2
 80090ba:	4619      	mov	r1, r3
 80090bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090be:	2200      	movs	r2, #0
 80090c0:	61bb      	str	r3, [r7, #24]
 80090c2:	61fa      	str	r2, [r7, #28]
 80090c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090c8:	f7f7 f8d2 	bl	8000270 <__aeabi_uldivmod>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4613      	mov	r3, r2
 80090d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80090d4:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <HAL_RCC_GetSysClockFreq+0x200>)
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	0c1b      	lsrs	r3, r3, #16
 80090da:	f003 0303 	and.w	r3, r3, #3
 80090de:	3301      	adds	r3, #1
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80090e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090ee:	e002      	b.n	80090f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090f0:	4b05      	ldr	r3, [pc, #20]	; (8009108 <HAL_RCC_GetSysClockFreq+0x204>)
 80090f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3750      	adds	r7, #80	; 0x50
 80090fc:	46bd      	mov	sp, r7
 80090fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009102:	bf00      	nop
 8009104:	40023800 	.word	0x40023800
 8009108:	00f42400 	.word	0x00f42400
 800910c:	007a1200 	.word	0x007a1200

08009110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009114:	4b03      	ldr	r3, [pc, #12]	; (8009124 <HAL_RCC_GetHCLKFreq+0x14>)
 8009116:	681b      	ldr	r3, [r3, #0]
}
 8009118:	4618      	mov	r0, r3
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	2000001c 	.word	0x2000001c

08009128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800912c:	f7ff fff0 	bl	8009110 <HAL_RCC_GetHCLKFreq>
 8009130:	4602      	mov	r2, r0
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	0a9b      	lsrs	r3, r3, #10
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	4903      	ldr	r1, [pc, #12]	; (800914c <HAL_RCC_GetPCLK1Freq+0x24>)
 800913e:	5ccb      	ldrb	r3, [r1, r3]
 8009140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009144:	4618      	mov	r0, r3
 8009146:	bd80      	pop	{r7, pc}
 8009148:	40023800 	.word	0x40023800
 800914c:	080115e8 	.word	0x080115e8

08009150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	220f      	movs	r2, #15
 800915e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009160:	4b12      	ldr	r3, [pc, #72]	; (80091ac <HAL_RCC_GetClockConfig+0x5c>)
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f003 0203 	and.w	r2, r3, #3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <HAL_RCC_GetClockConfig+0x5c>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009178:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <HAL_RCC_GetClockConfig+0x5c>)
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009184:	4b09      	ldr	r3, [pc, #36]	; (80091ac <HAL_RCC_GetClockConfig+0x5c>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	08db      	lsrs	r3, r3, #3
 800918a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009192:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <HAL_RCC_GetClockConfig+0x60>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0207 	and.w	r2, r3, #7
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	601a      	str	r2, [r3, #0]
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	40023800 	.word	0x40023800
 80091b0:	40023c00 	.word	0x40023c00

080091b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d105      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d035      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80091dc:	4b62      	ldr	r3, [pc, #392]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091e2:	f7f9 feed 	bl	8002fc0 <HAL_GetTick>
 80091e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091e8:	e008      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80091ea:	f7f9 fee9 	bl	8002fc0 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d901      	bls.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e0b0      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091fc:	4b5b      	ldr	r3, [pc, #364]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1f0      	bne.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	019a      	lsls	r2, r3, #6
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	071b      	lsls	r3, r3, #28
 8009214:	4955      	ldr	r1, [pc, #340]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009216:	4313      	orrs	r3, r2
 8009218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800921c:	4b52      	ldr	r3, [pc, #328]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800921e:	2201      	movs	r2, #1
 8009220:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009222:	f7f9 fecd 	bl	8002fc0 <HAL_GetTick>
 8009226:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009228:	e008      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800922a:	f7f9 fec9 	bl	8002fc0 <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	2b02      	cmp	r3, #2
 8009236:	d901      	bls.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e090      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800923c:	4b4b      	ldr	r3, [pc, #300]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0f0      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 8083 	beq.w	800935c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	4b44      	ldr	r3, [pc, #272]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	4a43      	ldr	r2, [pc, #268]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009264:	6413      	str	r3, [r2, #64]	; 0x40
 8009266:	4b41      	ldr	r3, [pc, #260]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009272:	4b3f      	ldr	r3, [pc, #252]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a3e      	ldr	r2, [pc, #248]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800927c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800927e:	f7f9 fe9f 	bl	8002fc0 <HAL_GetTick>
 8009282:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009284:	e008      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009286:	f7f9 fe9b 	bl	8002fc0 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e062      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009298:	4b35      	ldr	r3, [pc, #212]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0f0      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092a4:	4b31      	ldr	r3, [pc, #196]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d02f      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d028      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092c2:	4b2a      	ldr	r3, [pc, #168]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80092cc:	4b29      	ldr	r3, [pc, #164]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80092ce:	2201      	movs	r2, #1
 80092d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80092d2:	4b28      	ldr	r3, [pc, #160]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80092d8:	4a24      	ldr	r2, [pc, #144]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80092de:	4b23      	ldr	r3, [pc, #140]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d114      	bne.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80092ea:	f7f9 fe69 	bl	8002fc0 <HAL_GetTick>
 80092ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092f0:	e00a      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092f2:	f7f9 fe65 	bl	8002fc0 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009300:	4293      	cmp	r3, r2
 8009302:	d901      	bls.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e02a      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009308:	4b18      	ldr	r3, [pc, #96]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800930a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930c:	f003 0302 	and.w	r3, r3, #2
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0ee      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800931c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009320:	d10d      	bne.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009322:	4b12      	ldr	r3, [pc, #72]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009336:	490d      	ldr	r1, [pc, #52]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009338:	4313      	orrs	r3, r2
 800933a:	608b      	str	r3, [r1, #8]
 800933c:	e005      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800933e:	4b0b      	ldr	r3, [pc, #44]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	4a0a      	ldr	r2, [pc, #40]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009344:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009348:	6093      	str	r3, [r2, #8]
 800934a:	4b08      	ldr	r3, [pc, #32]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800934c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009356:	4905      	ldr	r1, [pc, #20]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009358:	4313      	orrs	r3, r2
 800935a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	42470068 	.word	0x42470068
 800936c:	40023800 	.word	0x40023800
 8009370:	40007000 	.word	0x40007000
 8009374:	42470e40 	.word	0x42470e40

08009378 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d13e      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8009396:	4b23      	ldr	r3, [pc, #140]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d12f      	bne.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80093ac:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80093ae:	617b      	str	r3, [r7, #20]
          break;
 80093b0:	e02f      	b.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80093b2:	4b1c      	ldr	r3, [pc, #112]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093be:	d108      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80093c0:	4b18      	ldr	r3, [pc, #96]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093c8:	4a18      	ldr	r2, [pc, #96]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	e007      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80093d2:	4b14      	ldr	r3, [pc, #80]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093da:	4a15      	ldr	r2, [pc, #84]	; (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80093dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80093e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e8:	099b      	lsrs	r3, r3, #6
 80093ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	fb02 f303 	mul.w	r3, r2, r3
 80093f4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80093f6:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80093f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093fc:	0f1b      	lsrs	r3, r3, #28
 80093fe:	f003 0307 	and.w	r3, r3, #7
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	fbb2 f3f3 	udiv	r3, r2, r3
 8009408:	617b      	str	r3, [r7, #20]
          break;
 800940a:	e002      	b.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
          break;
 8009410:	bf00      	nop
        }
      }
      break;
 8009412:	bf00      	nop
    }
  }
  return frequency;
 8009414:	697b      	ldr	r3, [r7, #20]
}
 8009416:	4618      	mov	r0, r3
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40023800 	.word	0x40023800
 8009428:	00bb8000 	.word	0x00bb8000
 800942c:	007a1200 	.word	0x007a1200
 8009430:	00f42400 	.word	0x00f42400

08009434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e07b      	b.n	800953e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	2b00      	cmp	r3, #0
 800944c:	d108      	bne.n	8009460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009456:	d009      	beq.n	800946c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	61da      	str	r2, [r3, #28]
 800945e:	e005      	b.n	800946c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7f9 fbf6 	bl	8002c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094b4:	431a      	orrs	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094be:	431a      	orrs	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f0:	ea42 0103 	orr.w	r1, r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	430a      	orrs	r2, r1
 8009502:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	0c1b      	lsrs	r3, r3, #16
 800950a:	f003 0104 	and.w	r1, r3, #4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	f003 0210 	and.w	r2, r3, #16
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69da      	ldr	r2, [r3, #28]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800952c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e041      	b.n	80095dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	d106      	bne.n	8009572 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7f9 fbcb 	bl	8002d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2202      	movs	r2, #2
 8009576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3304      	adds	r3, #4
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f000 fbb1 	bl	8009cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d001      	beq.n	80095fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e04e      	b.n	800969a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2202      	movs	r2, #2
 8009600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0201 	orr.w	r2, r2, #1
 8009612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a23      	ldr	r2, [pc, #140]	; (80096a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d022      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x80>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009626:	d01d      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x80>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1f      	ldr	r2, [pc, #124]	; (80096ac <HAL_TIM_Base_Start_IT+0xc8>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d018      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x80>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1e      	ldr	r2, [pc, #120]	; (80096b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d013      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x80>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a1c      	ldr	r2, [pc, #112]	; (80096b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00e      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x80>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a1b      	ldr	r2, [pc, #108]	; (80096b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d009      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x80>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a19      	ldr	r2, [pc, #100]	; (80096bc <HAL_TIM_Base_Start_IT+0xd8>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d004      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x80>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a18      	ldr	r2, [pc, #96]	; (80096c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d111      	bne.n	8009688 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b06      	cmp	r3, #6
 8009674:	d010      	beq.n	8009698 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f042 0201 	orr.w	r2, r2, #1
 8009684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009686:	e007      	b.n	8009698 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f042 0201 	orr.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	40010000 	.word	0x40010000
 80096ac:	40000400 	.word	0x40000400
 80096b0:	40000800 	.word	0x40000800
 80096b4:	40000c00 	.word	0x40000c00
 80096b8:	40010400 	.word	0x40010400
 80096bc:	40014000 	.word	0x40014000
 80096c0:	40001800 	.word	0x40001800

080096c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e041      	b.n	800975a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f839 	bl	8009762 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3304      	adds	r3, #4
 8009700:	4619      	mov	r1, r3
 8009702:	4610      	mov	r0, r2
 8009704:	f000 faf2 	bl	8009cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	f003 0302 	and.w	r3, r3, #2
 8009788:	2b02      	cmp	r3, #2
 800978a:	d122      	bne.n	80097d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b02      	cmp	r3, #2
 8009798:	d11b      	bne.n	80097d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f06f 0202 	mvn.w	r2, #2
 80097a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fa78 	bl	8009cae <HAL_TIM_IC_CaptureCallback>
 80097be:	e005      	b.n	80097cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fa6a 	bl	8009c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fa7b 	bl	8009cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b04      	cmp	r3, #4
 80097de:	d122      	bne.n	8009826 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f003 0304 	and.w	r3, r3, #4
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d11b      	bne.n	8009826 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f06f 0204 	mvn.w	r2, #4
 80097f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fa4e 	bl	8009cae <HAL_TIM_IC_CaptureCallback>
 8009812:	e005      	b.n	8009820 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fa40 	bl	8009c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa51 	bl	8009cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	f003 0308 	and.w	r3, r3, #8
 8009830:	2b08      	cmp	r3, #8
 8009832:	d122      	bne.n	800987a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b08      	cmp	r3, #8
 8009840:	d11b      	bne.n	800987a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f06f 0208 	mvn.w	r2, #8
 800984a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2204      	movs	r2, #4
 8009850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f003 0303 	and.w	r3, r3, #3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa24 	bl	8009cae <HAL_TIM_IC_CaptureCallback>
 8009866:	e005      	b.n	8009874 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fa16 	bl	8009c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa27 	bl	8009cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b10      	cmp	r3, #16
 8009886:	d122      	bne.n	80098ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f003 0310 	and.w	r3, r3, #16
 8009892:	2b10      	cmp	r3, #16
 8009894:	d11b      	bne.n	80098ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f06f 0210 	mvn.w	r2, #16
 800989e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2208      	movs	r2, #8
 80098a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f9fa 	bl	8009cae <HAL_TIM_IC_CaptureCallback>
 80098ba:	e005      	b.n	80098c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f9ec 	bl	8009c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f9fd 	bl	8009cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d10e      	bne.n	80098fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d107      	bne.n	80098fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f06f 0201 	mvn.w	r2, #1
 80098f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7f8 fb4f 	bl	8001f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009904:	2b80      	cmp	r3, #128	; 0x80
 8009906:	d10e      	bne.n	8009926 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009912:	2b80      	cmp	r3, #128	; 0x80
 8009914:	d107      	bne.n	8009926 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800991e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fda5 	bl	800a470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009930:	2b40      	cmp	r3, #64	; 0x40
 8009932:	d10e      	bne.n	8009952 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	d107      	bne.n	8009952 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800994a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f9c2 	bl	8009cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	f003 0320 	and.w	r3, r3, #32
 800995c:	2b20      	cmp	r3, #32
 800995e:	d10e      	bne.n	800997e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f003 0320 	and.w	r3, r3, #32
 800996a:	2b20      	cmp	r3, #32
 800996c:	d107      	bne.n	800997e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f06f 0220 	mvn.w	r2, #32
 8009976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fd6f 	bl	800a45c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d101      	bne.n	80099a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099a2:	2302      	movs	r3, #2
 80099a4:	e0ae      	b.n	8009b04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b0c      	cmp	r3, #12
 80099b2:	f200 809f 	bhi.w	8009af4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80099b6:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099bc:	080099f1 	.word	0x080099f1
 80099c0:	08009af5 	.word	0x08009af5
 80099c4:	08009af5 	.word	0x08009af5
 80099c8:	08009af5 	.word	0x08009af5
 80099cc:	08009a31 	.word	0x08009a31
 80099d0:	08009af5 	.word	0x08009af5
 80099d4:	08009af5 	.word	0x08009af5
 80099d8:	08009af5 	.word	0x08009af5
 80099dc:	08009a73 	.word	0x08009a73
 80099e0:	08009af5 	.word	0x08009af5
 80099e4:	08009af5 	.word	0x08009af5
 80099e8:	08009af5 	.word	0x08009af5
 80099ec:	08009ab3 	.word	0x08009ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fa18 	bl	8009e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0208 	orr.w	r2, r2, #8
 8009a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699a      	ldr	r2, [r3, #24]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0204 	bic.w	r2, r2, #4
 8009a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6999      	ldr	r1, [r3, #24]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	619a      	str	r2, [r3, #24]
      break;
 8009a2e:	e064      	b.n	8009afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68b9      	ldr	r1, [r7, #8]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fa68 	bl	8009f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699a      	ldr	r2, [r3, #24]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	699a      	ldr	r2, [r3, #24]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6999      	ldr	r1, [r3, #24]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	021a      	lsls	r2, r3, #8
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	619a      	str	r2, [r3, #24]
      break;
 8009a70:	e043      	b.n	8009afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fabd 	bl	8009ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	69da      	ldr	r2, [r3, #28]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f042 0208 	orr.w	r2, r2, #8
 8009a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	69da      	ldr	r2, [r3, #28]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0204 	bic.w	r2, r2, #4
 8009a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69d9      	ldr	r1, [r3, #28]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	430a      	orrs	r2, r1
 8009aae:	61da      	str	r2, [r3, #28]
      break;
 8009ab0:	e023      	b.n	8009afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fb11 	bl	800a0e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69da      	ldr	r2, [r3, #28]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69da      	ldr	r2, [r3, #28]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	69d9      	ldr	r1, [r3, #28]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	021a      	lsls	r2, r3, #8
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	430a      	orrs	r2, r1
 8009af0:	61da      	str	r2, [r3, #28]
      break;
 8009af2:	e002      	b.n	8009afa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	75fb      	strb	r3, [r7, #23]
      break;
 8009af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d101      	bne.n	8009b28 <HAL_TIM_ConfigClockSource+0x1c>
 8009b24:	2302      	movs	r3, #2
 8009b26:	e0b4      	b.n	8009c92 <HAL_TIM_ConfigClockSource+0x186>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2202      	movs	r2, #2
 8009b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b60:	d03e      	beq.n	8009be0 <HAL_TIM_ConfigClockSource+0xd4>
 8009b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b66:	f200 8087 	bhi.w	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
 8009b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b6e:	f000 8086 	beq.w	8009c7e <HAL_TIM_ConfigClockSource+0x172>
 8009b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b76:	d87f      	bhi.n	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
 8009b78:	2b70      	cmp	r3, #112	; 0x70
 8009b7a:	d01a      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0xa6>
 8009b7c:	2b70      	cmp	r3, #112	; 0x70
 8009b7e:	d87b      	bhi.n	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
 8009b80:	2b60      	cmp	r3, #96	; 0x60
 8009b82:	d050      	beq.n	8009c26 <HAL_TIM_ConfigClockSource+0x11a>
 8009b84:	2b60      	cmp	r3, #96	; 0x60
 8009b86:	d877      	bhi.n	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
 8009b88:	2b50      	cmp	r3, #80	; 0x50
 8009b8a:	d03c      	beq.n	8009c06 <HAL_TIM_ConfigClockSource+0xfa>
 8009b8c:	2b50      	cmp	r3, #80	; 0x50
 8009b8e:	d873      	bhi.n	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
 8009b90:	2b40      	cmp	r3, #64	; 0x40
 8009b92:	d058      	beq.n	8009c46 <HAL_TIM_ConfigClockSource+0x13a>
 8009b94:	2b40      	cmp	r3, #64	; 0x40
 8009b96:	d86f      	bhi.n	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
 8009b98:	2b30      	cmp	r3, #48	; 0x30
 8009b9a:	d064      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x15a>
 8009b9c:	2b30      	cmp	r3, #48	; 0x30
 8009b9e:	d86b      	bhi.n	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba0:	2b20      	cmp	r3, #32
 8009ba2:	d060      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x15a>
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	d867      	bhi.n	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d05c      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x15a>
 8009bac:	2b10      	cmp	r3, #16
 8009bae:	d05a      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x15a>
 8009bb0:	e062      	b.n	8009c78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	6899      	ldr	r1, [r3, #8]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f000 fb5d 	bl	800a280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	609a      	str	r2, [r3, #8]
      break;
 8009bde:	e04f      	b.n	8009c80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6818      	ldr	r0, [r3, #0]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	6899      	ldr	r1, [r3, #8]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f000 fb46 	bl	800a280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689a      	ldr	r2, [r3, #8]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c02:	609a      	str	r2, [r3, #8]
      break;
 8009c04:	e03c      	b.n	8009c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	6859      	ldr	r1, [r3, #4]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	461a      	mov	r2, r3
 8009c14:	f000 faba 	bl	800a18c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2150      	movs	r1, #80	; 0x50
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fb13 	bl	800a24a <TIM_ITRx_SetConfig>
      break;
 8009c24:	e02c      	b.n	8009c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6818      	ldr	r0, [r3, #0]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	6859      	ldr	r1, [r3, #4]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f000 fad9 	bl	800a1ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2160      	movs	r1, #96	; 0x60
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 fb03 	bl	800a24a <TIM_ITRx_SetConfig>
      break;
 8009c44:	e01c      	b.n	8009c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	6859      	ldr	r1, [r3, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f000 fa9a 	bl	800a18c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2140      	movs	r1, #64	; 0x40
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 faf3 	bl	800a24a <TIM_ITRx_SetConfig>
      break;
 8009c64:	e00c      	b.n	8009c80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4610      	mov	r0, r2
 8009c72:	f000 faea 	bl	800a24a <TIM_ITRx_SetConfig>
      break;
 8009c76:	e003      	b.n	8009c80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c7c:	e000      	b.n	8009c80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cde:	bf00      	nop
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
	...

08009cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a40      	ldr	r2, [pc, #256]	; (8009e00 <TIM_Base_SetConfig+0x114>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d013      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d0a:	d00f      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a3d      	ldr	r2, [pc, #244]	; (8009e04 <TIM_Base_SetConfig+0x118>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00b      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a3c      	ldr	r2, [pc, #240]	; (8009e08 <TIM_Base_SetConfig+0x11c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d007      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a3b      	ldr	r2, [pc, #236]	; (8009e0c <TIM_Base_SetConfig+0x120>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a3a      	ldr	r2, [pc, #232]	; (8009e10 <TIM_Base_SetConfig+0x124>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d108      	bne.n	8009d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a2f      	ldr	r2, [pc, #188]	; (8009e00 <TIM_Base_SetConfig+0x114>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d02b      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4c:	d027      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a2c      	ldr	r2, [pc, #176]	; (8009e04 <TIM_Base_SetConfig+0x118>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d023      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a2b      	ldr	r2, [pc, #172]	; (8009e08 <TIM_Base_SetConfig+0x11c>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d01f      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a2a      	ldr	r2, [pc, #168]	; (8009e0c <TIM_Base_SetConfig+0x120>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01b      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a29      	ldr	r2, [pc, #164]	; (8009e10 <TIM_Base_SetConfig+0x124>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d017      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a28      	ldr	r2, [pc, #160]	; (8009e14 <TIM_Base_SetConfig+0x128>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d013      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a27      	ldr	r2, [pc, #156]	; (8009e18 <TIM_Base_SetConfig+0x12c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d00f      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a26      	ldr	r2, [pc, #152]	; (8009e1c <TIM_Base_SetConfig+0x130>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00b      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a25      	ldr	r2, [pc, #148]	; (8009e20 <TIM_Base_SetConfig+0x134>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d007      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a24      	ldr	r2, [pc, #144]	; (8009e24 <TIM_Base_SetConfig+0x138>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d003      	beq.n	8009d9e <TIM_Base_SetConfig+0xb2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a23      	ldr	r2, [pc, #140]	; (8009e28 <TIM_Base_SetConfig+0x13c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d108      	bne.n	8009db0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a0a      	ldr	r2, [pc, #40]	; (8009e00 <TIM_Base_SetConfig+0x114>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d003      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a0c      	ldr	r2, [pc, #48]	; (8009e10 <TIM_Base_SetConfig+0x124>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d103      	bne.n	8009dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	615a      	str	r2, [r3, #20]
}
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	40010000 	.word	0x40010000
 8009e04:	40000400 	.word	0x40000400
 8009e08:	40000800 	.word	0x40000800
 8009e0c:	40000c00 	.word	0x40000c00
 8009e10:	40010400 	.word	0x40010400
 8009e14:	40014000 	.word	0x40014000
 8009e18:	40014400 	.word	0x40014400
 8009e1c:	40014800 	.word	0x40014800
 8009e20:	40001800 	.word	0x40001800
 8009e24:	40001c00 	.word	0x40001c00
 8009e28:	40002000 	.word	0x40002000

08009e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	f023 0201 	bic.w	r2, r3, #1
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 0303 	bic.w	r3, r3, #3
 8009e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f023 0302 	bic.w	r3, r3, #2
 8009e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a20      	ldr	r2, [pc, #128]	; (8009f04 <TIM_OC1_SetConfig+0xd8>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d003      	beq.n	8009e90 <TIM_OC1_SetConfig+0x64>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a1f      	ldr	r2, [pc, #124]	; (8009f08 <TIM_OC1_SetConfig+0xdc>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10c      	bne.n	8009eaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f023 0308 	bic.w	r3, r3, #8
 8009e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f023 0304 	bic.w	r3, r3, #4
 8009ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a15      	ldr	r2, [pc, #84]	; (8009f04 <TIM_OC1_SetConfig+0xd8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d003      	beq.n	8009eba <TIM_OC1_SetConfig+0x8e>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a14      	ldr	r2, [pc, #80]	; (8009f08 <TIM_OC1_SetConfig+0xdc>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d111      	bne.n	8009ede <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	621a      	str	r2, [r3, #32]
}
 8009ef8:	bf00      	nop
 8009efa:	371c      	adds	r7, #28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	40010000 	.word	0x40010000
 8009f08:	40010400 	.word	0x40010400

08009f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	f023 0210 	bic.w	r2, r3, #16
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f023 0320 	bic.w	r3, r3, #32
 8009f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a22      	ldr	r2, [pc, #136]	; (8009ff0 <TIM_OC2_SetConfig+0xe4>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d003      	beq.n	8009f74 <TIM_OC2_SetConfig+0x68>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a21      	ldr	r2, [pc, #132]	; (8009ff4 <TIM_OC2_SetConfig+0xe8>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d10d      	bne.n	8009f90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	011b      	lsls	r3, r3, #4
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a17      	ldr	r2, [pc, #92]	; (8009ff0 <TIM_OC2_SetConfig+0xe4>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d003      	beq.n	8009fa0 <TIM_OC2_SetConfig+0x94>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a16      	ldr	r2, [pc, #88]	; (8009ff4 <TIM_OC2_SetConfig+0xe8>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d113      	bne.n	8009fc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	621a      	str	r2, [r3, #32]
}
 8009fe2:	bf00      	nop
 8009fe4:	371c      	adds	r7, #28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	40010000 	.word	0x40010000
 8009ff4:	40010400 	.word	0x40010400

08009ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	4313      	orrs	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a21      	ldr	r2, [pc, #132]	; (800a0d8 <TIM_OC3_SetConfig+0xe0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d003      	beq.n	800a05e <TIM_OC3_SetConfig+0x66>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a20      	ldr	r2, [pc, #128]	; (800a0dc <TIM_OC3_SetConfig+0xe4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d10d      	bne.n	800a07a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	021b      	lsls	r3, r3, #8
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	4313      	orrs	r3, r2
 800a070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a16      	ldr	r2, [pc, #88]	; (800a0d8 <TIM_OC3_SetConfig+0xe0>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d003      	beq.n	800a08a <TIM_OC3_SetConfig+0x92>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <TIM_OC3_SetConfig+0xe4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d113      	bne.n	800a0b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	621a      	str	r2, [r3, #32]
}
 800a0cc:	bf00      	nop
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40010400 	.word	0x40010400

0800a0e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	021b      	lsls	r3, r3, #8
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	4313      	orrs	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a12a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	031b      	lsls	r3, r3, #12
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4313      	orrs	r3, r2
 800a136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a12      	ldr	r2, [pc, #72]	; (800a184 <TIM_OC4_SetConfig+0xa4>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d003      	beq.n	800a148 <TIM_OC4_SetConfig+0x68>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a11      	ldr	r2, [pc, #68]	; (800a188 <TIM_OC4_SetConfig+0xa8>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d109      	bne.n	800a15c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a14e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	019b      	lsls	r3, r3, #6
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4313      	orrs	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	621a      	str	r2, [r3, #32]
}
 800a176:	bf00      	nop
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	40010000 	.word	0x40010000
 800a188:	40010400 	.word	0x40010400

0800a18c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	f023 0201 	bic.w	r2, r3, #1
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f023 030a 	bic.w	r3, r3, #10
 800a1c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	621a      	str	r2, [r3, #32]
}
 800a1de:	bf00      	nop
 800a1e0:	371c      	adds	r7, #28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b087      	sub	sp, #28
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	60f8      	str	r0, [r7, #12]
 800a1f2:	60b9      	str	r1, [r7, #8]
 800a1f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f023 0210 	bic.w	r2, r3, #16
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	031b      	lsls	r3, r3, #12
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	621a      	str	r2, [r3, #32]
}
 800a23e:	bf00      	nop
 800a240:	371c      	adds	r7, #28
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b085      	sub	sp, #20
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4313      	orrs	r3, r2
 800a268:	f043 0307 	orr.w	r3, r3, #7
 800a26c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	609a      	str	r2, [r3, #8]
}
 800a274:	bf00      	nop
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a29a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	021a      	lsls	r2, r3, #8
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	609a      	str	r2, [r3, #8]
}
 800a2b4:	bf00      	nop
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d101      	bne.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	e05a      	b.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	4313      	orrs	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a21      	ldr	r2, [pc, #132]	; (800a39c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d022      	beq.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a324:	d01d      	beq.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a1d      	ldr	r2, [pc, #116]	; (800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d018      	beq.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a1b      	ldr	r2, [pc, #108]	; (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d013      	beq.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a1a      	ldr	r2, [pc, #104]	; (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00e      	beq.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a18      	ldr	r2, [pc, #96]	; (800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d009      	beq.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a17      	ldr	r2, [pc, #92]	; (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d004      	beq.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a15      	ldr	r2, [pc, #84]	; (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d10c      	bne.n	800a37c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	4313      	orrs	r3, r2
 800a372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	40010000 	.word	0x40010000
 800a3a0:	40000400 	.word	0x40000400
 800a3a4:	40000800 	.word	0x40000800
 800a3a8:	40000c00 	.word	0x40000c00
 800a3ac:	40010400 	.word	0x40010400
 800a3b0:	40014000 	.word	0x40014000
 800a3b4:	40001800 	.word	0x40001800

0800a3b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e03d      	b.n	800a450 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	4313      	orrs	r3, r2
 800a404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4313      	orrs	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a484:	b084      	sub	sp, #16
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	f107 001c 	add.w	r0, r7, #28
 800a492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d122      	bne.n	800a4e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a4b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d105      	bne.n	800a4d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f9c0 	bl	800a85c <USB_CoreReset>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
 800a4e0:	e01a      	b.n	800a518 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f9b4 	bl	800a85c <USB_CoreReset>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d106      	bne.n	800a50c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a502:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	639a      	str	r2, [r3, #56]	; 0x38
 800a50a:	e005      	b.n	800a518 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d10b      	bne.n	800a536 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f043 0206 	orr.w	r2, r3, #6
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f043 0220 	orr.w	r2, r3, #32
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a542:	b004      	add	sp, #16
 800a544:	4770      	bx	lr

0800a546 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f043 0201 	orr.w	r2, r3, #1
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	f023 0201 	bic.w	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	460b      	mov	r3, r1
 800a594:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5a6:	78fb      	ldrb	r3, [r7, #3]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d115      	bne.n	800a5d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5b8:	2001      	movs	r0, #1
 800a5ba:	f7f8 fd0d 	bl	8002fd8 <HAL_Delay>
      ms++;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f93a 	bl	800a83e <USB_GetMode>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d01e      	beq.n	800a60e <USB_SetCurrentMode+0x84>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b31      	cmp	r3, #49	; 0x31
 800a5d4:	d9f0      	bls.n	800a5b8 <USB_SetCurrentMode+0x2e>
 800a5d6:	e01a      	b.n	800a60e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5d8:	78fb      	ldrb	r3, [r7, #3]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d115      	bne.n	800a60a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	f7f8 fcf4 	bl	8002fd8 <HAL_Delay>
      ms++;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f921 	bl	800a83e <USB_GetMode>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d005      	beq.n	800a60e <USB_SetCurrentMode+0x84>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b31      	cmp	r3, #49	; 0x31
 800a606:	d9f0      	bls.n	800a5ea <USB_SetCurrentMode+0x60>
 800a608:	e001      	b.n	800a60e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e005      	b.n	800a61a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b32      	cmp	r3, #50	; 0x32
 800a612:	d101      	bne.n	800a618 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e000      	b.n	800a61a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3301      	adds	r3, #1
 800a636:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4a13      	ldr	r2, [pc, #76]	; (800a688 <USB_FlushTxFifo+0x64>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d901      	bls.n	800a644 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e01b      	b.n	800a67c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	daf2      	bge.n	800a632 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	019b      	lsls	r3, r3, #6
 800a654:	f043 0220 	orr.w	r2, r3, #32
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	3301      	adds	r3, #1
 800a660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4a08      	ldr	r2, [pc, #32]	; (800a688 <USB_FlushTxFifo+0x64>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d901      	bls.n	800a66e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e006      	b.n	800a67c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	2b20      	cmp	r3, #32
 800a678:	d0f0      	beq.n	800a65c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	00030d40 	.word	0x00030d40

0800a68c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3301      	adds	r3, #1
 800a69c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4a11      	ldr	r2, [pc, #68]	; (800a6e8 <USB_FlushRxFifo+0x5c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d901      	bls.n	800a6aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e018      	b.n	800a6dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	daf2      	bge.n	800a698 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2210      	movs	r2, #16
 800a6ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4a08      	ldr	r2, [pc, #32]	; (800a6e8 <USB_FlushRxFifo+0x5c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d901      	bls.n	800a6ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e006      	b.n	800a6dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b10      	cmp	r3, #16
 800a6d8:	d0f0      	beq.n	800a6bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	00030d40 	.word	0x00030d40

0800a6ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b089      	sub	sp, #36	; 0x24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	71fb      	strb	r3, [r7, #7]
 800a6fe:	4613      	mov	r3, r2
 800a700:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a70a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d123      	bne.n	800a75a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a712:	88bb      	ldrh	r3, [r7, #4]
 800a714:	3303      	adds	r3, #3
 800a716:	089b      	lsrs	r3, r3, #2
 800a718:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a71a:	2300      	movs	r3, #0
 800a71c:	61bb      	str	r3, [r7, #24]
 800a71e:	e018      	b.n	800a752 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	031a      	lsls	r2, r3, #12
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	4413      	add	r3, r2
 800a728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a72c:	461a      	mov	r2, r3
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	3301      	adds	r3, #1
 800a738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	3301      	adds	r3, #1
 800a73e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	3301      	adds	r3, #1
 800a744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	3301      	adds	r3, #1
 800a74a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	3301      	adds	r3, #1
 800a750:	61bb      	str	r3, [r7, #24]
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	429a      	cmp	r2, r3
 800a758:	d3e2      	bcc.n	800a720 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3724      	adds	r7, #36	; 0x24
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a768:	b480      	push	{r7}
 800a76a:	b08b      	sub	sp, #44	; 0x2c
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	4613      	mov	r3, r2
 800a774:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a77e:	88fb      	ldrh	r3, [r7, #6]
 800a780:	089b      	lsrs	r3, r3, #2
 800a782:	b29b      	uxth	r3, r3
 800a784:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a786:	88fb      	ldrh	r3, [r7, #6]
 800a788:	f003 0303 	and.w	r3, r3, #3
 800a78c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a78e:	2300      	movs	r3, #0
 800a790:	623b      	str	r3, [r7, #32]
 800a792:	e014      	b.n	800a7be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	623b      	str	r3, [r7, #32]
 800a7be:	6a3a      	ldr	r2, [r7, #32]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d3e6      	bcc.n	800a794 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7c6:	8bfb      	ldrh	r3, [r7, #30]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01e      	beq.n	800a80a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f107 0310 	add.w	r3, r7, #16
 800a7dc:	6812      	ldr	r2, [r2, #0]
 800a7de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	701a      	strb	r2, [r3, #0]
      i++;
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a7fe:	8bfb      	ldrh	r3, [r7, #30]
 800a800:	3b01      	subs	r3, #1
 800a802:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a804:	8bfb      	ldrh	r3, [r7, #30]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1ea      	bne.n	800a7e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	372c      	adds	r7, #44	; 0x2c
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4013      	ands	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a830:	68fb      	ldr	r3, [r7, #12]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a83e:	b480      	push	{r7}
 800a840:	b083      	sub	sp, #12
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	f003 0301 	and.w	r3, r3, #1
}
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
	...

0800a85c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	3301      	adds	r3, #1
 800a86c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4a13      	ldr	r2, [pc, #76]	; (800a8c0 <USB_CoreReset+0x64>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d901      	bls.n	800a87a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e01b      	b.n	800a8b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	daf2      	bge.n	800a868 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f043 0201 	orr.w	r2, r3, #1
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	4a09      	ldr	r2, [pc, #36]	; (800a8c0 <USB_CoreReset+0x64>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d901      	bls.n	800a8a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e006      	b.n	800a8b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d0f0      	beq.n	800a892 <USB_CoreReset+0x36>

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	00030d40 	.word	0x00030d40

0800a8c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b086      	sub	sp, #24
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a906:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a916:	2b00      	cmp	r3, #0
 800a918:	d018      	beq.n	800a94c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d10a      	bne.n	800a936 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a92e:	f043 0304 	orr.w	r3, r3, #4
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	e014      	b.n	800a960 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a944:	f023 0304 	bic.w	r3, r3, #4
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	e009      	b.n	800a960 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a95a:	f023 0304 	bic.w	r3, r3, #4
 800a95e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a960:	2110      	movs	r1, #16
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff fe5e 	bl	800a624 <USB_FlushTxFifo>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff fe8a 	bl	800a68c <USB_FlushRxFifo>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a982:	2300      	movs	r3, #0
 800a984:	613b      	str	r3, [r7, #16]
 800a986:	e015      	b.n	800a9b4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a994:	461a      	mov	r2, r3
 800a996:	f04f 33ff 	mov.w	r3, #4294967295
 800a99a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	613b      	str	r3, [r7, #16]
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d3e5      	bcc.n	800a988 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00b      	beq.n	800a9ee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a13      	ldr	r2, [pc, #76]	; (800aa30 <USB_HostInit+0x16c>)
 800a9e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a13      	ldr	r2, [pc, #76]	; (800aa34 <USB_HostInit+0x170>)
 800a9e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a9ec:	e009      	b.n	800aa02 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2280      	movs	r2, #128	; 0x80
 800a9f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a10      	ldr	r2, [pc, #64]	; (800aa38 <USB_HostInit+0x174>)
 800a9f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a0f      	ldr	r2, [pc, #60]	; (800aa3c <USB_HostInit+0x178>)
 800a9fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d105      	bne.n	800aa14 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	f043 0210 	orr.w	r2, r3, #16
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699a      	ldr	r2, [r3, #24]
 800aa18:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <USB_HostInit+0x17c>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800aa20:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa2c:	b004      	add	sp, #16
 800aa2e:	4770      	bx	lr
 800aa30:	01000200 	.word	0x01000200
 800aa34:	00e00300 	.word	0x00e00300
 800aa38:	00600080 	.word	0x00600080
 800aa3c:	004000e0 	.word	0x004000e0
 800aa40:	a3200008 	.word	0xa3200008

0800aa44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa62:	f023 0303 	bic.w	r3, r3, #3
 800aa66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d107      	bne.n	800aa96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aa92:	6053      	str	r3, [r2, #4]
 800aa94:	e009      	b.n	800aaaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800aa96:	78fb      	ldrb	r3, [r7, #3]
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d106      	bne.n	800aaaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f241 7370 	movw	r3, #6000	; 0x1770
 800aaa8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aad8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800aae8:	2064      	movs	r0, #100	; 0x64
 800aaea:	f7f8 fa75 	bl	8002fd8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aaf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aafa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800aafc:	200a      	movs	r0, #10
 800aafe:	f7f8 fa6b 	bl	8002fd8 <HAL_Delay>

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ab30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d109      	bne.n	800ab50 <USB_DriveVbus+0x44>
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d106      	bne.n	800ab50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab5a:	d109      	bne.n	800ab70 <USB_DriveVbus+0x64>
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	0c5b      	lsrs	r3, r3, #17
 800ab9c:	f003 0303 	and.w	r3, r3, #3
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	b29b      	uxth	r3, r3
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	4608      	mov	r0, r1
 800abda:	4611      	mov	r1, r2
 800abdc:	461a      	mov	r2, r3
 800abde:	4603      	mov	r3, r0
 800abe0:	70fb      	strb	r3, [r7, #3]
 800abe2:	460b      	mov	r3, r1
 800abe4:	70bb      	strb	r3, [r7, #2]
 800abe6:	4613      	mov	r3, r2
 800abe8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800abf2:	78fb      	ldrb	r3, [r7, #3]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abfe:	461a      	mov	r2, r3
 800ac00:	f04f 33ff 	mov.w	r3, #4294967295
 800ac04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ac06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d87e      	bhi.n	800ad0c <USB_HC_Init+0x13c>
 800ac0e:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <USB_HC_Init+0x44>)
 800ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac14:	0800ac25 	.word	0x0800ac25
 800ac18:	0800accf 	.word	0x0800accf
 800ac1c:	0800ac25 	.word	0x0800ac25
 800ac20:	0800ac91 	.word	0x0800ac91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac30:	461a      	mov	r2, r3
 800ac32:	f240 439d 	movw	r3, #1181	; 0x49d
 800ac36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ac38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	da10      	bge.n	800ac62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	78fa      	ldrb	r2, [r7, #3]
 800ac50:	0151      	lsls	r1, r2, #5
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	440a      	add	r2, r1
 800ac56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ac60:	e057      	b.n	800ad12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d051      	beq.n	800ad12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ac6e:	78fb      	ldrb	r3, [r7, #3]
 800ac70:	015a      	lsls	r2, r3, #5
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	78fa      	ldrb	r2, [r7, #3]
 800ac7e:	0151      	lsls	r1, r2, #5
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	440a      	add	r2, r1
 800ac84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ac8c:	60d3      	str	r3, [r2, #12]
      break;
 800ac8e:	e040      	b.n	800ad12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f240 639d 	movw	r3, #1693	; 0x69d
 800aca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da34      	bge.n	800ad16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	78fa      	ldrb	r2, [r7, #3]
 800acbc:	0151      	lsls	r1, r2, #5
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	440a      	add	r2, r1
 800acc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acca:	60d3      	str	r3, [r2, #12]
      }

      break;
 800accc:	e023      	b.n	800ad16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	015a      	lsls	r2, r3, #5
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	4413      	add	r3, r2
 800acd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acda:	461a      	mov	r2, r3
 800acdc:	f240 2325 	movw	r3, #549	; 0x225
 800ace0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ace2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	da17      	bge.n	800ad1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	78fa      	ldrb	r2, [r7, #3]
 800acfa:	0151      	lsls	r1, r2, #5
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	440a      	add	r2, r1
 800ad00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ad08:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ad0a:	e006      	b.n	800ad1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	77fb      	strb	r3, [r7, #31]
      break;
 800ad10:	e004      	b.n	800ad1c <USB_HC_Init+0x14c>
      break;
 800ad12:	bf00      	nop
 800ad14:	e002      	b.n	800ad1c <USB_HC_Init+0x14c>
      break;
 800ad16:	bf00      	nop
 800ad18:	e000      	b.n	800ad1c <USB_HC_Init+0x14c>
      break;
 800ad1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	78fa      	ldrb	r2, [r7, #3]
 800ad2c:	0151      	lsls	r1, r2, #5
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	440a      	add	r2, r1
 800ad32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad36:	f043 0302 	orr.w	r3, r3, #2
 800ad3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad42:	699a      	ldr	r2, [r3, #24]
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	f003 030f 	and.w	r3, r3, #15
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad50:	6939      	ldr	r1, [r7, #16]
 800ad52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ad56:	4313      	orrs	r3, r2
 800ad58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ad66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da03      	bge.n	800ad76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ad6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad72:	61bb      	str	r3, [r7, #24]
 800ad74:	e001      	b.n	800ad7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800ad76:	2300      	movs	r3, #0
 800ad78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff feff 	bl	800ab7e <USB_GetHostSpeed>
 800ad80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ad82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d106      	bne.n	800ad98 <USB_HC_Init+0x1c8>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d003      	beq.n	800ad98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ad90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad94:	617b      	str	r3, [r7, #20]
 800ad96:	e001      	b.n	800ad9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad9c:	787b      	ldrb	r3, [r7, #1]
 800ad9e:	059b      	lsls	r3, r3, #22
 800ada0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ada4:	78bb      	ldrb	r3, [r7, #2]
 800ada6:	02db      	lsls	r3, r3, #11
 800ada8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800adac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800adae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800adb2:	049b      	lsls	r3, r3, #18
 800adb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800adb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800adba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800adbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800adc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800adc6:	78fb      	ldrb	r3, [r7, #3]
 800adc8:	0159      	lsls	r1, r3, #5
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	440b      	add	r3, r1
 800adce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800add2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800add8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800adda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d003      	beq.n	800adea <USB_HC_Init+0x21a>
 800ade2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d10f      	bne.n	800ae0a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800adea:	78fb      	ldrb	r3, [r7, #3]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	78fa      	ldrb	r2, [r7, #3]
 800adfa:	0151      	lsls	r1, r2, #5
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	440a      	add	r2, r1
 800ae00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ae0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08c      	sub	sp, #48	; 0x30
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	785b      	ldrb	r3, [r3, #1]
 800ae2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ae2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d02d      	beq.n	800ae9a <USB_HC_StartXfer+0x86>
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	791b      	ldrb	r3, [r3, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d129      	bne.n	800ae9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800ae46:	79fb      	ldrb	r3, [r7, #7]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d117      	bne.n	800ae7c <USB_HC_StartXfer+0x68>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	79db      	ldrb	r3, [r3, #7]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <USB_HC_StartXfer+0x48>
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	79db      	ldrb	r3, [r3, #7]
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d10f      	bne.n	800ae7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	69fa      	ldr	r2, [r7, #28]
 800ae6c:	0151      	lsls	r1, r2, #5
 800ae6e:	6a3a      	ldr	r2, [r7, #32]
 800ae70:	440a      	add	r2, r1
 800ae72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10b      	bne.n	800ae9a <USB_HC_StartXfer+0x86>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	795b      	ldrb	r3, [r3, #5]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d107      	bne.n	800ae9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 fa0f 	bl	800b2b4 <USB_DoPing>
      return HAL_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e0f8      	b.n	800b08c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d018      	beq.n	800aed4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	8912      	ldrh	r2, [r2, #8]
 800aeaa:	4413      	add	r3, r2
 800aeac:	3b01      	subs	r3, #1
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	8912      	ldrh	r2, [r2, #8]
 800aeb2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeb6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800aeb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aeba:	8b7b      	ldrh	r3, [r7, #26]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d90b      	bls.n	800aed8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800aec0:	8b7b      	ldrh	r3, [r7, #26]
 800aec2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aec4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	8912      	ldrh	r2, [r2, #8]
 800aeca:	fb03 f202 	mul.w	r2, r3, r2
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	611a      	str	r2, [r3, #16]
 800aed2:	e001      	b.n	800aed8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800aed4:	2301      	movs	r3, #1
 800aed6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	78db      	ldrb	r3, [r3, #3]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d007      	beq.n	800aef0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aee0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	8912      	ldrh	r2, [r2, #8]
 800aee6:	fb03 f202 	mul.w	r2, r3, r2
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	611a      	str	r2, [r3, #16]
 800aeee:	e003      	b.n	800aef8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	695a      	ldr	r2, [r3, #20]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af02:	04d9      	lsls	r1, r3, #19
 800af04:	4b63      	ldr	r3, [pc, #396]	; (800b094 <USB_HC_StartXfer+0x280>)
 800af06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800af08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	7a9b      	ldrb	r3, [r3, #10]
 800af0e:	075b      	lsls	r3, r3, #29
 800af10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800af14:	69f9      	ldr	r1, [r7, #28]
 800af16:	0148      	lsls	r0, r1, #5
 800af18:	6a39      	ldr	r1, [r7, #32]
 800af1a:	4401      	add	r1, r0
 800af1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800af22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d009      	beq.n	800af3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	68d9      	ldr	r1, [r3, #12]
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	015a      	lsls	r2, r3, #5
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	4413      	add	r3, r2
 800af36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af3a:	460a      	mov	r2, r1
 800af3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	bf0c      	ite	eq
 800af4e:	2301      	moveq	r3, #1
 800af50:	2300      	movne	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	015a      	lsls	r2, r3, #5
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69fa      	ldr	r2, [r7, #28]
 800af66:	0151      	lsls	r1, r2, #5
 800af68:	6a3a      	ldr	r2, [r7, #32]
 800af6a:	440a      	add	r2, r1
 800af6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	7e7b      	ldrb	r3, [r7, #25]
 800af86:	075b      	lsls	r3, r3, #29
 800af88:	69f9      	ldr	r1, [r7, #28]
 800af8a:	0148      	lsls	r0, r1, #5
 800af8c:	6a39      	ldr	r1, [r7, #32]
 800af8e:	4401      	add	r1, r0
 800af90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800af94:	4313      	orrs	r3, r2
 800af96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800afae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	78db      	ldrb	r3, [r3, #3]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d004      	beq.n	800afc2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afbe:	613b      	str	r3, [r7, #16]
 800afc0:	e003      	b.n	800afca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afc8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afd0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afde:	461a      	mov	r2, r3
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800afea:	2300      	movs	r3, #0
 800afec:	e04e      	b.n	800b08c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	78db      	ldrb	r3, [r3, #3]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d149      	bne.n	800b08a <USB_HC_StartXfer+0x276>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d045      	beq.n	800b08a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	79db      	ldrb	r3, [r3, #7]
 800b002:	2b03      	cmp	r3, #3
 800b004:	d830      	bhi.n	800b068 <USB_HC_StartXfer+0x254>
 800b006:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <USB_HC_StartXfer+0x1f8>)
 800b008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00c:	0800b01d 	.word	0x0800b01d
 800b010:	0800b041 	.word	0x0800b041
 800b014:	0800b01d 	.word	0x0800b01d
 800b018:	0800b041 	.word	0x0800b041
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	3303      	adds	r3, #3
 800b022:	089b      	lsrs	r3, r3, #2
 800b024:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b026:	8afa      	ldrh	r2, [r7, #22]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	429a      	cmp	r2, r3
 800b030:	d91c      	bls.n	800b06c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	f043 0220 	orr.w	r2, r3, #32
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b03e:	e015      	b.n	800b06c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	3303      	adds	r3, #3
 800b046:	089b      	lsrs	r3, r3, #2
 800b048:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b04a:	8afa      	ldrh	r2, [r7, #22]
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	b29b      	uxth	r3, r3
 800b056:	429a      	cmp	r2, r3
 800b058:	d90a      	bls.n	800b070 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	619a      	str	r2, [r3, #24]
        }
        break;
 800b066:	e003      	b.n	800b070 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b068:	bf00      	nop
 800b06a:	e002      	b.n	800b072 <USB_HC_StartXfer+0x25e>
        break;
 800b06c:	bf00      	nop
 800b06e:	e000      	b.n	800b072 <USB_HC_StartXfer+0x25e>
        break;
 800b070:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	68d9      	ldr	r1, [r3, #12]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	785a      	ldrb	r2, [r3, #1]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	2000      	movs	r0, #0
 800b082:	9000      	str	r0, [sp, #0]
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7ff fb31 	bl	800a6ec <USB_WritePacket>
  }

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3728      	adds	r7, #40	; 0x28
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	1ff80000 	.word	0x1ff80000

0800b098 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	b29b      	uxth	r3, r3
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b089      	sub	sp, #36	; 0x24
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b0ca:	78fb      	ldrb	r3, [r7, #3]
 800b0cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	0c9b      	lsrs	r3, r3, #18
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	015a      	lsls	r2, r3, #5
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	0fdb      	lsrs	r3, r3, #31
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b20      	cmp	r3, #32
 800b108:	d104      	bne.n	800b114 <USB_HC_Halt+0x5a>
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	e0c8      	b.n	800b2a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <USB_HC_Halt+0x66>
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d163      	bne.n	800b1e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	4413      	add	r3, r2
 800b128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	0151      	lsls	r1, r2, #5
 800b132:	69fa      	ldr	r2, [r7, #28]
 800b134:	440a      	add	r2, r1
 800b136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b13a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b13e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f003 0320 	and.w	r3, r3, #32
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f040 80ab 	bne.w	800b2a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b152:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d133      	bne.n	800b1c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	4413      	add	r3, r2
 800b162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	0151      	lsls	r1, r2, #5
 800b16c:	69fa      	ldr	r2, [r7, #28]
 800b16e:	440a      	add	r2, r1
 800b170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b178:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	0151      	lsls	r1, r2, #5
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	440a      	add	r2, r1
 800b190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b198:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3301      	adds	r3, #1
 800b19e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1a6:	d81d      	bhi.n	800b1e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1be:	d0ec      	beq.n	800b19a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b1c0:	e070      	b.n	800b2a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	0151      	lsls	r1, r2, #5
 800b1d4:	69fa      	ldr	r2, [r7, #28]
 800b1d6:	440a      	add	r2, r1
 800b1d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b1e2:	e05f      	b.n	800b2a4 <USB_HC_Halt+0x1ea>
            break;
 800b1e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b1e6:	e05d      	b.n	800b2a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	0151      	lsls	r1, r2, #5
 800b1fa:	69fa      	ldr	r2, [r7, #28]
 800b1fc:	440a      	add	r2, r1
 800b1fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b206:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d133      	bne.n	800b280 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	0151      	lsls	r1, r2, #5
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	440a      	add	r2, r1
 800b22e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b236:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	0151      	lsls	r1, r2, #5
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	440a      	add	r2, r1
 800b24e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b256:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	3301      	adds	r3, #1
 800b25c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b264:	d81d      	bhi.n	800b2a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b27c:	d0ec      	beq.n	800b258 <USB_HC_Halt+0x19e>
 800b27e:	e011      	b.n	800b2a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	4413      	add	r3, r2
 800b288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69ba      	ldr	r2, [r7, #24]
 800b290:	0151      	lsls	r1, r2, #5
 800b292:	69fa      	ldr	r2, [r7, #28]
 800b294:	440a      	add	r2, r1
 800b296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b29a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	e000      	b.n	800b2a4 <USB_HC_Halt+0x1ea>
          break;
 800b2a2:	bf00      	nop
    }
  }

  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3724      	adds	r7, #36	; 0x24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b087      	sub	sp, #28
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b2c4:	78fb      	ldrb	r3, [r7, #3]
 800b2c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	04da      	lsls	r2, r3, #19
 800b2d0:	4b15      	ldr	r3, [pc, #84]	; (800b328 <USB_DoPing+0x74>)
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	0151      	lsls	r1, r2, #5
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	440a      	add	r2, r1
 800b2dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b2fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b304:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b312:	461a      	mov	r2, r3
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	371c      	adds	r7, #28
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	1ff80000 	.word	0x1ff80000

0800b32c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff f911 	bl	800a568 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b346:	2110      	movs	r1, #16
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7ff f96b 	bl	800a624 <USB_FlushTxFifo>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff f997 	bl	800a68c <USB_FlushRxFifo>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b368:	2300      	movs	r3, #0
 800b36a:	61bb      	str	r3, [r7, #24]
 800b36c:	e01f      	b.n	800b3ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	4413      	add	r3, r2
 800b376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b384:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b38c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b394:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	2b0f      	cmp	r3, #15
 800b3b2:	d9dc      	bls.n	800b36e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	61bb      	str	r3, [r7, #24]
 800b3b8:	e034      	b.n	800b424 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	015a      	lsls	r2, r3, #5
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b400:	d80c      	bhi.n	800b41c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b418:	d0ec      	beq.n	800b3f4 <USB_StopHost+0xc8>
 800b41a:	e000      	b.n	800b41e <USB_StopHost+0xf2>
        break;
 800b41c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	3301      	adds	r3, #1
 800b422:	61bb      	str	r3, [r7, #24]
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	2b0f      	cmp	r3, #15
 800b428:	d9c7      	bls.n	800b3ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b430:	461a      	mov	r2, r3
 800b432:	f04f 33ff 	mov.w	r3, #4294967295
 800b436:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f04f 32ff 	mov.w	r2, #4294967295
 800b43e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7ff f880 	bl	800a546 <USB_EnableGlobalInt>

  return ret;
 800b446:	7ffb      	ldrb	r3, [r7, #31]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b450:	b590      	push	{r4, r7, lr}
 800b452:	b089      	sub	sp, #36	; 0x24
 800b454:	af04      	add	r7, sp, #16
 800b456:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b458:	2301      	movs	r3, #1
 800b45a:	2202      	movs	r2, #2
 800b45c:	2102      	movs	r1, #2
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fc66 	bl	800bd30 <USBH_FindInterface>
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	2bff      	cmp	r3, #255	; 0xff
 800b46c:	d002      	beq.n	800b474 <USBH_CDC_InterfaceInit+0x24>
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d901      	bls.n	800b478 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b474:	2302      	movs	r3, #2
 800b476:	e13d      	b.n	800b6f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fc3b 	bl	800bcf8 <USBH_SelectInterface>
 800b482:	4603      	mov	r3, r0
 800b484:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b48c:	2302      	movs	r3, #2
 800b48e:	e131      	b.n	800b6f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b496:	2050      	movs	r0, #80	; 0x50
 800b498:	f004 ff72 	bl	8010380 <malloc>
 800b49c:	4603      	mov	r3, r0
 800b49e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	e11f      	b.n	800b6f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b4b4:	2250      	movs	r2, #80	; 0x50
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	68b8      	ldr	r0, [r7, #8]
 800b4ba:	f004 ff7f 	bl	80103bc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	211a      	movs	r1, #26
 800b4c4:	fb01 f303 	mul.w	r3, r1, r3
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	b25b      	sxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	da15      	bge.n	800b502 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	211a      	movs	r1, #26
 800b4dc:	fb01 f303 	mul.w	r3, r1, r3
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b4e6:	781a      	ldrb	r2, [r3, #0]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	211a      	movs	r1, #26
 800b4f2:	fb01 f303 	mul.w	r3, r1, r3
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b4fc:	881a      	ldrh	r2, [r3, #0]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	785b      	ldrb	r3, [r3, #1]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f001 ff2c 	bl	800d366 <USBH_AllocPipe>
 800b50e:	4603      	mov	r3, r0
 800b510:	461a      	mov	r2, r3
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	7819      	ldrb	r1, [r3, #0]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	7858      	ldrb	r0, [r3, #1]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	8952      	ldrh	r2, [r2, #10]
 800b52e:	9202      	str	r2, [sp, #8]
 800b530:	2203      	movs	r2, #3
 800b532:	9201      	str	r2, [sp, #4]
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	4623      	mov	r3, r4
 800b538:	4602      	mov	r2, r0
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 fee4 	bl	800d308 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2200      	movs	r2, #0
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f004 fe71 	bl	8010230 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b54e:	2300      	movs	r3, #0
 800b550:	2200      	movs	r2, #0
 800b552:	210a      	movs	r1, #10
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fbeb 	bl	800bd30 <USBH_FindInterface>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	2bff      	cmp	r3, #255	; 0xff
 800b562:	d002      	beq.n	800b56a <USBH_CDC_InterfaceInit+0x11a>
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d901      	bls.n	800b56e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b56a:	2302      	movs	r3, #2
 800b56c:	e0c2      	b.n	800b6f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	211a      	movs	r1, #26
 800b574:	fb01 f303 	mul.w	r3, r1, r3
 800b578:	4413      	add	r3, r2
 800b57a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	b25b      	sxtb	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	da16      	bge.n	800b5b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	211a      	movs	r1, #26
 800b58c:	fb01 f303 	mul.w	r3, r1, r3
 800b590:	4413      	add	r3, r2
 800b592:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b596:	781a      	ldrb	r2, [r3, #0]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	211a      	movs	r1, #26
 800b5a2:	fb01 f303 	mul.w	r3, r1, r3
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b5ac:	881a      	ldrh	r2, [r3, #0]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	835a      	strh	r2, [r3, #26]
 800b5b2:	e015      	b.n	800b5e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	211a      	movs	r1, #26
 800b5ba:	fb01 f303 	mul.w	r3, r1, r3
 800b5be:	4413      	add	r3, r2
 800b5c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b5c4:	781a      	ldrb	r2, [r3, #0]
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	211a      	movs	r1, #26
 800b5d0:	fb01 f303 	mul.w	r3, r1, r3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b5da:	881a      	ldrh	r2, [r3, #0]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	211a      	movs	r1, #26
 800b5e6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	b25b      	sxtb	r3, r3
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da16      	bge.n	800b626 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	211a      	movs	r1, #26
 800b5fe:	fb01 f303 	mul.w	r3, r1, r3
 800b602:	4413      	add	r3, r2
 800b604:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b608:	781a      	ldrb	r2, [r3, #0]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	211a      	movs	r1, #26
 800b614:	fb01 f303 	mul.w	r3, r1, r3
 800b618:	4413      	add	r3, r2
 800b61a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b61e:	881a      	ldrh	r2, [r3, #0]
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	835a      	strh	r2, [r3, #26]
 800b624:	e015      	b.n	800b652 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	211a      	movs	r1, #26
 800b62c:	fb01 f303 	mul.w	r3, r1, r3
 800b630:	4413      	add	r3, r2
 800b632:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b636:	781a      	ldrb	r2, [r3, #0]
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	211a      	movs	r1, #26
 800b642:	fb01 f303 	mul.w	r3, r1, r3
 800b646:	4413      	add	r3, r2
 800b648:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b64c:	881a      	ldrh	r2, [r3, #0]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	7b9b      	ldrb	r3, [r3, #14]
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 fe84 	bl	800d366 <USBH_AllocPipe>
 800b65e:	4603      	mov	r3, r0
 800b660:	461a      	mov	r2, r3
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	7bdb      	ldrb	r3, [r3, #15]
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 fe7a 	bl	800d366 <USBH_AllocPipe>
 800b672:	4603      	mov	r3, r0
 800b674:	461a      	mov	r2, r3
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	7b59      	ldrb	r1, [r3, #13]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	7b98      	ldrb	r0, [r3, #14]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	8b12      	ldrh	r2, [r2, #24]
 800b692:	9202      	str	r2, [sp, #8]
 800b694:	2202      	movs	r2, #2
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	4623      	mov	r3, r4
 800b69c:	4602      	mov	r2, r0
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f001 fe32 	bl	800d308 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	7b19      	ldrb	r1, [r3, #12]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	7bd8      	ldrb	r0, [r3, #15]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	8b52      	ldrh	r2, [r2, #26]
 800b6bc:	9202      	str	r2, [sp, #8]
 800b6be:	2202      	movs	r2, #2
 800b6c0:	9201      	str	r2, [sp, #4]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	4623      	mov	r3, r4
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f001 fe1d 	bl	800d308 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	7b5b      	ldrb	r3, [r3, #13]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f004 fda6 	bl	8010230 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	7b1b      	ldrb	r3, [r3, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f004 fd9f 	bl	8010230 <USBH_LL_SetToggle>

  return USBH_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd90      	pop	{r4, r7, pc}

0800b6fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b70a:	69db      	ldr	r3, [r3, #28]
 800b70c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00e      	beq.n	800b734 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f001 fe12 	bl	800d346 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f001 fe3d 	bl	800d3a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	7b1b      	ldrb	r3, [r3, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00e      	beq.n	800b75a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	7b1b      	ldrb	r3, [r3, #12]
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f001 fdff 	bl	800d346 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	7b1b      	ldrb	r3, [r3, #12]
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f001 fe2a 	bl	800d3a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	7b5b      	ldrb	r3, [r3, #13]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00e      	beq.n	800b780 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	7b5b      	ldrb	r3, [r3, #13]
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f001 fdec 	bl	800d346 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	7b5b      	ldrb	r3, [r3, #13]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f001 fe17 	bl	800d3a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b786:	69db      	ldr	r3, [r3, #28]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00b      	beq.n	800b7a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b792:	69db      	ldr	r3, [r3, #28]
 800b794:	4618      	mov	r0, r3
 800b796:	f004 fdfb 	bl	8010390 <free>
    phost->pActiveClass->pData = 0U;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b084      	sub	sp, #16
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3340      	adds	r3, #64	; 0x40
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f8b1 	bl	800b92e <GetLineCoding>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d105      	bne.n	800b7e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7dc:	2102      	movs	r1, #2
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b7e2:	7afb      	ldrb	r3, [r7, #11]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b802:	69db      	ldr	r3, [r3, #28]
 800b804:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b80c:	2b04      	cmp	r3, #4
 800b80e:	d877      	bhi.n	800b900 <USBH_CDC_Process+0x114>
 800b810:	a201      	add	r2, pc, #4	; (adr r2, 800b818 <USBH_CDC_Process+0x2c>)
 800b812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b816:	bf00      	nop
 800b818:	0800b82d 	.word	0x0800b82d
 800b81c:	0800b833 	.word	0x0800b833
 800b820:	0800b863 	.word	0x0800b863
 800b824:	0800b8d7 	.word	0x0800b8d7
 800b828:	0800b8e5 	.word	0x0800b8e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]
      break;
 800b830:	e06d      	b.n	800b90e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f897 	bl	800b96c <SetLineCoding>
 800b83e:	4603      	mov	r3, r0
 800b840:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b842:	7bbb      	ldrb	r3, [r7, #14]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d104      	bne.n	800b852 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	2202      	movs	r2, #2
 800b84c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b850:	e058      	b.n	800b904 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b852:	7bbb      	ldrb	r3, [r7, #14]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d055      	beq.n	800b904 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	2204      	movs	r2, #4
 800b85c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b860:	e050      	b.n	800b904 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	3340      	adds	r3, #64	; 0x40
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 f860 	bl	800b92e <GetLineCoding>
 800b86e:	4603      	mov	r3, r0
 800b870:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d126      	bne.n	800b8c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b88a:	791b      	ldrb	r3, [r3, #4]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d13b      	bne.n	800b908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b89a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d133      	bne.n	800b908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d12b      	bne.n	800b908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d124      	bne.n	800b908 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f958 	bl	800bb74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b8c4:	e020      	b.n	800b908 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b8c6:	7bbb      	ldrb	r3, [r7, #14]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d01d      	beq.n	800b908 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b8d4:	e018      	b.n	800b908 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f867 	bl	800b9aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f8da 	bl	800ba96 <CDC_ProcessReception>
      break;
 800b8e2:	e014      	b.n	800b90e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 ffef 	bl	800c8ca <USBH_ClrFeature>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10a      	bne.n	800b90c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b8fe:	e005      	b.n	800b90c <USBH_CDC_Process+0x120>

    default:
      break;
 800b900:	bf00      	nop
 800b902:	e004      	b.n	800b90e <USBH_CDC_Process+0x122>
      break;
 800b904:	bf00      	nop
 800b906:	e002      	b.n	800b90e <USBH_CDC_Process+0x122>
      break;
 800b908:	bf00      	nop
 800b90a:	e000      	b.n	800b90e <USBH_CDC_Process+0x122>
      break;
 800b90c:	bf00      	nop

  }

  return status;
 800b90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	22a1      	movs	r2, #161	; 0xa1
 800b93c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2221      	movs	r2, #33	; 0x21
 800b942:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2207      	movs	r2, #7
 800b954:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2207      	movs	r2, #7
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f001 fa81 	bl	800ce64 <USBH_CtlReq>
 800b962:	4603      	mov	r3, r0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2221      	movs	r2, #33	; 0x21
 800b97a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2220      	movs	r2, #32
 800b980:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2207      	movs	r2, #7
 800b992:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2207      	movs	r2, #7
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 fa62 	bl	800ce64 <USBH_CtlReq>
 800b9a0:	4603      	mov	r3, r0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b086      	sub	sp, #24
 800b9ae:	af02      	add	r7, sp, #8
 800b9b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d002      	beq.n	800b9d0 <CDC_ProcessTransmission+0x26>
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d023      	beq.n	800ba16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b9ce:	e05e      	b.n	800ba8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	8b12      	ldrh	r2, [r2, #24]
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d90b      	bls.n	800b9f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	69d9      	ldr	r1, [r3, #28]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	8b1a      	ldrh	r2, [r3, #24]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	7b5b      	ldrb	r3, [r3, #13]
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	9000      	str	r0, [sp, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 fc48 	bl	800d282 <USBH_BulkSendData>
 800b9f2:	e00b      	b.n	800ba0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	7b5b      	ldrb	r3, [r3, #13]
 800ba02:	2001      	movs	r0, #1
 800ba04:	9000      	str	r0, [sp, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f001 fc3b 	bl	800d282 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba14:	e03b      	b.n	800ba8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	7b5b      	ldrb	r3, [r3, #13]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f004 fbdd 	bl	80101dc <USBH_LL_GetURBState>
 800ba22:	4603      	mov	r3, r0
 800ba24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ba26:	7afb      	ldrb	r3, [r7, #11]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d128      	bne.n	800ba7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	8b12      	ldrh	r2, [r2, #24]
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d90e      	bls.n	800ba56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	8b12      	ldrh	r2, [r2, #24]
 800ba40:	1a9a      	subs	r2, r3, r2
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	8b12      	ldrh	r2, [r2, #24]
 800ba4e:	441a      	add	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	61da      	str	r2, [r3, #28]
 800ba54:	e002      	b.n	800ba5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d004      	beq.n	800ba6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba6c:	e00e      	b.n	800ba8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f868 	bl	800bb4c <USBH_CDC_TransmitCallback>
      break;
 800ba7c:	e006      	b.n	800ba8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ba7e:	7afb      	ldrb	r3, [r7, #11]
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d103      	bne.n	800ba8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba8c:	bf00      	nop
  }
}
 800ba8e:	bf00      	nop
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b086      	sub	sp, #24
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baa4:	69db      	ldr	r3, [r3, #28]
 800baa6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800baa8:	2300      	movs	r3, #0
 800baaa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	d002      	beq.n	800babc <CDC_ProcessReception+0x26>
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	d00e      	beq.n	800bad8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800baba:	e043      	b.n	800bb44 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	6a19      	ldr	r1, [r3, #32]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	8b5a      	ldrh	r2, [r3, #26]
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	7b1b      	ldrb	r3, [r3, #12]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f001 fbff 	bl	800d2cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2204      	movs	r2, #4
 800bad2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bad6:	e035      	b.n	800bb44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	7b1b      	ldrb	r3, [r3, #12]
 800badc:	4619      	mov	r1, r3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f004 fb7c 	bl	80101dc <USBH_LL_GetURBState>
 800bae4:	4603      	mov	r3, r0
 800bae6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bae8:	7cfb      	ldrb	r3, [r7, #19]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d129      	bne.n	800bb42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	7b1b      	ldrb	r3, [r3, #12]
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f004 fadf 	bl	80100b8 <USBH_LL_GetLastXferSize>
 800bafa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d016      	beq.n	800bb34 <CDC_ProcessReception+0x9e>
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	8b5b      	ldrh	r3, [r3, #26]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d910      	bls.n	800bb34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	1ad2      	subs	r2, r2, r3
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	6a1a      	ldr	r2, [r3, #32]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	441a      	add	r2, r3
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2203      	movs	r2, #3
 800bb2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bb32:	e006      	b.n	800bb42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f80f 	bl	800bb60 <USBH_CDC_ReceiveCallback>
      break;
 800bb42:	bf00      	nop
  }
}
 800bb44:	bf00      	nop
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb68:	bf00      	nop
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	4613      	mov	r3, r2
 800bb94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e029      	b.n	800bbf4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	79fa      	ldrb	r2, [r7, #7]
 800bba4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 f81f 	bl	800bbfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d003      	beq.n	800bbec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f004 f9af 	bl	800ff50 <USBH_LL_Init>

  return USBH_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	e009      	b.n	800bc22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	33e0      	adds	r3, #224	; 0xe0
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	2200      	movs	r2, #0
 800bc1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b0f      	cmp	r3, #15
 800bc26:	d9f2      	bls.n	800bc0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	e009      	b.n	800bc42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc48:	d3f1      	bcc.n	800bc2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2240      	movs	r2, #64	; 0x40
 800bc6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d016      	beq.n	800bce6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d10e      	bne.n	800bce0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bcc8:	1c59      	adds	r1, r3, #1
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	33de      	adds	r3, #222	; 0xde
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	73fb      	strb	r3, [r7, #15]
 800bcde:	e004      	b.n	800bcea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bce0:	2302      	movs	r3, #2
 800bce2:	73fb      	strb	r3, [r7, #15]
 800bce4:	e001      	b.n	800bcea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bce6:	2302      	movs	r3, #2
 800bce8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bd0e:	78fa      	ldrb	r2, [r7, #3]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d204      	bcs.n	800bd1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	78fa      	ldrb	r2, [r7, #3]
 800bd18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bd1c:	e001      	b.n	800bd22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bd1e:	2302      	movs	r3, #2
 800bd20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	4608      	mov	r0, r1
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4603      	mov	r3, r0
 800bd40:	70fb      	strb	r3, [r7, #3]
 800bd42:	460b      	mov	r3, r1
 800bd44:	70bb      	strb	r3, [r7, #2]
 800bd46:	4613      	mov	r3, r2
 800bd48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bd58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd5a:	e025      	b.n	800bda8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	221a      	movs	r2, #26
 800bd60:	fb02 f303 	mul.w	r3, r2, r3
 800bd64:	3308      	adds	r3, #8
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4413      	add	r3, r2
 800bd6a:	3302      	adds	r3, #2
 800bd6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	795b      	ldrb	r3, [r3, #5]
 800bd72:	78fa      	ldrb	r2, [r7, #3]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d002      	beq.n	800bd7e <USBH_FindInterface+0x4e>
 800bd78:	78fb      	ldrb	r3, [r7, #3]
 800bd7a:	2bff      	cmp	r3, #255	; 0xff
 800bd7c:	d111      	bne.n	800bda2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd82:	78ba      	ldrb	r2, [r7, #2]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d002      	beq.n	800bd8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd88:	78bb      	ldrb	r3, [r7, #2]
 800bd8a:	2bff      	cmp	r3, #255	; 0xff
 800bd8c:	d109      	bne.n	800bda2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd92:	787a      	ldrb	r2, [r7, #1]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d002      	beq.n	800bd9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd98:	787b      	ldrb	r3, [r7, #1]
 800bd9a:	2bff      	cmp	r3, #255	; 0xff
 800bd9c:	d101      	bne.n	800bda2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	e006      	b.n	800bdb0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
 800bda4:	3301      	adds	r3, #1
 800bda6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bda8:	7dfb      	ldrb	r3, [r7, #23]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d9d6      	bls.n	800bd5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bdae:	23ff      	movs	r3, #255	; 0xff
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	371c      	adds	r7, #28
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f004 f8ff 	bl	800ffc8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bdca:	2101      	movs	r1, #1
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f004 fa18 	bl	8010202 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bde4:	2302      	movs	r3, #2
 800bde6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bde8:	2300      	movs	r3, #0
 800bdea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d102      	bne.n	800bdfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2203      	movs	r2, #3
 800bdfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b0b      	cmp	r3, #11
 800be06:	f200 81be 	bhi.w	800c186 <USBH_Process+0x3aa>
 800be0a:	a201      	add	r2, pc, #4	; (adr r2, 800be10 <USBH_Process+0x34>)
 800be0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be10:	0800be41 	.word	0x0800be41
 800be14:	0800be73 	.word	0x0800be73
 800be18:	0800bedb 	.word	0x0800bedb
 800be1c:	0800c121 	.word	0x0800c121
 800be20:	0800c187 	.word	0x0800c187
 800be24:	0800bf7f 	.word	0x0800bf7f
 800be28:	0800c0c7 	.word	0x0800c0c7
 800be2c:	0800bfb5 	.word	0x0800bfb5
 800be30:	0800bfd5 	.word	0x0800bfd5
 800be34:	0800bff5 	.word	0x0800bff5
 800be38:	0800c039 	.word	0x0800c039
 800be3c:	0800c109 	.word	0x0800c109
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 819e 	beq.w	800c18a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800be54:	20c8      	movs	r0, #200	; 0xc8
 800be56:	f004 fa1b 	bl	8010290 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f004 f911 	bl	8010082 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be70:	e18b      	b.n	800c18a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d107      	bne.n	800be8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be8a:	e18d      	b.n	800c1a8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800be92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be96:	d914      	bls.n	800bec2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be9e:	3301      	adds	r3, #1
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d903      	bls.n	800beba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	220d      	movs	r2, #13
 800beb6:	701a      	strb	r2, [r3, #0]
      break;
 800beb8:	e176      	b.n	800c1a8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	701a      	strb	r2, [r3, #0]
      break;
 800bec0:	e172      	b.n	800c1a8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bec8:	f103 020a 	add.w	r2, r3, #10
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bed2:	200a      	movs	r0, #10
 800bed4:	f004 f9dc 	bl	8010290 <USBH_Delay>
      break;
 800bed8:	e166      	b.n	800c1a8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d005      	beq.n	800bef0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800beea:	2104      	movs	r1, #4
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bef0:	2064      	movs	r0, #100	; 0x64
 800bef2:	f004 f9cd 	bl	8010290 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f004 f89c 	bl	8010034 <USBH_LL_GetSpeed>
 800befc:	4603      	mov	r3, r0
 800befe:	461a      	mov	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2205      	movs	r2, #5
 800bf0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f001 fa29 	bl	800d366 <USBH_AllocPipe>
 800bf14:	4603      	mov	r3, r0
 800bf16:	461a      	mov	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bf1c:	2180      	movs	r1, #128	; 0x80
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f001 fa21 	bl	800d366 <USBH_AllocPipe>
 800bf24:	4603      	mov	r3, r0
 800bf26:	461a      	mov	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	7919      	ldrb	r1, [r3, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bf40:	b292      	uxth	r2, r2
 800bf42:	9202      	str	r2, [sp, #8]
 800bf44:	2200      	movs	r2, #0
 800bf46:	9201      	str	r2, [sp, #4]
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2280      	movs	r2, #128	; 0x80
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f001 f9da 	bl	800d308 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	7959      	ldrb	r1, [r3, #5]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf68:	b292      	uxth	r2, r2
 800bf6a:	9202      	str	r2, [sp, #8]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	9201      	str	r2, [sp, #4]
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	4603      	mov	r3, r0
 800bf74:	2200      	movs	r2, #0
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 f9c6 	bl	800d308 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf7c:	e114      	b.n	800c1a8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f918 	bl	800c1b4 <USBH_HandleEnum>
 800bf84:	4603      	mov	r3, r0
 800bf86:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f040 80fe 	bne.w	800c18e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d103      	bne.n	800bfac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2208      	movs	r2, #8
 800bfa8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bfaa:	e0f0      	b.n	800c18e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2207      	movs	r2, #7
 800bfb0:	701a      	strb	r2, [r3, #0]
      break;
 800bfb2:	e0ec      	b.n	800c18e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 80e9 	beq.w	800c192 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2208      	movs	r2, #8
 800bfd0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800bfd2:	e0de      	b.n	800c192 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fc2c 	bl	800c83c <USBH_SetCfg>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f040 80d5 	bne.w	800c196 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2209      	movs	r2, #9
 800bff0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bff2:	e0d0      	b.n	800c196 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bffa:	f003 0320 	and.w	r3, r3, #32
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d016      	beq.n	800c030 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c002:	2101      	movs	r1, #1
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fc3c 	bl	800c882 <USBH_SetFeature>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c00e:	7bbb      	ldrb	r3, [r7, #14]
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b00      	cmp	r3, #0
 800c014:	d103      	bne.n	800c01e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	220a      	movs	r2, #10
 800c01a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c01c:	e0bd      	b.n	800c19a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b03      	cmp	r3, #3
 800c024:	f040 80b9 	bne.w	800c19a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	220a      	movs	r2, #10
 800c02c:	701a      	strb	r2, [r3, #0]
      break;
 800c02e:	e0b4      	b.n	800c19a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	220a      	movs	r2, #10
 800c034:	701a      	strb	r2, [r3, #0]
      break;
 800c036:	e0b0      	b.n	800c19a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 80ad 	beq.w	800c19e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c04c:	2300      	movs	r3, #0
 800c04e:	73fb      	strb	r3, [r7, #15]
 800c050:	e016      	b.n	800c080 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c052:	7bfa      	ldrb	r2, [r7, #15]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	32de      	adds	r2, #222	; 0xde
 800c058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05c:	791a      	ldrb	r2, [r3, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c064:	429a      	cmp	r2, r3
 800c066:	d108      	bne.n	800c07a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c068:	7bfa      	ldrb	r2, [r7, #15]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	32de      	adds	r2, #222	; 0xde
 800c06e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c078:	e005      	b.n	800c086 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
 800c07c:	3301      	adds	r3, #1
 800c07e:	73fb      	strb	r3, [r7, #15]
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d0e5      	beq.n	800c052 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d016      	beq.n	800c0be <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	4798      	blx	r3
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d109      	bne.n	800c0b6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2206      	movs	r2, #6
 800c0a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0ae:	2103      	movs	r1, #3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0b4:	e073      	b.n	800c19e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	220d      	movs	r2, #13
 800c0ba:	701a      	strb	r2, [r3, #0]
      break;
 800c0bc:	e06f      	b.n	800c19e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	220d      	movs	r2, #13
 800c0c2:	701a      	strb	r2, [r3, #0]
      break;
 800c0c4:	e06b      	b.n	800c19e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d017      	beq.n	800c100 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	4798      	blx	r3
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d103      	bne.n	800c0f0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	220b      	movs	r2, #11
 800c0ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0ee:	e058      	b.n	800c1a2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d154      	bne.n	800c1a2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	220d      	movs	r2, #13
 800c0fc:	701a      	strb	r2, [r3, #0]
      break;
 800c0fe:	e050      	b.n	800c1a2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	220d      	movs	r2, #13
 800c104:	701a      	strb	r2, [r3, #0]
      break;
 800c106:	e04c      	b.n	800c1a2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d049      	beq.n	800c1a6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	4798      	blx	r3
      }
      break;
 800c11e:	e042      	b.n	800c1a6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f7ff fd67 	bl	800bbfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c134:	2b00      	cmp	r3, #0
 800c136:	d009      	beq.n	800c14c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c152:	2b00      	cmp	r3, #0
 800c154:	d005      	beq.n	800c162 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c15c:	2105      	movs	r1, #5
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d107      	bne.n	800c17e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7ff fe20 	bl	800bdbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c17c:	e014      	b.n	800c1a8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f003 ff22 	bl	800ffc8 <USBH_LL_Start>
      break;
 800c184:	e010      	b.n	800c1a8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c186:	bf00      	nop
 800c188:	e00e      	b.n	800c1a8 <USBH_Process+0x3cc>
      break;
 800c18a:	bf00      	nop
 800c18c:	e00c      	b.n	800c1a8 <USBH_Process+0x3cc>
      break;
 800c18e:	bf00      	nop
 800c190:	e00a      	b.n	800c1a8 <USBH_Process+0x3cc>
    break;
 800c192:	bf00      	nop
 800c194:	e008      	b.n	800c1a8 <USBH_Process+0x3cc>
      break;
 800c196:	bf00      	nop
 800c198:	e006      	b.n	800c1a8 <USBH_Process+0x3cc>
      break;
 800c19a:	bf00      	nop
 800c19c:	e004      	b.n	800c1a8 <USBH_Process+0x3cc>
      break;
 800c19e:	bf00      	nop
 800c1a0:	e002      	b.n	800c1a8 <USBH_Process+0x3cc>
      break;
 800c1a2:	bf00      	nop
 800c1a4:	e000      	b.n	800c1a8 <USBH_Process+0x3cc>
      break;
 800c1a6:	bf00      	nop
  }
  return USBH_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop

0800c1b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af04      	add	r7, sp, #16
 800c1ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	785b      	ldrb	r3, [r3, #1]
 800c1c8:	2b07      	cmp	r3, #7
 800c1ca:	f200 81c1 	bhi.w	800c550 <USBH_HandleEnum+0x39c>
 800c1ce:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <USBH_HandleEnum+0x20>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c1f5 	.word	0x0800c1f5
 800c1d8:	0800c2b3 	.word	0x0800c2b3
 800c1dc:	0800c31d 	.word	0x0800c31d
 800c1e0:	0800c3ab 	.word	0x0800c3ab
 800c1e4:	0800c415 	.word	0x0800c415
 800c1e8:	0800c485 	.word	0x0800c485
 800c1ec:	0800c4cb 	.word	0x0800c4cb
 800c1f0:	0800c511 	.word	0x0800c511
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c1f4:	2108      	movs	r1, #8
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fa50 	bl	800c69c <USBH_Get_DevDesc>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c200:	7bbb      	ldrb	r3, [r7, #14]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d130      	bne.n	800c268 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7919      	ldrb	r1, [r3, #4]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c22a:	b292      	uxth	r2, r2
 800c22c:	9202      	str	r2, [sp, #8]
 800c22e:	2200      	movs	r2, #0
 800c230:	9201      	str	r2, [sp, #4]
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4603      	mov	r3, r0
 800c236:	2280      	movs	r2, #128	; 0x80
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f001 f865 	bl	800d308 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7959      	ldrb	r1, [r3, #5]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c252:	b292      	uxth	r2, r2
 800c254:	9202      	str	r2, [sp, #8]
 800c256:	2200      	movs	r2, #0
 800c258:	9201      	str	r2, [sp, #4]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	4603      	mov	r3, r0
 800c25e:	2200      	movs	r2, #0
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f001 f851 	bl	800d308 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c266:	e175      	b.n	800c554 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	f040 8172 	bne.w	800c554 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c276:	3301      	adds	r3, #1
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c286:	2b03      	cmp	r3, #3
 800c288:	d903      	bls.n	800c292 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	220d      	movs	r2, #13
 800c28e:	701a      	strb	r2, [r3, #0]
      break;
 800c290:	e160      	b.n	800c554 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	795b      	ldrb	r3, [r3, #5]
 800c296:	4619      	mov	r1, r3
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f001 f885 	bl	800d3a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	791b      	ldrb	r3, [r3, #4]
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f001 f87f 	bl	800d3a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	701a      	strb	r2, [r3, #0]
      break;
 800c2b0:	e150      	b.n	800c554 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c2b2:	2112      	movs	r1, #18
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f9f1 	bl	800c69c <USBH_Get_DevDesc>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c2be:	7bbb      	ldrb	r3, [r7, #14]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d103      	bne.n	800c2cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2202      	movs	r2, #2
 800c2c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c2ca:	e145      	b.n	800c558 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	f040 8142 	bne.w	800c558 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2da:	3301      	adds	r3, #1
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d903      	bls.n	800c2f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	220d      	movs	r2, #13
 800c2f2:	701a      	strb	r2, [r3, #0]
      break;
 800c2f4:	e130      	b.n	800c558 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	795b      	ldrb	r3, [r3, #5]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f001 f853 	bl	800d3a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	791b      	ldrb	r3, [r3, #4]
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 f84d 	bl	800d3a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	701a      	strb	r2, [r3, #0]
      break;
 800c31a:	e11d      	b.n	800c558 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c31c:	2101      	movs	r1, #1
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fa68 	bl	800c7f4 <USBH_SetAddress>
 800c324:	4603      	mov	r3, r0
 800c326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c328:	7bbb      	ldrb	r3, [r7, #14]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d132      	bne.n	800c394 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c32e:	2002      	movs	r0, #2
 800c330:	f003 ffae 	bl	8010290 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2203      	movs	r2, #3
 800c340:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	7919      	ldrb	r1, [r3, #4]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c356:	b292      	uxth	r2, r2
 800c358:	9202      	str	r2, [sp, #8]
 800c35a:	2200      	movs	r2, #0
 800c35c:	9201      	str	r2, [sp, #4]
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	4603      	mov	r3, r0
 800c362:	2280      	movs	r2, #128	; 0x80
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 ffcf 	bl	800d308 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	7959      	ldrb	r1, [r3, #5]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c37e:	b292      	uxth	r2, r2
 800c380:	9202      	str	r2, [sp, #8]
 800c382:	2200      	movs	r2, #0
 800c384:	9201      	str	r2, [sp, #4]
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	4603      	mov	r3, r0
 800c38a:	2200      	movs	r2, #0
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 ffbb 	bl	800d308 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c392:	e0e3      	b.n	800c55c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	2b03      	cmp	r3, #3
 800c398:	f040 80e0 	bne.w	800c55c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	220d      	movs	r2, #13
 800c3a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	705a      	strb	r2, [r3, #1]
      break;
 800c3a8:	e0d8      	b.n	800c55c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c3aa:	2109      	movs	r1, #9
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f99d 	bl	800c6ec <USBH_Get_CfgDesc>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c3b6:	7bbb      	ldrb	r3, [r7, #14]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d103      	bne.n	800c3c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2204      	movs	r2, #4
 800c3c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c3c2:	e0cd      	b.n	800c560 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	f040 80ca 	bne.w	800c560 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d903      	bls.n	800c3ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	220d      	movs	r2, #13
 800c3ea:	701a      	strb	r2, [r3, #0]
      break;
 800c3ec:	e0b8      	b.n	800c560 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	795b      	ldrb	r3, [r3, #5]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 ffd7 	bl	800d3a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	791b      	ldrb	r3, [r3, #4]
 800c3fe:	4619      	mov	r1, r3
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 ffd1 	bl	800d3a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	701a      	strb	r2, [r3, #0]
      break;
 800c412:	e0a5      	b.n	800c560 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f965 	bl	800c6ec <USBH_Get_CfgDesc>
 800c422:	4603      	mov	r3, r0
 800c424:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c426:	7bbb      	ldrb	r3, [r7, #14]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d103      	bne.n	800c434 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2205      	movs	r2, #5
 800c430:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c432:	e097      	b.n	800c564 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	2b03      	cmp	r3, #3
 800c438:	f040 8094 	bne.w	800c564 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c442:	3301      	adds	r3, #1
 800c444:	b2da      	uxtb	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c452:	2b03      	cmp	r3, #3
 800c454:	d903      	bls.n	800c45e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	220d      	movs	r2, #13
 800c45a:	701a      	strb	r2, [r3, #0]
      break;
 800c45c:	e082      	b.n	800c564 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	795b      	ldrb	r3, [r3, #5]
 800c462:	4619      	mov	r1, r3
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 ff9f 	bl	800d3a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	791b      	ldrb	r3, [r3, #4]
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 ff99 	bl	800d3a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	701a      	strb	r2, [r3, #0]
      break;
 800c482:	e06f      	b.n	800c564 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d019      	beq.n	800c4c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c49a:	23ff      	movs	r3, #255	; 0xff
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f949 	bl	800c734 <USBH_Get_StringDesc>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d103      	bne.n	800c4b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2206      	movs	r2, #6
 800c4b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c4b2:	e059      	b.n	800c568 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4b4:	7bbb      	ldrb	r3, [r7, #14]
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d156      	bne.n	800c568 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2206      	movs	r2, #6
 800c4be:	705a      	strb	r2, [r3, #1]
      break;
 800c4c0:	e052      	b.n	800c568 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2206      	movs	r2, #6
 800c4c6:	705a      	strb	r2, [r3, #1]
      break;
 800c4c8:	e04e      	b.n	800c568 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d019      	beq.n	800c508 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c4e0:	23ff      	movs	r3, #255	; 0xff
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 f926 	bl	800c734 <USBH_Get_StringDesc>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c4ec:	7bbb      	ldrb	r3, [r7, #14]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d103      	bne.n	800c4fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2207      	movs	r2, #7
 800c4f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c4f8:	e038      	b.n	800c56c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4fa:	7bbb      	ldrb	r3, [r7, #14]
 800c4fc:	2b03      	cmp	r3, #3
 800c4fe:	d135      	bne.n	800c56c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2207      	movs	r2, #7
 800c504:	705a      	strb	r2, [r3, #1]
      break;
 800c506:	e031      	b.n	800c56c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2207      	movs	r2, #7
 800c50c:	705a      	strb	r2, [r3, #1]
      break;
 800c50e:	e02d      	b.n	800c56c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c516:	2b00      	cmp	r3, #0
 800c518:	d017      	beq.n	800c54a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c526:	23ff      	movs	r3, #255	; 0xff
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f903 	bl	800c734 <USBH_Get_StringDesc>
 800c52e:	4603      	mov	r3, r0
 800c530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c532:	7bbb      	ldrb	r3, [r7, #14]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c538:	2300      	movs	r3, #0
 800c53a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c53c:	e018      	b.n	800c570 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
 800c540:	2b03      	cmp	r3, #3
 800c542:	d115      	bne.n	800c570 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	73fb      	strb	r3, [r7, #15]
      break;
 800c548:	e012      	b.n	800c570 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	73fb      	strb	r3, [r7, #15]
      break;
 800c54e:	e00f      	b.n	800c570 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c550:	bf00      	nop
 800c552:	e00e      	b.n	800c572 <USBH_HandleEnum+0x3be>
      break;
 800c554:	bf00      	nop
 800c556:	e00c      	b.n	800c572 <USBH_HandleEnum+0x3be>
      break;
 800c558:	bf00      	nop
 800c55a:	e00a      	b.n	800c572 <USBH_HandleEnum+0x3be>
      break;
 800c55c:	bf00      	nop
 800c55e:	e008      	b.n	800c572 <USBH_HandleEnum+0x3be>
      break;
 800c560:	bf00      	nop
 800c562:	e006      	b.n	800c572 <USBH_HandleEnum+0x3be>
      break;
 800c564:	bf00      	nop
 800c566:	e004      	b.n	800c572 <USBH_HandleEnum+0x3be>
      break;
 800c568:	bf00      	nop
 800c56a:	e002      	b.n	800c572 <USBH_HandleEnum+0x3be>
      break;
 800c56c:	bf00      	nop
 800c56e:	e000      	b.n	800c572 <USBH_HandleEnum+0x3be>
      break;
 800c570:	bf00      	nop
  }
  return Status;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c58e:	bf00      	nop
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f804 	bl	800c5be <USBH_HandleSof>
}
 800c5b6:	bf00      	nop
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b0b      	cmp	r3, #11
 800c5ce:	d10a      	bne.n	800c5e6 <USBH_HandleSof+0x28>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d005      	beq.n	800c5e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	4798      	blx	r3
  }
}
 800c5e6:	bf00      	nop
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c5fe:	bf00      	nop
}
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c61a:	bf00      	nop
}
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c626:	b480      	push	{r7}
 800c628:	b083      	sub	sp, #12
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f003 fcc2 	bl	800fffe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	791b      	ldrb	r3, [r3, #4]
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fe91 	bl	800d3a8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	795b      	ldrb	r3, [r3, #5]
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fe8b 	bl	800d3a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c6ae:	78fb      	ldrb	r3, [r7, #3]
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f864 	bl	800c78a <USBH_GetDescriptor>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10a      	bne.n	800c6e2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6d8:	78fa      	ldrb	r2, [r7, #3]
 800c6da:	b292      	uxth	r2, r2
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f000 f918 	bl	800c912 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af02      	add	r7, sp, #8
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	331c      	adds	r3, #28
 800c6fc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c6fe:	887b      	ldrh	r3, [r7, #2]
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c708:	2100      	movs	r1, #0
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f83d 	bl	800c78a <USBH_GetDescriptor>
 800c710:	4603      	mov	r3, r0
 800c712:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d107      	bne.n	800c72a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c71a:	887b      	ldrh	r3, [r7, #2]
 800c71c:	461a      	mov	r2, r3
 800c71e:	68b9      	ldr	r1, [r7, #8]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 f987 	bl	800ca34 <USBH_ParseCfgDesc>
 800c726:	4603      	mov	r3, r0
 800c728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b088      	sub	sp, #32
 800c738:	af02      	add	r7, sp, #8
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	607a      	str	r2, [r7, #4]
 800c73e:	461a      	mov	r2, r3
 800c740:	460b      	mov	r3, r1
 800c742:	72fb      	strb	r3, [r7, #11]
 800c744:	4613      	mov	r3, r2
 800c746:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c748:	7afb      	ldrb	r3, [r7, #11]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c750:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c758:	893b      	ldrh	r3, [r7, #8]
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	460b      	mov	r3, r1
 800c75e:	2100      	movs	r1, #0
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f000 f812 	bl	800c78a <USBH_GetDescriptor>
 800c766:	4603      	mov	r3, r0
 800c768:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d107      	bne.n	800c780 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c776:	893a      	ldrh	r2, [r7, #8]
 800c778:	6879      	ldr	r1, [r7, #4]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 fb24 	bl	800cdc8 <USBH_ParseStringDesc>
  }

  return status;
 800c780:	7dfb      	ldrb	r3, [r7, #23]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b084      	sub	sp, #16
 800c78e:	af00      	add	r7, sp, #0
 800c790:	60f8      	str	r0, [r7, #12]
 800c792:	607b      	str	r3, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	72fb      	strb	r3, [r7, #11]
 800c798:	4613      	mov	r3, r2
 800c79a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	789b      	ldrb	r3, [r3, #2]
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d11c      	bne.n	800c7de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c7a4:	7afb      	ldrb	r3, [r7, #11]
 800c7a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2206      	movs	r2, #6
 800c7b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	893a      	ldrh	r2, [r7, #8]
 800c7ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c7bc:	893b      	ldrh	r3, [r7, #8]
 800c7be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c7c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7c6:	d104      	bne.n	800c7d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f240 4209 	movw	r2, #1033	; 0x409
 800c7ce:	829a      	strh	r2, [r3, #20]
 800c7d0:	e002      	b.n	800c7d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	8b3a      	ldrh	r2, [r7, #24]
 800c7dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c7de:	8b3b      	ldrh	r3, [r7, #24]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	6879      	ldr	r1, [r7, #4]
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 fb3d 	bl	800ce64 <USBH_CtlReq>
 800c7ea:	4603      	mov	r3, r0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	789b      	ldrb	r3, [r3, #2]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d10f      	bne.n	800c828 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2205      	movs	r2, #5
 800c812:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	b29a      	uxth	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c828:	2200      	movs	r2, #0
 800c82a:	2100      	movs	r1, #0
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 fb19 	bl	800ce64 <USBH_CtlReq>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	789b      	ldrb	r3, [r3, #2]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d10e      	bne.n	800c86e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2209      	movs	r2, #9
 800c85a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	887a      	ldrh	r2, [r7, #2]
 800c860:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c86e:	2200      	movs	r2, #0
 800c870:	2100      	movs	r1, #0
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 faf6 	bl	800ce64 <USBH_CtlReq>
 800c878:	4603      	mov	r3, r0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b082      	sub	sp, #8
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	460b      	mov	r3, r1
 800c88c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	789b      	ldrb	r3, [r3, #2]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d10f      	bne.n	800c8b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2203      	movs	r2, #3
 800c8a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c8a2:	78fb      	ldrb	r3, [r7, #3]
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fad2 	bl	800ce64 <USBH_CtlReq>
 800c8c0:	4603      	mov	r3, r0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b082      	sub	sp, #8
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	789b      	ldrb	r3, [r3, #2]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d10f      	bne.n	800c8fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c8f0:	78fb      	ldrb	r3, [r7, #3]
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c8fe:	2200      	movs	r2, #0
 800c900:	2100      	movs	r1, #0
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 faae 	bl	800ce64 <USBH_CtlReq>
 800c908:	4603      	mov	r3, r0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c912:	b480      	push	{r7}
 800c914:	b085      	sub	sp, #20
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	4613      	mov	r3, r2
 800c91e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	781a      	ldrb	r2, [r3, #0]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	785a      	ldrb	r2, [r3, #1]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	3302      	adds	r3, #2
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	b29a      	uxth	r2, r3
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	3303      	adds	r3, #3
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	b29b      	uxth	r3, r3
 800c940:	021b      	lsls	r3, r3, #8
 800c942:	b29b      	uxth	r3, r3
 800c944:	4313      	orrs	r3, r2
 800c946:	b29a      	uxth	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	791a      	ldrb	r2, [r3, #4]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	795a      	ldrb	r2, [r3, #5]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	799a      	ldrb	r2, [r3, #6]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	79da      	ldrb	r2, [r3, #7]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	79db      	ldrb	r3, [r3, #7]
 800c970:	2b20      	cmp	r3, #32
 800c972:	dc11      	bgt.n	800c998 <USBH_ParseDevDesc+0x86>
 800c974:	2b08      	cmp	r3, #8
 800c976:	db16      	blt.n	800c9a6 <USBH_ParseDevDesc+0x94>
 800c978:	3b08      	subs	r3, #8
 800c97a:	2201      	movs	r2, #1
 800c97c:	fa02 f303 	lsl.w	r3, r2, r3
 800c980:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	bf14      	ite	ne
 800c98c:	2301      	movne	r3, #1
 800c98e:	2300      	moveq	r3, #0
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	d102      	bne.n	800c99c <USBH_ParseDevDesc+0x8a>
 800c996:	e006      	b.n	800c9a6 <USBH_ParseDevDesc+0x94>
 800c998:	2b40      	cmp	r3, #64	; 0x40
 800c99a:	d104      	bne.n	800c9a6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	79da      	ldrb	r2, [r3, #7]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	71da      	strb	r2, [r3, #7]
      break;
 800c9a4:	e003      	b.n	800c9ae <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2240      	movs	r2, #64	; 0x40
 800c9aa:	71da      	strb	r2, [r3, #7]
      break;
 800c9ac:	bf00      	nop
  }

  if (length > 8U)
 800c9ae:	88fb      	ldrh	r3, [r7, #6]
 800c9b0:	2b08      	cmp	r3, #8
 800c9b2:	d939      	bls.n	800ca28 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	3308      	adds	r3, #8
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	3309      	adds	r3, #9
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	330a      	adds	r3, #10
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	330b      	adds	r3, #11
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	021b      	lsls	r3, r3, #8
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	330c      	adds	r3, #12
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	330d      	adds	r3, #13
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	021b      	lsls	r3, r3, #8
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	4313      	orrs	r3, r2
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	7b9a      	ldrb	r2, [r3, #14]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	7bda      	ldrb	r2, [r3, #15]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	7c1a      	ldrb	r2, [r3, #16]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	7c5a      	ldrb	r2, [r3, #17]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	745a      	strb	r2, [r3, #17]
  }
}
 800ca28:	bf00      	nop
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08c      	sub	sp, #48	; 0x30
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ca48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ca54:	2300      	movs	r3, #0
 800ca56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	781a      	ldrb	r2, [r3, #0]
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	785a      	ldrb	r2, [r3, #1]
 800ca70:	6a3b      	ldr	r3, [r7, #32]
 800ca72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	3302      	adds	r3, #2
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	3303      	adds	r3, #3
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	021b      	lsls	r3, r3, #8
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca90:	bf28      	it	cs
 800ca92:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	6a3b      	ldr	r3, [r7, #32]
 800ca9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	791a      	ldrb	r2, [r3, #4]
 800caa0:	6a3b      	ldr	r3, [r7, #32]
 800caa2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	795a      	ldrb	r2, [r3, #5]
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	799a      	ldrb	r2, [r3, #6]
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	79da      	ldrb	r2, [r3, #7]
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	7a1a      	ldrb	r2, [r3, #8]
 800cac0:	6a3b      	ldr	r3, [r7, #32]
 800cac2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800cac4:	6a3b      	ldr	r3, [r7, #32]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	2b09      	cmp	r3, #9
 800caca:	d002      	beq.n	800cad2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	2209      	movs	r2, #9
 800cad0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cad2:	88fb      	ldrh	r3, [r7, #6]
 800cad4:	2b09      	cmp	r3, #9
 800cad6:	f240 809d 	bls.w	800cc14 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800cada:	2309      	movs	r3, #9
 800cadc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cade:	2300      	movs	r3, #0
 800cae0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cae2:	e081      	b.n	800cbe8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cae4:	f107 0316 	add.w	r3, r7, #22
 800cae8:	4619      	mov	r1, r3
 800caea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caec:	f000 f99f 	bl	800ce2e <USBH_GetNextDesc>
 800caf0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	785b      	ldrb	r3, [r3, #1]
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	d176      	bne.n	800cbe8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	2b09      	cmp	r3, #9
 800cb00:	d002      	beq.n	800cb08 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	2209      	movs	r2, #9
 800cb06:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800cb08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb0c:	221a      	movs	r2, #26
 800cb0e:	fb02 f303 	mul.w	r3, r2, r3
 800cb12:	3308      	adds	r3, #8
 800cb14:	6a3a      	ldr	r2, [r7, #32]
 800cb16:	4413      	add	r3, r2
 800cb18:	3302      	adds	r3, #2
 800cb1a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cb1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb1e:	69f8      	ldr	r0, [r7, #28]
 800cb20:	f000 f87e 	bl	800cc20 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cb24:	2300      	movs	r3, #0
 800cb26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cb2e:	e043      	b.n	800cbb8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cb30:	f107 0316 	add.w	r3, r7, #22
 800cb34:	4619      	mov	r1, r3
 800cb36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb38:	f000 f979 	bl	800ce2e <USBH_GetNextDesc>
 800cb3c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	785b      	ldrb	r3, [r3, #1]
 800cb42:	2b05      	cmp	r3, #5
 800cb44:	d138      	bne.n	800cbb8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	795b      	ldrb	r3, [r3, #5]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d10f      	bne.n	800cb6e <USBH_ParseCfgDesc+0x13a>
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	799b      	ldrb	r3, [r3, #6]
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d10b      	bne.n	800cb6e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	79db      	ldrb	r3, [r3, #7]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10f      	bne.n	800cb7e <USBH_ParseCfgDesc+0x14a>
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	2b09      	cmp	r3, #9
 800cb64:	d00b      	beq.n	800cb7e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	2209      	movs	r2, #9
 800cb6a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb6c:	e007      	b.n	800cb7e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2b07      	cmp	r3, #7
 800cb74:	d004      	beq.n	800cb80 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb78:	2207      	movs	r2, #7
 800cb7a:	701a      	strb	r2, [r3, #0]
 800cb7c:	e000      	b.n	800cb80 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb7e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cb80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cb88:	3201      	adds	r2, #1
 800cb8a:	00d2      	lsls	r2, r2, #3
 800cb8c:	211a      	movs	r1, #26
 800cb8e:	fb01 f303 	mul.w	r3, r1, r3
 800cb92:	4413      	add	r3, r2
 800cb94:	3308      	adds	r3, #8
 800cb96:	6a3a      	ldr	r2, [r7, #32]
 800cb98:	4413      	add	r3, r2
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cb9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cba0:	69b9      	ldr	r1, [r7, #24]
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 f86b 	bl	800cc7e <USBH_ParseEPDesc>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800cbae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	791b      	ldrb	r3, [r3, #4]
 800cbbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d204      	bcs.n	800cbce <USBH_ParseCfgDesc+0x19a>
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
 800cbc6:	885a      	ldrh	r2, [r3, #2]
 800cbc8:	8afb      	ldrh	r3, [r7, #22]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d8b0      	bhi.n	800cb30 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	791b      	ldrb	r3, [r3, #4]
 800cbd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d201      	bcs.n	800cbde <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800cbda:	2303      	movs	r3, #3
 800cbdc:	e01c      	b.n	800cc18 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800cbde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d805      	bhi.n	800cbfc <USBH_ParseCfgDesc+0x1c8>
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	885a      	ldrh	r2, [r3, #2]
 800cbf4:	8afb      	ldrh	r3, [r7, #22]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	f63f af74 	bhi.w	800cae4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cbfc:	6a3b      	ldr	r3, [r7, #32]
 800cbfe:	791b      	ldrb	r3, [r3, #4]
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	bf28      	it	cs
 800cc04:	2302      	movcs	r3, #2
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d201      	bcs.n	800cc14 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e001      	b.n	800cc18 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800cc14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3730      	adds	r7, #48	; 0x30
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	781a      	ldrb	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	785a      	ldrb	r2, [r3, #1]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	789a      	ldrb	r2, [r3, #2]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	78da      	ldrb	r2, [r3, #3]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	791a      	ldrb	r2, [r3, #4]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	795a      	ldrb	r2, [r3, #5]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	799a      	ldrb	r2, [r3, #6]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	79da      	ldrb	r2, [r3, #7]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	7a1a      	ldrb	r2, [r3, #8]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	721a      	strb	r2, [r3, #8]
}
 800cc72:	bf00      	nop
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800cc7e:	b480      	push	{r7}
 800cc80:	b087      	sub	sp, #28
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	60f8      	str	r0, [r7, #12]
 800cc86:	60b9      	str	r1, [r7, #8]
 800cc88:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	781a      	ldrb	r2, [r3, #0]
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	785a      	ldrb	r2, [r3, #1]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	789a      	ldrb	r2, [r3, #2]
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	78da      	ldrb	r2, [r3, #3]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	3305      	adds	r3, #5
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	021b      	lsls	r3, r3, #8
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	799a      	ldrb	r2, [r3, #6]
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	889b      	ldrh	r3, [r3, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d102      	bne.n	800cce0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	75fb      	strb	r3, [r7, #23]
 800ccde:	e033      	b.n	800cd48 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	889b      	ldrh	r3, [r3, #4]
 800cce4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cce8:	f023 0307 	bic.w	r3, r3, #7
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	889b      	ldrh	r3, [r3, #4]
 800ccf6:	b21a      	sxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	b299      	uxth	r1, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3305      	adds	r3, #5
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	021b      	lsls	r3, r3, #8
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	430b      	orrs	r3, r1
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d110      	bne.n	800cd3a <USBH_ParseEPDesc+0xbc>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	b299      	uxth	r1, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	3305      	adds	r3, #5
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	021b      	lsls	r3, r3, #8
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	430b      	orrs	r3, r1
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	b21b      	sxth	r3, r3
 800cd32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd36:	b21b      	sxth	r3, r3
 800cd38:	e001      	b.n	800cd3e <USBH_ParseEPDesc+0xc0>
 800cd3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	b21b      	sxth	r3, r3
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d116      	bne.n	800cd80 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	78db      	ldrb	r3, [r3, #3]
 800cd56:	f003 0303 	and.w	r3, r3, #3
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d005      	beq.n	800cd6a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	78db      	ldrb	r3, [r3, #3]
 800cd62:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d127      	bne.n	800cdba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	799b      	ldrb	r3, [r3, #6]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d003      	beq.n	800cd7a <USBH_ParseEPDesc+0xfc>
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	799b      	ldrb	r3, [r3, #6]
 800cd76:	2b10      	cmp	r3, #16
 800cd78:	d91f      	bls.n	800cdba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	75fb      	strb	r3, [r7, #23]
 800cd7e:	e01c      	b.n	800cdba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	78db      	ldrb	r3, [r3, #3]
 800cd84:	f003 0303 	and.w	r3, r3, #3
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d10a      	bne.n	800cda2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	799b      	ldrb	r3, [r3, #6]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <USBH_ParseEPDesc+0x11e>
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	799b      	ldrb	r3, [r3, #6]
 800cd98:	2b10      	cmp	r3, #16
 800cd9a:	d90e      	bls.n	800cdba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd9c:	2303      	movs	r3, #3
 800cd9e:	75fb      	strb	r3, [r7, #23]
 800cda0:	e00b      	b.n	800cdba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	78db      	ldrb	r3, [r3, #3]
 800cda6:	f003 0303 	and.w	r3, r3, #3
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	d105      	bne.n	800cdba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	799b      	ldrb	r3, [r3, #6]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	371c      	adds	r7, #28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	2b03      	cmp	r3, #3
 800cdde:	d120      	bne.n	800ce22 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	1e9a      	subs	r2, r3, #2
 800cde6:	88fb      	ldrh	r3, [r7, #6]
 800cde8:	4293      	cmp	r3, r2
 800cdea:	bf28      	it	cs
 800cdec:	4613      	movcs	r3, r2
 800cdee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3302      	adds	r3, #2
 800cdf4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	82fb      	strh	r3, [r7, #22]
 800cdfa:	e00b      	b.n	800ce14 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cdfc:	8afb      	ldrh	r3, [r7, #22]
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	4413      	add	r3, r2
 800ce02:	781a      	ldrb	r2, [r3, #0]
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ce0e:	8afb      	ldrh	r3, [r7, #22]
 800ce10:	3302      	adds	r3, #2
 800ce12:	82fb      	strh	r3, [r7, #22]
 800ce14:	8afa      	ldrh	r2, [r7, #22]
 800ce16:	8abb      	ldrh	r3, [r7, #20]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d3ef      	bcc.n	800cdfc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	701a      	strb	r2, [r3, #0]
  }
}
 800ce22:	bf00      	nop
 800ce24:	371c      	adds	r7, #28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b085      	sub	sp, #20
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	881a      	ldrh	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	4413      	add	r3, r2
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4413      	add	r3, r2
 800ce54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce56:	68fb      	ldr	r3, [r7, #12]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ce72:	2301      	movs	r3, #1
 800ce74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	789b      	ldrb	r3, [r3, #2]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d002      	beq.n	800ce84 <USBH_CtlReq+0x20>
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d00f      	beq.n	800cea2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ce82:	e027      	b.n	800ced4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	88fa      	ldrh	r2, [r7, #6]
 800ce8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2201      	movs	r2, #1
 800ce94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2202      	movs	r2, #2
 800ce9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	75fb      	strb	r3, [r7, #23]
      break;
 800cea0:	e018      	b.n	800ced4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 f81c 	bl	800cee0 <USBH_HandleControl>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d002      	beq.n	800ceb8 <USBH_CtlReq+0x54>
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
 800ceb4:	2b03      	cmp	r3, #3
 800ceb6:	d106      	bne.n	800cec6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2201      	movs	r2, #1
 800cebc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	761a      	strb	r2, [r3, #24]
      break;
 800cec4:	e005      	b.n	800ced2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d102      	bne.n	800ced2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2201      	movs	r2, #1
 800ced0:	709a      	strb	r2, [r3, #2]
      break;
 800ced2:	bf00      	nop
  }
  return status;
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3718      	adds	r7, #24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
	...

0800cee0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af02      	add	r7, sp, #8
 800cee6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cee8:	2301      	movs	r3, #1
 800ceea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	7e1b      	ldrb	r3, [r3, #24]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	2b0a      	cmp	r3, #10
 800cef8:	f200 8156 	bhi.w	800d1a8 <USBH_HandleControl+0x2c8>
 800cefc:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <USBH_HandleControl+0x24>)
 800cefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf02:	bf00      	nop
 800cf04:	0800cf31 	.word	0x0800cf31
 800cf08:	0800cf4b 	.word	0x0800cf4b
 800cf0c:	0800cfb5 	.word	0x0800cfb5
 800cf10:	0800cfdb 	.word	0x0800cfdb
 800cf14:	0800d013 	.word	0x0800d013
 800cf18:	0800d03d 	.word	0x0800d03d
 800cf1c:	0800d08f 	.word	0x0800d08f
 800cf20:	0800d0b1 	.word	0x0800d0b1
 800cf24:	0800d0ed 	.word	0x0800d0ed
 800cf28:	0800d113 	.word	0x0800d113
 800cf2c:	0800d151 	.word	0x0800d151
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f103 0110 	add.w	r1, r3, #16
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	795b      	ldrb	r3, [r3, #5]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f943 	bl	800d1c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2202      	movs	r2, #2
 800cf46:	761a      	strb	r2, [r3, #24]
      break;
 800cf48:	e139      	b.n	800d1be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	795b      	ldrb	r3, [r3, #5]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f003 f943 	bl	80101dc <USBH_LL_GetURBState>
 800cf56:	4603      	mov	r3, r0
 800cf58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cf5a:	7bbb      	ldrb	r3, [r7, #14]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d11e      	bne.n	800cf9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	7c1b      	ldrb	r3, [r3, #16]
 800cf64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	8adb      	ldrh	r3, [r3, #22]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cf72:	7b7b      	ldrb	r3, [r7, #13]
 800cf74:	2b80      	cmp	r3, #128	; 0x80
 800cf76:	d103      	bne.n	800cf80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2203      	movs	r2, #3
 800cf7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf7e:	e115      	b.n	800d1ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2205      	movs	r2, #5
 800cf84:	761a      	strb	r2, [r3, #24]
      break;
 800cf86:	e111      	b.n	800d1ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cf88:	7b7b      	ldrb	r3, [r7, #13]
 800cf8a:	2b80      	cmp	r3, #128	; 0x80
 800cf8c:	d103      	bne.n	800cf96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2209      	movs	r2, #9
 800cf92:	761a      	strb	r2, [r3, #24]
      break;
 800cf94:	e10a      	b.n	800d1ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2207      	movs	r2, #7
 800cf9a:	761a      	strb	r2, [r3, #24]
      break;
 800cf9c:	e106      	b.n	800d1ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cf9e:	7bbb      	ldrb	r3, [r7, #14]
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	d003      	beq.n	800cfac <USBH_HandleControl+0xcc>
 800cfa4:	7bbb      	ldrb	r3, [r7, #14]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	f040 8100 	bne.w	800d1ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	220b      	movs	r2, #11
 800cfb0:	761a      	strb	r2, [r3, #24]
      break;
 800cfb2:	e0fb      	b.n	800d1ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6899      	ldr	r1, [r3, #8]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	899a      	ldrh	r2, [r3, #12]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	791b      	ldrb	r3, [r3, #4]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f93a 	bl	800d246 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2204      	movs	r2, #4
 800cfd6:	761a      	strb	r2, [r3, #24]
      break;
 800cfd8:	e0f1      	b.n	800d1be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	791b      	ldrb	r3, [r3, #4]
 800cfde:	4619      	mov	r1, r3
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f003 f8fb 	bl	80101dc <USBH_LL_GetURBState>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cfea:	7bbb      	ldrb	r3, [r7, #14]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d102      	bne.n	800cff6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2209      	movs	r2, #9
 800cff4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cff6:	7bbb      	ldrb	r3, [r7, #14]
 800cff8:	2b05      	cmp	r3, #5
 800cffa:	d102      	bne.n	800d002 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cffc:	2303      	movs	r3, #3
 800cffe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d000:	e0d6      	b.n	800d1b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d002:	7bbb      	ldrb	r3, [r7, #14]
 800d004:	2b04      	cmp	r3, #4
 800d006:	f040 80d3 	bne.w	800d1b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	220b      	movs	r2, #11
 800d00e:	761a      	strb	r2, [r3, #24]
      break;
 800d010:	e0ce      	b.n	800d1b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6899      	ldr	r1, [r3, #8]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	899a      	ldrh	r2, [r3, #12]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	795b      	ldrb	r3, [r3, #5]
 800d01e:	2001      	movs	r0, #1
 800d020:	9000      	str	r0, [sp, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f8ea 	bl	800d1fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d02e:	b29a      	uxth	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2206      	movs	r2, #6
 800d038:	761a      	strb	r2, [r3, #24]
      break;
 800d03a:	e0c0      	b.n	800d1be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	795b      	ldrb	r3, [r3, #5]
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f003 f8ca 	bl	80101dc <USBH_LL_GetURBState>
 800d048:	4603      	mov	r3, r0
 800d04a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d04c:	7bbb      	ldrb	r3, [r7, #14]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d103      	bne.n	800d05a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2207      	movs	r2, #7
 800d056:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d058:	e0ac      	b.n	800d1b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d05a:	7bbb      	ldrb	r3, [r7, #14]
 800d05c:	2b05      	cmp	r3, #5
 800d05e:	d105      	bne.n	800d06c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	220c      	movs	r2, #12
 800d064:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d066:	2303      	movs	r3, #3
 800d068:	73fb      	strb	r3, [r7, #15]
      break;
 800d06a:	e0a3      	b.n	800d1b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d06c:	7bbb      	ldrb	r3, [r7, #14]
 800d06e:	2b02      	cmp	r3, #2
 800d070:	d103      	bne.n	800d07a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2205      	movs	r2, #5
 800d076:	761a      	strb	r2, [r3, #24]
      break;
 800d078:	e09c      	b.n	800d1b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d07a:	7bbb      	ldrb	r3, [r7, #14]
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	f040 8099 	bne.w	800d1b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	220b      	movs	r2, #11
 800d086:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d088:	2302      	movs	r3, #2
 800d08a:	73fb      	strb	r3, [r7, #15]
      break;
 800d08c:	e092      	b.n	800d1b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	791b      	ldrb	r3, [r3, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	2100      	movs	r1, #0
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f8d5 	bl	800d246 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2208      	movs	r2, #8
 800d0ac:	761a      	strb	r2, [r3, #24]

      break;
 800d0ae:	e086      	b.n	800d1be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	791b      	ldrb	r3, [r3, #4]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f003 f890 	bl	80101dc <USBH_LL_GetURBState>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d0c0:	7bbb      	ldrb	r3, [r7, #14]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d105      	bne.n	800d0d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	220d      	movs	r2, #13
 800d0ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d0d0:	e072      	b.n	800d1b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
 800d0d4:	2b04      	cmp	r3, #4
 800d0d6:	d103      	bne.n	800d0e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	220b      	movs	r2, #11
 800d0dc:	761a      	strb	r2, [r3, #24]
      break;
 800d0de:	e06b      	b.n	800d1b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d0e0:	7bbb      	ldrb	r3, [r7, #14]
 800d0e2:	2b05      	cmp	r3, #5
 800d0e4:	d168      	bne.n	800d1b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d0ea:	e065      	b.n	800d1b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	795b      	ldrb	r3, [r3, #5]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	9200      	str	r2, [sp, #0]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 f87f 	bl	800d1fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d104:	b29a      	uxth	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	220a      	movs	r2, #10
 800d10e:	761a      	strb	r2, [r3, #24]
      break;
 800d110:	e055      	b.n	800d1be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	795b      	ldrb	r3, [r3, #5]
 800d116:	4619      	mov	r1, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f003 f85f 	bl	80101dc <USBH_LL_GetURBState>
 800d11e:	4603      	mov	r3, r0
 800d120:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d105      	bne.n	800d134 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	220d      	movs	r2, #13
 800d130:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d132:	e043      	b.n	800d1bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	2b02      	cmp	r3, #2
 800d138:	d103      	bne.n	800d142 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2209      	movs	r2, #9
 800d13e:	761a      	strb	r2, [r3, #24]
      break;
 800d140:	e03c      	b.n	800d1bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d142:	7bbb      	ldrb	r3, [r7, #14]
 800d144:	2b04      	cmp	r3, #4
 800d146:	d139      	bne.n	800d1bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	220b      	movs	r2, #11
 800d14c:	761a      	strb	r2, [r3, #24]
      break;
 800d14e:	e035      	b.n	800d1bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	7e5b      	ldrb	r3, [r3, #25]
 800d154:	3301      	adds	r3, #1
 800d156:	b2da      	uxtb	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	765a      	strb	r2, [r3, #25]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	7e5b      	ldrb	r3, [r3, #25]
 800d160:	2b02      	cmp	r3, #2
 800d162:	d806      	bhi.n	800d172 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d170:	e025      	b.n	800d1be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d178:	2106      	movs	r1, #6
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	795b      	ldrb	r3, [r3, #5]
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 f90c 	bl	800d3a8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	791b      	ldrb	r3, [r3, #4]
 800d194:	4619      	mov	r1, r3
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 f906 	bl	800d3a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d1a6:	e00a      	b.n	800d1be <USBH_HandleControl+0x2de>

    default:
      break;
 800d1a8:	bf00      	nop
 800d1aa:	e008      	b.n	800d1be <USBH_HandleControl+0x2de>
      break;
 800d1ac:	bf00      	nop
 800d1ae:	e006      	b.n	800d1be <USBH_HandleControl+0x2de>
      break;
 800d1b0:	bf00      	nop
 800d1b2:	e004      	b.n	800d1be <USBH_HandleControl+0x2de>
      break;
 800d1b4:	bf00      	nop
 800d1b6:	e002      	b.n	800d1be <USBH_HandleControl+0x2de>
      break;
 800d1b8:	bf00      	nop
 800d1ba:	e000      	b.n	800d1be <USBH_HandleControl+0x2de>
      break;
 800d1bc:	bf00      	nop
  }

  return status;
 800d1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af04      	add	r7, sp, #16
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d1d6:	79f9      	ldrb	r1, [r7, #7]
 800d1d8:	2300      	movs	r3, #0
 800d1da:	9303      	str	r3, [sp, #12]
 800d1dc:	2308      	movs	r3, #8
 800d1de:	9302      	str	r3, [sp, #8]
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f002 ffc4 	bl	801017a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3710      	adds	r7, #16
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af04      	add	r7, sp, #16
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	4611      	mov	r1, r2
 800d208:	461a      	mov	r2, r3
 800d20a:	460b      	mov	r3, r1
 800d20c:	80fb      	strh	r3, [r7, #6]
 800d20e:	4613      	mov	r3, r2
 800d210:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d220:	7979      	ldrb	r1, [r7, #5]
 800d222:	7e3b      	ldrb	r3, [r7, #24]
 800d224:	9303      	str	r3, [sp, #12]
 800d226:	88fb      	ldrh	r3, [r7, #6]
 800d228:	9302      	str	r3, [sp, #8]
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	9301      	str	r3, [sp, #4]
 800d22e:	2301      	movs	r3, #1
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	2300      	movs	r3, #0
 800d234:	2200      	movs	r2, #0
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f002 ff9f 	bl	801017a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b088      	sub	sp, #32
 800d24a:	af04      	add	r7, sp, #16
 800d24c:	60f8      	str	r0, [r7, #12]
 800d24e:	60b9      	str	r1, [r7, #8]
 800d250:	4611      	mov	r1, r2
 800d252:	461a      	mov	r2, r3
 800d254:	460b      	mov	r3, r1
 800d256:	80fb      	strh	r3, [r7, #6]
 800d258:	4613      	mov	r3, r2
 800d25a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d25c:	7979      	ldrb	r1, [r7, #5]
 800d25e:	2300      	movs	r3, #0
 800d260:	9303      	str	r3, [sp, #12]
 800d262:	88fb      	ldrh	r3, [r7, #6]
 800d264:	9302      	str	r3, [sp, #8]
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	2301      	movs	r3, #1
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	2300      	movs	r3, #0
 800d270:	2201      	movs	r2, #1
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f002 ff81 	bl	801017a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d278:	2300      	movs	r3, #0

}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b088      	sub	sp, #32
 800d286:	af04      	add	r7, sp, #16
 800d288:	60f8      	str	r0, [r7, #12]
 800d28a:	60b9      	str	r1, [r7, #8]
 800d28c:	4611      	mov	r1, r2
 800d28e:	461a      	mov	r2, r3
 800d290:	460b      	mov	r3, r1
 800d292:	80fb      	strh	r3, [r7, #6]
 800d294:	4613      	mov	r3, r2
 800d296:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d2a6:	7979      	ldrb	r1, [r7, #5]
 800d2a8:	7e3b      	ldrb	r3, [r7, #24]
 800d2aa:	9303      	str	r3, [sp, #12]
 800d2ac:	88fb      	ldrh	r3, [r7, #6]
 800d2ae:	9302      	str	r3, [sp, #8]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f002 ff5c 	bl	801017a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3710      	adds	r7, #16
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b088      	sub	sp, #32
 800d2d0:	af04      	add	r7, sp, #16
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	461a      	mov	r2, r3
 800d2da:	460b      	mov	r3, r1
 800d2dc:	80fb      	strh	r3, [r7, #6]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d2e2:	7979      	ldrb	r1, [r7, #5]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	9303      	str	r3, [sp, #12]
 800d2e8:	88fb      	ldrh	r3, [r7, #6]
 800d2ea:	9302      	str	r3, [sp, #8]
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	9301      	str	r3, [sp, #4]
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	2302      	movs	r3, #2
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f002 ff3e 	bl	801017a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af04      	add	r7, sp, #16
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	4608      	mov	r0, r1
 800d312:	4611      	mov	r1, r2
 800d314:	461a      	mov	r2, r3
 800d316:	4603      	mov	r3, r0
 800d318:	70fb      	strb	r3, [r7, #3]
 800d31a:	460b      	mov	r3, r1
 800d31c:	70bb      	strb	r3, [r7, #2]
 800d31e:	4613      	mov	r3, r2
 800d320:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d322:	7878      	ldrb	r0, [r7, #1]
 800d324:	78ba      	ldrb	r2, [r7, #2]
 800d326:	78f9      	ldrb	r1, [r7, #3]
 800d328:	8b3b      	ldrh	r3, [r7, #24]
 800d32a:	9302      	str	r3, [sp, #8]
 800d32c:	7d3b      	ldrb	r3, [r7, #20]
 800d32e:	9301      	str	r3, [sp, #4]
 800d330:	7c3b      	ldrb	r3, [r7, #16]
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	4603      	mov	r3, r0
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f002 fed1 	bl	80100de <USBH_LL_OpenPipe>

  return USBH_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b082      	sub	sp, #8
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	460b      	mov	r3, r1
 800d350:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d352:	78fb      	ldrb	r3, [r7, #3]
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f002 fef0 	bl	801013c <USBH_LL_ClosePipe>

  return USBH_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b084      	sub	sp, #16
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	460b      	mov	r3, r1
 800d370:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 f836 	bl	800d3e4 <USBH_GetFreePipe>
 800d378:	4603      	mov	r3, r0
 800d37a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d37c:	89fb      	ldrh	r3, [r7, #14]
 800d37e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d382:	4293      	cmp	r3, r2
 800d384:	d00a      	beq.n	800d39c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d386:	78fa      	ldrb	r2, [r7, #3]
 800d388:	89fb      	ldrh	r3, [r7, #14]
 800d38a:	f003 030f 	and.w	r3, r3, #15
 800d38e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	33e0      	adds	r3, #224	; 0xe0
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	440b      	add	r3, r1
 800d39a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d39c:	89fb      	ldrh	r3, [r7, #14]
 800d39e:	b2db      	uxtb	r3, r3
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d3b4:	78fb      	ldrb	r3, [r7, #3]
 800d3b6:	2b0f      	cmp	r3, #15
 800d3b8:	d80d      	bhi.n	800d3d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d3ba:	78fb      	ldrb	r3, [r7, #3]
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	33e0      	adds	r3, #224	; 0xe0
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	4413      	add	r3, r2
 800d3c4:	685a      	ldr	r2, [r3, #4]
 800d3c6:	78fb      	ldrb	r3, [r7, #3]
 800d3c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	33e0      	adds	r3, #224	; 0xe0
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	440b      	add	r3, r1
 800d3d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	73fb      	strb	r3, [r7, #15]
 800d3f4:	e00f      	b.n	800d416 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	33e0      	adds	r3, #224	; 0xe0
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d406:	2b00      	cmp	r3, #0
 800d408:	d102      	bne.n	800d410 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	e007      	b.n	800d420 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d410:	7bfb      	ldrb	r3, [r7, #15]
 800d412:	3301      	adds	r3, #1
 800d414:	73fb      	strb	r3, [r7, #15]
 800d416:	7bfb      	ldrb	r3, [r7, #15]
 800d418:	2b0f      	cmp	r3, #15
 800d41a:	d9ec      	bls.n	800d3f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d41c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d420:	4618      	mov	r0, r3
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f103 0208 	add.w	r2, r3, #8
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f04f 32ff 	mov.w	r2, #4294967295
 800d444:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f103 0208 	add.w	r2, r3, #8
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f103 0208 	add.w	r2, r3, #8
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d47a:	bf00      	nop
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49c:	d103      	bne.n	800d4a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	e00c      	b.n	800d4c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	e002      	b.n	800d4b4 <vListInsert+0x2e>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	60fb      	str	r3, [r7, #12]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d2f6      	bcs.n	800d4ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	1c5a      	adds	r2, r3, #1
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	601a      	str	r2, [r3, #0]
}
 800d4ec:	bf00      	nop
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	6892      	ldr	r2, [r2, #8]
 800d50e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	6852      	ldr	r2, [r2, #4]
 800d518:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	429a      	cmp	r2, r3
 800d522:	d103      	bne.n	800d52c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	689a      	ldr	r2, [r3, #8]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	1e5a      	subs	r2, r3, #1
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3714      	adds	r7, #20
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800d556:	2301      	movs	r3, #1
 800d558:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10a      	bne.n	800d57a <xQueueGenericReset+0x2e>
        __asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	60fb      	str	r3, [r7, #12]
    }
 800d576:	bf00      	nop
 800d578:	e7fe      	b.n	800d578 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d05d      	beq.n	800d63c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800d584:	2b00      	cmp	r3, #0
 800d586:	d059      	beq.n	800d63c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d590:	2100      	movs	r1, #0
 800d592:	fba3 2302 	umull	r2, r3, r3, r2
 800d596:	2b00      	cmp	r3, #0
 800d598:	d000      	beq.n	800d59c <xQueueGenericReset+0x50>
 800d59a:	2101      	movs	r1, #1
 800d59c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d14c      	bne.n	800d63c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800d5a2:	f002 f8e1 	bl	800f768 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ae:	6939      	ldr	r1, [r7, #16]
 800d5b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d5b2:	fb01 f303 	mul.w	r3, r1, r3
 800d5b6:	441a      	add	r2, r3
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	6939      	ldr	r1, [r7, #16]
 800d5d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d5d8:	fb01 f303 	mul.w	r3, r1, r3
 800d5dc:	441a      	add	r2, r3
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	22ff      	movs	r2, #255	; 0xff
 800d5e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	22ff      	movs	r2, #255	; 0xff
 800d5ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d114      	bne.n	800d622 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d01a      	beq.n	800d636 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	3310      	adds	r3, #16
 800d604:	4618      	mov	r0, r3
 800d606:	f001 f9a7 	bl	800e958 <xTaskRemoveFromEventList>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d012      	beq.n	800d636 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d610:	4b15      	ldr	r3, [pc, #84]	; (800d668 <xQueueGenericReset+0x11c>)
 800d612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d616:	601a      	str	r2, [r3, #0]
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	e009      	b.n	800d636 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3310      	adds	r3, #16
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff ff00 	bl	800d42c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	3324      	adds	r3, #36	; 0x24
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff fefb 	bl	800d42c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800d636:	f002 f8c7 	bl	800f7c8 <vPortExitCritical>
 800d63a:	e001      	b.n	800d640 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800d63c:	2300      	movs	r3, #0
 800d63e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10a      	bne.n	800d65c <xQueueGenericReset+0x110>
        __asm volatile
 800d646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	60bb      	str	r3, [r7, #8]
    }
 800d658:	bf00      	nop
 800d65a:	e7fe      	b.n	800d65a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800d65c:	697b      	ldr	r3, [r7, #20]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	e000ed04 	.word	0xe000ed04

0800d66c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08a      	sub	sp, #40	; 0x28
 800d670:	af02      	add	r7, sp, #8
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800d67a:	2300      	movs	r3, #0
 800d67c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d02e      	beq.n	800d6e2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800d684:	2100      	movs	r1, #0
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	fba3 2302 	umull	r2, r3, r3, r2
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d000      	beq.n	800d694 <xQueueGenericCreate+0x28>
 800d692:	2101      	movs	r1, #1
 800d694:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800d696:	2b00      	cmp	r3, #0
 800d698:	d123      	bne.n	800d6e2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800d6a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800d6a6:	d81c      	bhi.n	800d6e2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	fb02 f303 	mul.w	r3, r2, r3
 800d6b0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	3350      	adds	r3, #80	; 0x50
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f002 f938 	bl	800f92c <pvPortMalloc>
 800d6bc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d01c      	beq.n	800d6fe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	3350      	adds	r3, #80	; 0x50
 800d6cc:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d6ce:	79fa      	ldrb	r2, [r7, #7]
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	697a      	ldr	r2, [r7, #20]
 800d6d8:	68b9      	ldr	r1, [r7, #8]
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f000 f814 	bl	800d708 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800d6e0:	e00d      	b.n	800d6fe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <xQueueGenericCreate+0x92>
        __asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	613b      	str	r3, [r7, #16]
    }
 800d6fa:	bf00      	nop
 800d6fc:	e7fe      	b.n	800d6fc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
    }
 800d700:	4618      	mov	r0, r3
 800d702:	3720      	adds	r7, #32
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
 800d714:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d103      	bne.n	800d724 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	601a      	str	r2, [r3, #0]
 800d722:	e002      	b.n	800d72a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d736:	2101      	movs	r1, #1
 800d738:	69b8      	ldr	r0, [r7, #24]
 800d73a:	f7ff ff07 	bl	800d54c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	78fa      	ldrb	r2, [r7, #3]
 800d742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800d746:	bf00      	nop
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08e      	sub	sp, #56	; 0x38
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
 800d75c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d75e:	2300      	movs	r3, #0
 800d760:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d10a      	bne.n	800d782 <xQueueGenericSend+0x32>
        __asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800d77e:	bf00      	nop
 800d780:	e7fe      	b.n	800d780 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d103      	bne.n	800d790 <xQueueGenericSend+0x40>
 800d788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <xQueueGenericSend+0x44>
 800d790:	2301      	movs	r3, #1
 800d792:	e000      	b.n	800d796 <xQueueGenericSend+0x46>
 800d794:	2300      	movs	r3, #0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10a      	bne.n	800d7b0 <xQueueGenericSend+0x60>
        __asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800d7ac:	bf00      	nop
 800d7ae:	e7fe      	b.n	800d7ae <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d103      	bne.n	800d7be <xQueueGenericSend+0x6e>
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d101      	bne.n	800d7c2 <xQueueGenericSend+0x72>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e000      	b.n	800d7c4 <xQueueGenericSend+0x74>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <xQueueGenericSend+0x8e>
        __asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	623b      	str	r3, [r7, #32]
    }
 800d7da:	bf00      	nop
 800d7dc:	e7fe      	b.n	800d7dc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7de:	f001 facb 	bl	800ed78 <xTaskGetSchedulerState>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d102      	bne.n	800d7ee <xQueueGenericSend+0x9e>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d101      	bne.n	800d7f2 <xQueueGenericSend+0xa2>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e000      	b.n	800d7f4 <xQueueGenericSend+0xa4>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10a      	bne.n	800d80e <xQueueGenericSend+0xbe>
        __asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	61fb      	str	r3, [r7, #28]
    }
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d80e:	f001 ffab 	bl	800f768 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d302      	bcc.n	800d824 <xQueueGenericSend+0xd4>
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	2b02      	cmp	r3, #2
 800d822:	d129      	bne.n	800d878 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	68b9      	ldr	r1, [r7, #8]
 800d828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d82a:	f000 f98d 	bl	800db48 <prvCopyDataToQueue>
 800d82e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d834:	2b00      	cmp	r3, #0
 800d836:	d010      	beq.n	800d85a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	3324      	adds	r3, #36	; 0x24
 800d83c:	4618      	mov	r0, r3
 800d83e:	f001 f88b 	bl	800e958 <xTaskRemoveFromEventList>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d013      	beq.n	800d870 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800d848:	4b3f      	ldr	r3, [pc, #252]	; (800d948 <xQueueGenericSend+0x1f8>)
 800d84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	e00a      	b.n	800d870 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800d85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d007      	beq.n	800d870 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800d860:	4b39      	ldr	r3, [pc, #228]	; (800d948 <xQueueGenericSend+0x1f8>)
 800d862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d866:	601a      	str	r2, [r3, #0]
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800d870:	f001 ffaa 	bl	800f7c8 <vPortExitCritical>
                return pdPASS;
 800d874:	2301      	movs	r3, #1
 800d876:	e063      	b.n	800d940 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d103      	bne.n	800d886 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d87e:	f001 ffa3 	bl	800f7c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800d882:	2300      	movs	r3, #0
 800d884:	e05c      	b.n	800d940 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d106      	bne.n	800d89a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d88c:	f107 0314 	add.w	r3, r7, #20
 800d890:	4618      	mov	r0, r3
 800d892:	f001 f937 	bl	800eb04 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d896:	2301      	movs	r3, #1
 800d898:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d89a:	f001 ff95 	bl	800f7c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d89e:	f000 fd65 	bl	800e36c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d8a2:	f001 ff61 	bl	800f768 <vPortEnterCritical>
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ac:	b25b      	sxtb	r3, r3
 800d8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b2:	d103      	bne.n	800d8bc <xQueueGenericSend+0x16c>
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8c2:	b25b      	sxtb	r3, r3
 800d8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c8:	d103      	bne.n	800d8d2 <xQueueGenericSend+0x182>
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8d2:	f001 ff79 	bl	800f7c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8d6:	1d3a      	adds	r2, r7, #4
 800d8d8:	f107 0314 	add.w	r3, r7, #20
 800d8dc:	4611      	mov	r1, r2
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f001 f926 	bl	800eb30 <xTaskCheckForTimeOut>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d124      	bne.n	800d934 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d8ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8ec:	f000 fa24 	bl	800dd38 <prvIsQueueFull>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d018      	beq.n	800d928 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f8:	3310      	adds	r3, #16
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 ffc0 	bl	800e884 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800d904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d906:	f000 f9af 	bl	800dc68 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800d90a:	f000 fd3d 	bl	800e388 <xTaskResumeAll>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	f47f af7c 	bne.w	800d80e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800d916:	4b0c      	ldr	r3, [pc, #48]	; (800d948 <xQueueGenericSend+0x1f8>)
 800d918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	e772      	b.n	800d80e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800d928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d92a:	f000 f99d 	bl	800dc68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d92e:	f000 fd2b 	bl	800e388 <xTaskResumeAll>
 800d932:	e76c      	b.n	800d80e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800d934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d936:	f000 f997 	bl	800dc68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d93a:	f000 fd25 	bl	800e388 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800d93e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800d940:	4618      	mov	r0, r3
 800d942:	3738      	adds	r7, #56	; 0x38
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	e000ed04 	.word	0xe000ed04

0800d94c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b08c      	sub	sp, #48	; 0x30
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d958:	2300      	movs	r3, #0
 800d95a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10a      	bne.n	800d97c <xQueueReceive+0x30>
        __asm volatile
 800d966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96a:	f383 8811 	msr	BASEPRI, r3
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	623b      	str	r3, [r7, #32]
    }
 800d978:	bf00      	nop
 800d97a:	e7fe      	b.n	800d97a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d103      	bne.n	800d98a <xQueueReceive+0x3e>
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <xQueueReceive+0x42>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e000      	b.n	800d990 <xQueueReceive+0x44>
 800d98e:	2300      	movs	r3, #0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <xQueueReceive+0x5e>
        __asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	61fb      	str	r3, [r7, #28]
    }
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9aa:	f001 f9e5 	bl	800ed78 <xTaskGetSchedulerState>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <xQueueReceive+0x6e>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <xQueueReceive+0x72>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e000      	b.n	800d9c0 <xQueueReceive+0x74>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10a      	bne.n	800d9da <xQueueReceive+0x8e>
        __asm volatile
 800d9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	61bb      	str	r3, [r7, #24]
    }
 800d9d6:	bf00      	nop
 800d9d8:	e7fe      	b.n	800d9d8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d9da:	f001 fec5 	bl	800f768 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d01f      	beq.n	800da2a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9ea:	68b9      	ldr	r1, [r7, #8]
 800d9ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9ee:	f000 f915 	bl	800dc1c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f4:	1e5a      	subs	r2, r3, #1
 800d9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fc:	691b      	ldr	r3, [r3, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00f      	beq.n	800da22 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da04:	3310      	adds	r3, #16
 800da06:	4618      	mov	r0, r3
 800da08:	f000 ffa6 	bl	800e958 <xTaskRemoveFromEventList>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d007      	beq.n	800da22 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800da12:	4b3d      	ldr	r3, [pc, #244]	; (800db08 <xQueueReceive+0x1bc>)
 800da14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800da22:	f001 fed1 	bl	800f7c8 <vPortExitCritical>
                return pdPASS;
 800da26:	2301      	movs	r3, #1
 800da28:	e069      	b.n	800dafe <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d103      	bne.n	800da38 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800da30:	f001 feca 	bl	800f7c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800da34:	2300      	movs	r3, #0
 800da36:	e062      	b.n	800dafe <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d106      	bne.n	800da4c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800da3e:	f107 0310 	add.w	r3, r7, #16
 800da42:	4618      	mov	r0, r3
 800da44:	f001 f85e 	bl	800eb04 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800da48:	2301      	movs	r3, #1
 800da4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800da4c:	f001 febc 	bl	800f7c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800da50:	f000 fc8c 	bl	800e36c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800da54:	f001 fe88 	bl	800f768 <vPortEnterCritical>
 800da58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da5e:	b25b      	sxtb	r3, r3
 800da60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da64:	d103      	bne.n	800da6e <xQueueReceive+0x122>
 800da66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da74:	b25b      	sxtb	r3, r3
 800da76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7a:	d103      	bne.n	800da84 <xQueueReceive+0x138>
 800da7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da84:	f001 fea0 	bl	800f7c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da88:	1d3a      	adds	r2, r7, #4
 800da8a:	f107 0310 	add.w	r3, r7, #16
 800da8e:	4611      	mov	r1, r2
 800da90:	4618      	mov	r0, r3
 800da92:	f001 f84d 	bl	800eb30 <xTaskCheckForTimeOut>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d123      	bne.n	800dae4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da9e:	f000 f935 	bl	800dd0c <prvIsQueueEmpty>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d017      	beq.n	800dad8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800daa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daaa:	3324      	adds	r3, #36	; 0x24
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	4611      	mov	r1, r2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f000 fee7 	bl	800e884 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800dab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dab8:	f000 f8d6 	bl	800dc68 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800dabc:	f000 fc64 	bl	800e388 <xTaskResumeAll>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d189      	bne.n	800d9da <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800dac6:	4b10      	ldr	r3, [pc, #64]	; (800db08 <xQueueReceive+0x1bc>)
 800dac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dacc:	601a      	str	r2, [r3, #0]
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	e780      	b.n	800d9da <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800dad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dada:	f000 f8c5 	bl	800dc68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800dade:	f000 fc53 	bl	800e388 <xTaskResumeAll>
 800dae2:	e77a      	b.n	800d9da <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800dae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dae6:	f000 f8bf 	bl	800dc68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800daea:	f000 fc4d 	bl	800e388 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daf0:	f000 f90c 	bl	800dd0c <prvIsQueueEmpty>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f43f af6f 	beq.w	800d9da <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800dafc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3730      	adds	r7, #48	; 0x30
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10a      	bne.n	800db30 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	60bb      	str	r3, [r7, #8]
    }
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800db30:	f001 fe1a 	bl	800f768 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db38:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800db3a:	f001 fe45 	bl	800f7c8 <vPortExitCritical>

    return uxReturn;
 800db3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800db40:	4618      	mov	r0, r3
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800db54:	2300      	movs	r3, #0
 800db56:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db5c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10d      	bne.n	800db82 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d14d      	bne.n	800dc0a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	4618      	mov	r0, r3
 800db74:	f001 f91e 	bl	800edb4 <xTaskPriorityDisinherit>
 800db78:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2200      	movs	r2, #0
 800db7e:	609a      	str	r2, [r3, #8]
 800db80:	e043      	b.n	800dc0a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d119      	bne.n	800dbbc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6858      	ldr	r0, [r3, #4]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db90:	461a      	mov	r2, r3
 800db92:	68b9      	ldr	r1, [r7, #8]
 800db94:	f002 fc04 	bl	80103a0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba0:	441a      	add	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	685a      	ldr	r2, [r3, #4]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d32b      	bcc.n	800dc0a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	605a      	str	r2, [r3, #4]
 800dbba:	e026      	b.n	800dc0a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	68d8      	ldr	r0, [r3, #12]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	68b9      	ldr	r1, [r7, #8]
 800dbc8:	f002 fbea 	bl	80103a0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	68da      	ldr	r2, [r3, #12]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd4:	425b      	negs	r3, r3
 800dbd6:	441a      	add	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	68da      	ldr	r2, [r3, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d207      	bcs.n	800dbf8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	689a      	ldr	r2, [r3, #8]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf0:	425b      	negs	r3, r3
 800dbf2:	441a      	add	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d105      	bne.n	800dc0a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	3b01      	subs	r3, #1
 800dc08:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	1c5a      	adds	r2, r3, #1
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800dc12:	697b      	ldr	r3, [r7, #20]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d018      	beq.n	800dc60 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68da      	ldr	r2, [r3, #12]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc36:	441a      	add	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	68da      	ldr	r2, [r3, #12]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d303      	bcc.n	800dc50 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68d9      	ldr	r1, [r3, #12]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc58:	461a      	mov	r2, r3
 800dc5a:	6838      	ldr	r0, [r7, #0]
 800dc5c:	f002 fba0 	bl	80103a0 <memcpy>
    }
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800dc70:	f001 fd7a 	bl	800f768 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc7a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc7c:	e011      	b.n	800dca2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d012      	beq.n	800dcac <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	3324      	adds	r3, #36	; 0x24
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 fe64 	bl	800e958 <xTaskRemoveFromEventList>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d001      	beq.n	800dc9a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800dc96:	f000 ffb1 	bl	800ebfc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800dca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	dce9      	bgt.n	800dc7e <prvUnlockQueue+0x16>
 800dcaa:	e000      	b.n	800dcae <prvUnlockQueue+0x46>
                        break;
 800dcac:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	22ff      	movs	r2, #255	; 0xff
 800dcb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800dcb6:	f001 fd87 	bl	800f7c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800dcba:	f001 fd55 	bl	800f768 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcc4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800dcc6:	e011      	b.n	800dcec <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d012      	beq.n	800dcf6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3310      	adds	r3, #16
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 fe3f 	bl	800e958 <xTaskRemoveFromEventList>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800dce0:	f000 ff8c 	bl	800ebfc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800dce4:	7bbb      	ldrb	r3, [r7, #14]
 800dce6:	3b01      	subs	r3, #1
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800dcec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	dce9      	bgt.n	800dcc8 <prvUnlockQueue+0x60>
 800dcf4:	e000      	b.n	800dcf8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800dcf6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	22ff      	movs	r2, #255	; 0xff
 800dcfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800dd00:	f001 fd62 	bl	800f7c8 <vPortExitCritical>
}
 800dd04:	bf00      	nop
 800dd06:	3710      	adds	r7, #16
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800dd14:	f001 fd28 	bl	800f768 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d102      	bne.n	800dd26 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800dd20:	2301      	movs	r3, #1
 800dd22:	60fb      	str	r3, [r7, #12]
 800dd24:	e001      	b.n	800dd2a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800dd26:	2300      	movs	r3, #0
 800dd28:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800dd2a:	f001 fd4d 	bl	800f7c8 <vPortExitCritical>

    return xReturn;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3710      	adds	r7, #16
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800dd40:	f001 fd12 	bl	800f768 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d102      	bne.n	800dd56 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800dd50:	2301      	movs	r3, #1
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	e001      	b.n	800dd5a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800dd5a:	f001 fd35 	bl	800f7c8 <vPortExitCritical>

    return xReturn;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800dd68:	b480      	push	{r7}
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10a      	bne.n	800dd8e <vQueueAddToRegistry+0x26>
        __asm volatile
 800dd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	60fb      	str	r3, [r7, #12]
    }
 800dd8a:	bf00      	nop
 800dd8c:	e7fe      	b.n	800dd8c <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d024      	beq.n	800dde2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd98:	2300      	movs	r3, #0
 800dd9a:	617b      	str	r3, [r7, #20]
 800dd9c:	e01e      	b.n	800dddc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800dd9e:	4a18      	ldr	r2, [pc, #96]	; (800de00 <vQueueAddToRegistry+0x98>)
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	00db      	lsls	r3, r3, #3
 800dda4:	4413      	add	r3, r2
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d105      	bne.n	800ddba <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	00db      	lsls	r3, r3, #3
 800ddb2:	4a13      	ldr	r2, [pc, #76]	; (800de00 <vQueueAddToRegistry+0x98>)
 800ddb4:	4413      	add	r3, r2
 800ddb6:	613b      	str	r3, [r7, #16]
                    break;
 800ddb8:	e013      	b.n	800dde2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10a      	bne.n	800ddd6 <vQueueAddToRegistry+0x6e>
 800ddc0:	4a0f      	ldr	r2, [pc, #60]	; (800de00 <vQueueAddToRegistry+0x98>)
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d104      	bne.n	800ddd6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	00db      	lsls	r3, r3, #3
 800ddd0:	4a0b      	ldr	r2, [pc, #44]	; (800de00 <vQueueAddToRegistry+0x98>)
 800ddd2:	4413      	add	r3, r2
 800ddd4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b07      	cmp	r3, #7
 800dde0:	d9dd      	bls.n	800dd9e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d005      	beq.n	800ddf4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800ddf4:	bf00      	nop
 800ddf6:	371c      	adds	r7, #28
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	20000e90 	.word	0x20000e90

0800de04 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800de04:	b580      	push	{r7, lr}
 800de06:	b086      	sub	sp, #24
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800de14:	f001 fca8 	bl	800f768 <vPortEnterCritical>
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de1e:	b25b      	sxtb	r3, r3
 800de20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de24:	d103      	bne.n	800de2e <vQueueWaitForMessageRestricted+0x2a>
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de34:	b25b      	sxtb	r3, r3
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	d103      	bne.n	800de44 <vQueueWaitForMessageRestricted+0x40>
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de44:	f001 fcc0 	bl	800f7c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d106      	bne.n	800de5e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	3324      	adds	r3, #36	; 0x24
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	68b9      	ldr	r1, [r7, #8]
 800de58:	4618      	mov	r0, r3
 800de5a:	f000 fd37 	bl	800e8cc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800de5e:	6978      	ldr	r0, [r7, #20]
 800de60:	f7ff ff02 	bl	800dc68 <prvUnlockQueue>
    }
 800de64:	bf00      	nop
 800de66:	3718      	adds	r7, #24
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b08c      	sub	sp, #48	; 0x30
 800de70:	af04      	add	r7, sp, #16
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	603b      	str	r3, [r7, #0]
 800de78:	4613      	mov	r3, r2
 800de7a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de7c:	88fb      	ldrh	r3, [r7, #6]
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4618      	mov	r0, r3
 800de82:	f001 fd53 	bl	800f92c <pvPortMalloc>
 800de86:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00e      	beq.n	800deac <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de8e:	2058      	movs	r0, #88	; 0x58
 800de90:	f001 fd4c 	bl	800f92c <pvPortMalloc>
 800de94:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d003      	beq.n	800dea4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	697a      	ldr	r2, [r7, #20]
 800dea0:	631a      	str	r2, [r3, #48]	; 0x30
 800dea2:	e005      	b.n	800deb0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800dea4:	6978      	ldr	r0, [r7, #20]
 800dea6:	f001 fe21 	bl	800faec <vPortFree>
 800deaa:	e001      	b.n	800deb0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800deac:	2300      	movs	r3, #0
 800deae:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d013      	beq.n	800dede <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800deb6:	88fa      	ldrh	r2, [r7, #6]
 800deb8:	2300      	movs	r3, #0
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	9302      	str	r3, [sp, #8]
 800dec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec2:	9301      	str	r3, [sp, #4]
 800dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	68b9      	ldr	r1, [r7, #8]
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 f80e 	bl	800deee <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800ded2:	69f8      	ldr	r0, [r7, #28]
 800ded4:	f000 f8b0 	bl	800e038 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800ded8:	2301      	movs	r3, #1
 800deda:	61bb      	str	r3, [r7, #24]
 800dedc:	e002      	b.n	800dee4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dede:	f04f 33ff 	mov.w	r3, #4294967295
 800dee2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800dee4:	69bb      	ldr	r3, [r7, #24]
    }
 800dee6:	4618      	mov	r0, r3
 800dee8:	3720      	adds	r7, #32
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b088      	sub	sp, #32
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	607a      	str	r2, [r7, #4]
 800defa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800defc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	461a      	mov	r2, r3
 800df06:	21a5      	movs	r1, #165	; 0xa5
 800df08:	f002 fa58 	bl	80103bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df16:	3b01      	subs	r3, #1
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	f023 0307 	bic.w	r3, r3, #7
 800df24:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	f003 0307 	and.w	r3, r3, #7
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00a      	beq.n	800df46 <prvInitialiseNewTask+0x58>
        __asm volatile
 800df30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	617b      	str	r3, [r7, #20]
    }
 800df42:	bf00      	nop
 800df44:	e7fe      	b.n	800df44 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d01f      	beq.n	800df8c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df4c:	2300      	movs	r3, #0
 800df4e:	61fb      	str	r3, [r7, #28]
 800df50:	e012      	b.n	800df78 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	4413      	add	r3, r2
 800df58:	7819      	ldrb	r1, [r3, #0]
 800df5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	4413      	add	r3, r2
 800df60:	3334      	adds	r3, #52	; 0x34
 800df62:	460a      	mov	r2, r1
 800df64:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	4413      	add	r3, r2
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d006      	beq.n	800df80 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	3301      	adds	r3, #1
 800df76:	61fb      	str	r3, [r7, #28]
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	2b09      	cmp	r3, #9
 800df7c:	d9e9      	bls.n	800df52 <prvInitialiseNewTask+0x64>
 800df7e:	e000      	b.n	800df82 <prvInitialiseNewTask+0x94>
            {
                break;
 800df80:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df84:	2200      	movs	r2, #0
 800df86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800df8a:	e003      	b.n	800df94 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8e:	2200      	movs	r2, #0
 800df90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800df94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df96:	2b04      	cmp	r3, #4
 800df98:	d90a      	bls.n	800dfb0 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800df9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9e:	f383 8811 	msr	BASEPRI, r3
 800dfa2:	f3bf 8f6f 	isb	sy
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	613b      	str	r3, [r7, #16]
    }
 800dfac:	bf00      	nop
 800dfae:	e7fe      	b.n	800dfae <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb2:	2b04      	cmp	r3, #4
 800dfb4:	d901      	bls.n	800dfba <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfb6:	2304      	movs	r3, #4
 800dfb8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfbe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfc4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	2200      	movs	r2, #0
 800dfca:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7ff fa4b 	bl	800d46c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd8:	3318      	adds	r3, #24
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7ff fa46 	bl	800d46c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfe4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe8:	f1c3 0205 	rsb	r2, r3, #5
 800dfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfee:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	3350      	adds	r3, #80	; 0x50
 800dffa:	2204      	movs	r2, #4
 800dffc:	2100      	movs	r1, #0
 800dffe:	4618      	mov	r0, r3
 800e000:	f002 f9dc 	bl	80103bc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800e004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e006:	3354      	adds	r3, #84	; 0x54
 800e008:	2201      	movs	r2, #1
 800e00a:	2100      	movs	r1, #0
 800e00c:	4618      	mov	r0, r3
 800e00e:	f002 f9d5 	bl	80103bc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	68f9      	ldr	r1, [r7, #12]
 800e016:	69b8      	ldr	r0, [r7, #24]
 800e018:	f001 fa74 	bl	800f504 <pxPortInitialiseStack>
 800e01c:	4602      	mov	r2, r0
 800e01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e020:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e02c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e02e:	bf00      	nop
 800e030:	3720      	adds	r7, #32
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
	...

0800e038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800e040:	f001 fb92 	bl	800f768 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800e044:	4b40      	ldr	r3, [pc, #256]	; (800e148 <prvAddNewTaskToReadyList+0x110>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	3301      	adds	r3, #1
 800e04a:	4a3f      	ldr	r2, [pc, #252]	; (800e148 <prvAddNewTaskToReadyList+0x110>)
 800e04c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800e04e:	4b3f      	ldr	r3, [pc, #252]	; (800e14c <prvAddNewTaskToReadyList+0x114>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d109      	bne.n	800e06a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800e056:	4a3d      	ldr	r2, [pc, #244]	; (800e14c <prvAddNewTaskToReadyList+0x114>)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e05c:	4b3a      	ldr	r3, [pc, #232]	; (800e148 <prvAddNewTaskToReadyList+0x110>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b01      	cmp	r3, #1
 800e062:	d110      	bne.n	800e086 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800e064:	f000 fdee 	bl	800ec44 <prvInitialiseTaskLists>
 800e068:	e00d      	b.n	800e086 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800e06a:	4b39      	ldr	r3, [pc, #228]	; (800e150 <prvAddNewTaskToReadyList+0x118>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d109      	bne.n	800e086 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e072:	4b36      	ldr	r3, [pc, #216]	; (800e14c <prvAddNewTaskToReadyList+0x114>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d802      	bhi.n	800e086 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800e080:	4a32      	ldr	r2, [pc, #200]	; (800e14c <prvAddNewTaskToReadyList+0x114>)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800e086:	4b33      	ldr	r3, [pc, #204]	; (800e154 <prvAddNewTaskToReadyList+0x11c>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	3301      	adds	r3, #1
 800e08c:	4a31      	ldr	r2, [pc, #196]	; (800e154 <prvAddNewTaskToReadyList+0x11c>)
 800e08e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e090:	4b30      	ldr	r3, [pc, #192]	; (800e154 <prvAddNewTaskToReadyList+0x11c>)
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09c:	2201      	movs	r2, #1
 800e09e:	409a      	lsls	r2, r3
 800e0a0:	4b2d      	ldr	r3, [pc, #180]	; (800e158 <prvAddNewTaskToReadyList+0x120>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	4a2c      	ldr	r2, [pc, #176]	; (800e158 <prvAddNewTaskToReadyList+0x120>)
 800e0a8:	6013      	str	r3, [r2, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ae:	492b      	ldr	r1, [pc, #172]	; (800e15c <prvAddNewTaskToReadyList+0x124>)
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4413      	add	r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	440b      	add	r3, r1
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	60fb      	str	r3, [r7, #12]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	68fa      	ldr	r2, [r7, #12]
 800e0c4:	609a      	str	r2, [r3, #8]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	689a      	ldr	r2, [r3, #8]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	60da      	str	r2, [r3, #12]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	3204      	adds	r2, #4
 800e0d6:	605a      	str	r2, [r3, #4]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	1d1a      	adds	r2, r3, #4
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	609a      	str	r2, [r3, #8]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4a1b      	ldr	r2, [pc, #108]	; (800e15c <prvAddNewTaskToReadyList+0x124>)
 800e0ee:	441a      	add	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	615a      	str	r2, [r3, #20]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f8:	4918      	ldr	r1, [pc, #96]	; (800e15c <prvAddNewTaskToReadyList+0x124>)
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	440b      	add	r3, r1
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	1c59      	adds	r1, r3, #1
 800e108:	4814      	ldr	r0, [pc, #80]	; (800e15c <prvAddNewTaskToReadyList+0x124>)
 800e10a:	4613      	mov	r3, r2
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	4403      	add	r3, r0
 800e114:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800e116:	f001 fb57 	bl	800f7c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800e11a:	4b0d      	ldr	r3, [pc, #52]	; (800e150 <prvAddNewTaskToReadyList+0x118>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00e      	beq.n	800e140 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e122:	4b0a      	ldr	r3, [pc, #40]	; (800e14c <prvAddNewTaskToReadyList+0x114>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d207      	bcs.n	800e140 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800e130:	4b0b      	ldr	r3, [pc, #44]	; (800e160 <prvAddNewTaskToReadyList+0x128>)
 800e132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e136:	601a      	str	r2, [r3, #0]
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e140:	bf00      	nop
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	20000fa8 	.word	0x20000fa8
 800e14c:	20000ed0 	.word	0x20000ed0
 800e150:	20000fb4 	.word	0x20000fb4
 800e154:	20000fc4 	.word	0x20000fc4
 800e158:	20000fb0 	.word	0x20000fb0
 800e15c:	20000ed4 	.word	0x20000ed4
 800e160:	e000ed04 	.word	0xe000ed04

0800e164 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800e164:	b580      	push	{r7, lr}
 800e166:	b08a      	sub	sp, #40	; 0x28
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e16e:	2300      	movs	r3, #0
 800e170:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10a      	bne.n	800e18e <xTaskDelayUntil+0x2a>
        __asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	617b      	str	r3, [r7, #20]
    }
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10a      	bne.n	800e1aa <xTaskDelayUntil+0x46>
        __asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	613b      	str	r3, [r7, #16]
    }
 800e1a6:	bf00      	nop
 800e1a8:	e7fe      	b.n	800e1a8 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800e1aa:	4b2a      	ldr	r3, [pc, #168]	; (800e254 <xTaskDelayUntil+0xf0>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00a      	beq.n	800e1c8 <xTaskDelayUntil+0x64>
        __asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	60fb      	str	r3, [r7, #12]
    }
 800e1c4:	bf00      	nop
 800e1c6:	e7fe      	b.n	800e1c6 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 800e1c8:	f000 f8d0 	bl	800e36c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800e1cc:	4b22      	ldr	r3, [pc, #136]	; (800e258 <xTaskDelayUntil+0xf4>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	4413      	add	r3, r2
 800e1da:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	6a3a      	ldr	r2, [r7, #32]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d20b      	bcs.n	800e1fe <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	69fa      	ldr	r2, [r7, #28]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d211      	bcs.n	800e214 <xTaskDelayUntil+0xb0>
 800e1f0:	69fa      	ldr	r2, [r7, #28]
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d90d      	bls.n	800e214 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e1fc:	e00a      	b.n	800e214 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	69fa      	ldr	r2, [r7, #28]
 800e204:	429a      	cmp	r2, r3
 800e206:	d303      	bcc.n	800e210 <xTaskDelayUntil+0xac>
 800e208:	69fa      	ldr	r2, [r7, #28]
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d901      	bls.n	800e214 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800e210:	2301      	movs	r3, #1
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	69fa      	ldr	r2, [r7, #28]
 800e218:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d006      	beq.n	800e22e <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e220:	69fa      	ldr	r2, [r7, #28]
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	2100      	movs	r1, #0
 800e228:	4618      	mov	r0, r3
 800e22a:	f000 fe67 	bl	800eefc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800e22e:	f000 f8ab 	bl	800e388 <xTaskResumeAll>
 800e232:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d107      	bne.n	800e24a <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 800e23a:	4b08      	ldr	r3, [pc, #32]	; (800e25c <xTaskDelayUntil+0xf8>)
 800e23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e240:	601a      	str	r2, [r3, #0]
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800e24c:	4618      	mov	r0, r3
 800e24e:	3728      	adds	r7, #40	; 0x28
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	20000fd0 	.word	0x20000fd0
 800e258:	20000fac 	.word	0x20000fac
 800e25c:	e000ed04 	.word	0xe000ed04

0800e260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800e268:	2300      	movs	r3, #0
 800e26a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d017      	beq.n	800e2a2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800e272:	4b13      	ldr	r3, [pc, #76]	; (800e2c0 <vTaskDelay+0x60>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00a      	beq.n	800e290 <vTaskDelay+0x30>
        __asm volatile
 800e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	60bb      	str	r3, [r7, #8]
    }
 800e28c:	bf00      	nop
 800e28e:	e7fe      	b.n	800e28e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800e290:	f000 f86c 	bl	800e36c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e294:	2100      	movs	r1, #0
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fe30 	bl	800eefc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800e29c:	f000 f874 	bl	800e388 <xTaskResumeAll>
 800e2a0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d107      	bne.n	800e2b8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800e2a8:	4b06      	ldr	r3, [pc, #24]	; (800e2c4 <vTaskDelay+0x64>)
 800e2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ae:	601a      	str	r2, [r3, #0]
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e2b8:	bf00      	nop
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	20000fd0 	.word	0x20000fd0
 800e2c4:	e000ed04 	.word	0xe000ed04

0800e2c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b086      	sub	sp, #24
 800e2cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800e2ce:	4b20      	ldr	r3, [pc, #128]	; (800e350 <vTaskStartScheduler+0x88>)
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	2282      	movs	r2, #130	; 0x82
 800e2da:	491e      	ldr	r1, [pc, #120]	; (800e354 <vTaskStartScheduler+0x8c>)
 800e2dc:	481e      	ldr	r0, [pc, #120]	; (800e358 <vTaskStartScheduler+0x90>)
 800e2de:	f7ff fdc5 	bl	800de6c <xTaskCreate>
 800e2e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d102      	bne.n	800e2f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800e2ea:	f000 fe87 	bl	800effc <xTimerCreateTimerTask>
 800e2ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d116      	bne.n	800e324 <vTaskStartScheduler+0x5c>
        __asm volatile
 800e2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fa:	f383 8811 	msr	BASEPRI, r3
 800e2fe:	f3bf 8f6f 	isb	sy
 800e302:	f3bf 8f4f 	dsb	sy
 800e306:	60bb      	str	r3, [r7, #8]
    }
 800e308:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800e30a:	4b14      	ldr	r3, [pc, #80]	; (800e35c <vTaskStartScheduler+0x94>)
 800e30c:	f04f 32ff 	mov.w	r2, #4294967295
 800e310:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800e312:	4b13      	ldr	r3, [pc, #76]	; (800e360 <vTaskStartScheduler+0x98>)
 800e314:	2201      	movs	r2, #1
 800e316:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e318:	4b12      	ldr	r3, [pc, #72]	; (800e364 <vTaskStartScheduler+0x9c>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800e31e:	f001 f981 	bl	800f624 <xPortStartScheduler>
 800e322:	e00e      	b.n	800e342 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32a:	d10a      	bne.n	800e342 <vTaskStartScheduler+0x7a>
        __asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	f383 8811 	msr	BASEPRI, r3
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	607b      	str	r3, [r7, #4]
    }
 800e33e:	bf00      	nop
 800e340:	e7fe      	b.n	800e340 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800e342:	4b09      	ldr	r3, [pc, #36]	; (800e368 <vTaskStartScheduler+0xa0>)
 800e344:	681b      	ldr	r3, [r3, #0]
}
 800e346:	bf00      	nop
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	20000fcc 	.word	0x20000fcc
 800e354:	08010d9c 	.word	0x08010d9c
 800e358:	0800ec15 	.word	0x0800ec15
 800e35c:	20000fc8 	.word	0x20000fc8
 800e360:	20000fb4 	.word	0x20000fb4
 800e364:	20000fac 	.word	0x20000fac
 800e368:	20000048 	.word	0x20000048

0800e36c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e36c:	b480      	push	{r7}
 800e36e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800e370:	4b04      	ldr	r3, [pc, #16]	; (800e384 <vTaskSuspendAll+0x18>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	3301      	adds	r3, #1
 800e376:	4a03      	ldr	r2, [pc, #12]	; (800e384 <vTaskSuspendAll+0x18>)
 800e378:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800e37a:	bf00      	nop
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	20000fd0 	.word	0x20000fd0

0800e388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b088      	sub	sp, #32
 800e38c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800e38e:	2300      	movs	r3, #0
 800e390:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e392:	2300      	movs	r3, #0
 800e394:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800e396:	4b71      	ldr	r3, [pc, #452]	; (800e55c <xTaskResumeAll+0x1d4>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d10a      	bne.n	800e3b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	607b      	str	r3, [r7, #4]
    }
 800e3b0:	bf00      	nop
 800e3b2:	e7fe      	b.n	800e3b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800e3b4:	f001 f9d8 	bl	800f768 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800e3b8:	4b68      	ldr	r3, [pc, #416]	; (800e55c <xTaskResumeAll+0x1d4>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	4a67      	ldr	r2, [pc, #412]	; (800e55c <xTaskResumeAll+0x1d4>)
 800e3c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3c2:	4b66      	ldr	r3, [pc, #408]	; (800e55c <xTaskResumeAll+0x1d4>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f040 80c0 	bne.w	800e54c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3cc:	4b64      	ldr	r3, [pc, #400]	; (800e560 <xTaskResumeAll+0x1d8>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f000 80bb 	beq.w	800e54c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3d6:	e08a      	b.n	800e4ee <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d8:	4b62      	ldr	r3, [pc, #392]	; (800e564 <xTaskResumeAll+0x1dc>)
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e4:	613b      	str	r3, [r7, #16]
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	69fa      	ldr	r2, [r7, #28]
 800e3ec:	6a12      	ldr	r2, [r2, #32]
 800e3ee:	609a      	str	r2, [r3, #8]
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	6a1b      	ldr	r3, [r3, #32]
 800e3f4:	69fa      	ldr	r2, [r7, #28]
 800e3f6:	69d2      	ldr	r2, [r2, #28]
 800e3f8:	605a      	str	r2, [r3, #4]
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	685a      	ldr	r2, [r3, #4]
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	3318      	adds	r3, #24
 800e402:	429a      	cmp	r2, r3
 800e404:	d103      	bne.n	800e40e <xTaskResumeAll+0x86>
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	6a1a      	ldr	r2, [r3, #32]
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	605a      	str	r2, [r3, #4]
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	2200      	movs	r2, #0
 800e412:	629a      	str	r2, [r3, #40]	; 0x28
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	1e5a      	subs	r2, r3, #1
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	695b      	ldr	r3, [r3, #20]
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	69fa      	ldr	r2, [r7, #28]
 800e42a:	68d2      	ldr	r2, [r2, #12]
 800e42c:	609a      	str	r2, [r3, #8]
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	6892      	ldr	r2, [r2, #8]
 800e436:	605a      	str	r2, [r3, #4]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	3304      	adds	r3, #4
 800e440:	429a      	cmp	r2, r3
 800e442:	d103      	bne.n	800e44c <xTaskResumeAll+0xc4>
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	68da      	ldr	r2, [r3, #12]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	605a      	str	r2, [r3, #4]
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	2200      	movs	r2, #0
 800e450:	615a      	str	r2, [r3, #20]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	1e5a      	subs	r2, r3, #1
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e460:	2201      	movs	r2, #1
 800e462:	409a      	lsls	r2, r3
 800e464:	4b40      	ldr	r3, [pc, #256]	; (800e568 <xTaskResumeAll+0x1e0>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4313      	orrs	r3, r2
 800e46a:	4a3f      	ldr	r2, [pc, #252]	; (800e568 <xTaskResumeAll+0x1e0>)
 800e46c:	6013      	str	r3, [r2, #0]
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e472:	493e      	ldr	r1, [pc, #248]	; (800e56c <xTaskResumeAll+0x1e4>)
 800e474:	4613      	mov	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4413      	add	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	440b      	add	r3, r1
 800e47e:	3304      	adds	r3, #4
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	60bb      	str	r3, [r7, #8]
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	609a      	str	r2, [r3, #8]
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	689a      	ldr	r2, [r3, #8]
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	60da      	str	r2, [r3, #12]
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	689b      	ldr	r3, [r3, #8]
 800e496:	69fa      	ldr	r2, [r7, #28]
 800e498:	3204      	adds	r2, #4
 800e49a:	605a      	str	r2, [r3, #4]
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	1d1a      	adds	r2, r3, #4
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	609a      	str	r2, [r3, #8]
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4413      	add	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4a2e      	ldr	r2, [pc, #184]	; (800e56c <xTaskResumeAll+0x1e4>)
 800e4b2:	441a      	add	r2, r3
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	615a      	str	r2, [r3, #20]
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4bc:	492b      	ldr	r1, [pc, #172]	; (800e56c <xTaskResumeAll+0x1e4>)
 800e4be:	4613      	mov	r3, r2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	4413      	add	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	440b      	add	r3, r1
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	1c59      	adds	r1, r3, #1
 800e4cc:	4827      	ldr	r0, [pc, #156]	; (800e56c <xTaskResumeAll+0x1e4>)
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4413      	add	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	4403      	add	r3, r0
 800e4d8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4de:	4b24      	ldr	r3, [pc, #144]	; (800e570 <xTaskResumeAll+0x1e8>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d302      	bcc.n	800e4ee <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800e4e8:	4b22      	ldr	r3, [pc, #136]	; (800e574 <xTaskResumeAll+0x1ec>)
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4ee:	4b1d      	ldr	r3, [pc, #116]	; (800e564 <xTaskResumeAll+0x1dc>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f47f af70 	bne.w	800e3d8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800e4fe:	f000 fc1f 	bl	800ed40 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e502:	4b1d      	ldr	r3, [pc, #116]	; (800e578 <xTaskResumeAll+0x1f0>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d010      	beq.n	800e530 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800e50e:	f000 f847 	bl	800e5a0 <xTaskIncrementTick>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d002      	beq.n	800e51e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800e518:	4b16      	ldr	r3, [pc, #88]	; (800e574 <xTaskResumeAll+0x1ec>)
 800e51a:	2201      	movs	r2, #1
 800e51c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	3b01      	subs	r3, #1
 800e522:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1f1      	bne.n	800e50e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800e52a:	4b13      	ldr	r3, [pc, #76]	; (800e578 <xTaskResumeAll+0x1f0>)
 800e52c:	2200      	movs	r2, #0
 800e52e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800e530:	4b10      	ldr	r3, [pc, #64]	; (800e574 <xTaskResumeAll+0x1ec>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d009      	beq.n	800e54c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800e538:	2301      	movs	r3, #1
 800e53a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800e53c:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <xTaskResumeAll+0x1f4>)
 800e53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e542:	601a      	str	r2, [r3, #0]
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e54c:	f001 f93c 	bl	800f7c8 <vPortExitCritical>

    return xAlreadyYielded;
 800e550:	69bb      	ldr	r3, [r7, #24]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3720      	adds	r7, #32
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	20000fd0 	.word	0x20000fd0
 800e560:	20000fa8 	.word	0x20000fa8
 800e564:	20000f68 	.word	0x20000f68
 800e568:	20000fb0 	.word	0x20000fb0
 800e56c:	20000ed4 	.word	0x20000ed4
 800e570:	20000ed0 	.word	0x20000ed0
 800e574:	20000fbc 	.word	0x20000fbc
 800e578:	20000fb8 	.word	0x20000fb8
 800e57c:	e000ed04 	.word	0xe000ed04

0800e580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800e586:	4b05      	ldr	r3, [pc, #20]	; (800e59c <xTaskGetTickCount+0x1c>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800e58c:	687b      	ldr	r3, [r7, #4]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	20000fac 	.word	0x20000fac

0800e5a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b08a      	sub	sp, #40	; 0x28
 800e5a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5aa:	4b7d      	ldr	r3, [pc, #500]	; (800e7a0 <xTaskIncrementTick+0x200>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f040 80ec 	bne.w	800e78c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5b4:	4b7b      	ldr	r3, [pc, #492]	; (800e7a4 <xTaskIncrementTick+0x204>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800e5bc:	4a79      	ldr	r2, [pc, #484]	; (800e7a4 <xTaskIncrementTick+0x204>)
 800e5be:	6a3b      	ldr	r3, [r7, #32]
 800e5c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5c2:	6a3b      	ldr	r3, [r7, #32]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d120      	bne.n	800e60a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800e5c8:	4b77      	ldr	r3, [pc, #476]	; (800e7a8 <xTaskIncrementTick+0x208>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00a      	beq.n	800e5e8 <xTaskIncrementTick+0x48>
        __asm volatile
 800e5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	607b      	str	r3, [r7, #4]
    }
 800e5e4:	bf00      	nop
 800e5e6:	e7fe      	b.n	800e5e6 <xTaskIncrementTick+0x46>
 800e5e8:	4b6f      	ldr	r3, [pc, #444]	; (800e7a8 <xTaskIncrementTick+0x208>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	61fb      	str	r3, [r7, #28]
 800e5ee:	4b6f      	ldr	r3, [pc, #444]	; (800e7ac <xTaskIncrementTick+0x20c>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a6d      	ldr	r2, [pc, #436]	; (800e7a8 <xTaskIncrementTick+0x208>)
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	4a6d      	ldr	r2, [pc, #436]	; (800e7ac <xTaskIncrementTick+0x20c>)
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	4b6c      	ldr	r3, [pc, #432]	; (800e7b0 <xTaskIncrementTick+0x210>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	3301      	adds	r3, #1
 800e602:	4a6b      	ldr	r2, [pc, #428]	; (800e7b0 <xTaskIncrementTick+0x210>)
 800e604:	6013      	str	r3, [r2, #0]
 800e606:	f000 fb9b 	bl	800ed40 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800e60a:	4b6a      	ldr	r3, [pc, #424]	; (800e7b4 <xTaskIncrementTick+0x214>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	6a3a      	ldr	r2, [r7, #32]
 800e610:	429a      	cmp	r2, r3
 800e612:	f0c0 80a6 	bcc.w	800e762 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e616:	4b64      	ldr	r3, [pc, #400]	; (800e7a8 <xTaskIncrementTick+0x208>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d104      	bne.n	800e62a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e620:	4b64      	ldr	r3, [pc, #400]	; (800e7b4 <xTaskIncrementTick+0x214>)
 800e622:	f04f 32ff 	mov.w	r2, #4294967295
 800e626:	601a      	str	r2, [r3, #0]
                    break;
 800e628:	e09b      	b.n	800e762 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e62a:	4b5f      	ldr	r3, [pc, #380]	; (800e7a8 <xTaskIncrementTick+0x208>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800e63a:	6a3a      	ldr	r2, [r7, #32]
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d203      	bcs.n	800e64a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800e642:	4a5c      	ldr	r2, [pc, #368]	; (800e7b4 <xTaskIncrementTick+0x214>)
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800e648:	e08b      	b.n	800e762 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	695b      	ldr	r3, [r3, #20]
 800e64e:	613b      	str	r3, [r7, #16]
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	69ba      	ldr	r2, [r7, #24]
 800e656:	68d2      	ldr	r2, [r2, #12]
 800e658:	609a      	str	r2, [r3, #8]
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	69ba      	ldr	r2, [r7, #24]
 800e660:	6892      	ldr	r2, [r2, #8]
 800e662:	605a      	str	r2, [r3, #4]
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	3304      	adds	r3, #4
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d103      	bne.n	800e678 <xTaskIncrementTick+0xd8>
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	68da      	ldr	r2, [r3, #12]
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	605a      	str	r2, [r3, #4]
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	2200      	movs	r2, #0
 800e67c:	615a      	str	r2, [r3, #20]
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	1e5a      	subs	r2, r3, #1
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d01e      	beq.n	800e6ce <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e694:	60fb      	str	r3, [r7, #12]
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	69db      	ldr	r3, [r3, #28]
 800e69a:	69ba      	ldr	r2, [r7, #24]
 800e69c:	6a12      	ldr	r2, [r2, #32]
 800e69e:	609a      	str	r2, [r3, #8]
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	6a1b      	ldr	r3, [r3, #32]
 800e6a4:	69ba      	ldr	r2, [r7, #24]
 800e6a6:	69d2      	ldr	r2, [r2, #28]
 800e6a8:	605a      	str	r2, [r3, #4]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	685a      	ldr	r2, [r3, #4]
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	3318      	adds	r3, #24
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d103      	bne.n	800e6be <xTaskIncrementTick+0x11e>
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	6a1a      	ldr	r2, [r3, #32]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	605a      	str	r2, [r3, #4]
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	629a      	str	r2, [r3, #40]	; 0x28
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	1e5a      	subs	r2, r3, #1
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	409a      	lsls	r2, r3
 800e6d6:	4b38      	ldr	r3, [pc, #224]	; (800e7b8 <xTaskIncrementTick+0x218>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	4a36      	ldr	r2, [pc, #216]	; (800e7b8 <xTaskIncrementTick+0x218>)
 800e6de:	6013      	str	r3, [r2, #0]
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e4:	4935      	ldr	r1, [pc, #212]	; (800e7bc <xTaskIncrementTick+0x21c>)
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	440b      	add	r3, r1
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	60bb      	str	r3, [r7, #8]
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	609a      	str	r2, [r3, #8]
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	689a      	ldr	r2, [r3, #8]
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	60da      	str	r2, [r3, #12]
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	69ba      	ldr	r2, [r7, #24]
 800e70a:	3204      	adds	r2, #4
 800e70c:	605a      	str	r2, [r3, #4]
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	1d1a      	adds	r2, r3, #4
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	609a      	str	r2, [r3, #8]
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4a26      	ldr	r2, [pc, #152]	; (800e7bc <xTaskIncrementTick+0x21c>)
 800e724:	441a      	add	r2, r3
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	615a      	str	r2, [r3, #20]
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72e:	4923      	ldr	r1, [pc, #140]	; (800e7bc <xTaskIncrementTick+0x21c>)
 800e730:	4613      	mov	r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	440b      	add	r3, r1
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	1c59      	adds	r1, r3, #1
 800e73e:	481f      	ldr	r0, [pc, #124]	; (800e7bc <xTaskIncrementTick+0x21c>)
 800e740:	4613      	mov	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4403      	add	r3, r0
 800e74a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e750:	4b1b      	ldr	r3, [pc, #108]	; (800e7c0 <xTaskIncrementTick+0x220>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	429a      	cmp	r2, r3
 800e758:	f4ff af5d 	bcc.w	800e616 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800e75c:	2301      	movs	r3, #1
 800e75e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e760:	e759      	b.n	800e616 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e762:	4b17      	ldr	r3, [pc, #92]	; (800e7c0 <xTaskIncrementTick+0x220>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e768:	4914      	ldr	r1, [pc, #80]	; (800e7bc <xTaskIncrementTick+0x21c>)
 800e76a:	4613      	mov	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	4413      	add	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	440b      	add	r3, r1
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d901      	bls.n	800e77e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 800e77a:	2301      	movs	r3, #1
 800e77c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800e77e:	4b11      	ldr	r3, [pc, #68]	; (800e7c4 <xTaskIncrementTick+0x224>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d007      	beq.n	800e796 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 800e786:	2301      	movs	r3, #1
 800e788:	627b      	str	r3, [r7, #36]	; 0x24
 800e78a:	e004      	b.n	800e796 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800e78c:	4b0e      	ldr	r3, [pc, #56]	; (800e7c8 <xTaskIncrementTick+0x228>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3301      	adds	r3, #1
 800e792:	4a0d      	ldr	r2, [pc, #52]	; (800e7c8 <xTaskIncrementTick+0x228>)
 800e794:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3728      	adds	r7, #40	; 0x28
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20000fd0 	.word	0x20000fd0
 800e7a4:	20000fac 	.word	0x20000fac
 800e7a8:	20000f60 	.word	0x20000f60
 800e7ac:	20000f64 	.word	0x20000f64
 800e7b0:	20000fc0 	.word	0x20000fc0
 800e7b4:	20000fc8 	.word	0x20000fc8
 800e7b8:	20000fb0 	.word	0x20000fb0
 800e7bc:	20000ed4 	.word	0x20000ed4
 800e7c0:	20000ed0 	.word	0x20000ed0
 800e7c4:	20000fbc 	.word	0x20000fbc
 800e7c8:	20000fb8 	.word	0x20000fb8

0800e7cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b087      	sub	sp, #28
 800e7d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7d2:	4b27      	ldr	r3, [pc, #156]	; (800e870 <vTaskSwitchContext+0xa4>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800e7da:	4b26      	ldr	r3, [pc, #152]	; (800e874 <vTaskSwitchContext+0xa8>)
 800e7dc:	2201      	movs	r2, #1
 800e7de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800e7e0:	e03f      	b.n	800e862 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800e7e2:	4b24      	ldr	r3, [pc, #144]	; (800e874 <vTaskSwitchContext+0xa8>)
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e8:	4b23      	ldr	r3, [pc, #140]	; (800e878 <vTaskSwitchContext+0xac>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	fab3 f383 	clz	r3, r3
 800e7f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800e7f6:	7afb      	ldrb	r3, [r7, #11]
 800e7f8:	f1c3 031f 	rsb	r3, r3, #31
 800e7fc:	617b      	str	r3, [r7, #20]
 800e7fe:	491f      	ldr	r1, [pc, #124]	; (800e87c <vTaskSwitchContext+0xb0>)
 800e800:	697a      	ldr	r2, [r7, #20]
 800e802:	4613      	mov	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4413      	add	r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	440b      	add	r3, r1
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10a      	bne.n	800e828 <vTaskSwitchContext+0x5c>
        __asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	607b      	str	r3, [r7, #4]
    }
 800e824:	bf00      	nop
 800e826:	e7fe      	b.n	800e826 <vTaskSwitchContext+0x5a>
 800e828:	697a      	ldr	r2, [r7, #20]
 800e82a:	4613      	mov	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	4413      	add	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4a12      	ldr	r2, [pc, #72]	; (800e87c <vTaskSwitchContext+0xb0>)
 800e834:	4413      	add	r3, r2
 800e836:	613b      	str	r3, [r7, #16]
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	605a      	str	r2, [r3, #4]
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	685a      	ldr	r2, [r3, #4]
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	3308      	adds	r3, #8
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d104      	bne.n	800e858 <vTaskSwitchContext+0x8c>
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	685a      	ldr	r2, [r3, #4]
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	605a      	str	r2, [r3, #4]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	4a08      	ldr	r2, [pc, #32]	; (800e880 <vTaskSwitchContext+0xb4>)
 800e860:	6013      	str	r3, [r2, #0]
}
 800e862:	bf00      	nop
 800e864:	371c      	adds	r7, #28
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000fd0 	.word	0x20000fd0
 800e874:	20000fbc 	.word	0x20000fbc
 800e878:	20000fb0 	.word	0x20000fb0
 800e87c:	20000ed4 	.word	0x20000ed4
 800e880:	20000ed0 	.word	0x20000ed0

0800e884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10a      	bne.n	800e8aa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800e894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e898:	f383 8811 	msr	BASEPRI, r3
 800e89c:	f3bf 8f6f 	isb	sy
 800e8a0:	f3bf 8f4f 	dsb	sy
 800e8a4:	60fb      	str	r3, [r7, #12]
    }
 800e8a6:	bf00      	nop
 800e8a8:	e7fe      	b.n	800e8a8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8aa:	4b07      	ldr	r3, [pc, #28]	; (800e8c8 <vTaskPlaceOnEventList+0x44>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3318      	adds	r3, #24
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7fe fde7 	bl	800d486 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	6838      	ldr	r0, [r7, #0]
 800e8bc:	f000 fb1e 	bl	800eefc <prvAddCurrentTaskToDelayedList>
}
 800e8c0:	bf00      	nop
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	20000ed0 	.word	0x20000ed0

0800e8cc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10a      	bne.n	800e8f4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	613b      	str	r3, [r7, #16]
    }
 800e8f0:	bf00      	nop
 800e8f2:	e7fe      	b.n	800e8f2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	617b      	str	r3, [r7, #20]
 800e8fa:	4b16      	ldr	r3, [pc, #88]	; (800e954 <vTaskPlaceOnEventListRestricted+0x88>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	61da      	str	r2, [r3, #28]
 800e902:	4b14      	ldr	r3, [pc, #80]	; (800e954 <vTaskPlaceOnEventListRestricted+0x88>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	697a      	ldr	r2, [r7, #20]
 800e908:	6892      	ldr	r2, [r2, #8]
 800e90a:	621a      	str	r2, [r3, #32]
 800e90c:	4b11      	ldr	r3, [pc, #68]	; (800e954 <vTaskPlaceOnEventListRestricted+0x88>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	3218      	adds	r2, #24
 800e916:	605a      	str	r2, [r3, #4]
 800e918:	4b0e      	ldr	r3, [pc, #56]	; (800e954 <vTaskPlaceOnEventListRestricted+0x88>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f103 0218 	add.w	r2, r3, #24
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	609a      	str	r2, [r3, #8]
 800e924:	4b0b      	ldr	r3, [pc, #44]	; (800e954 <vTaskPlaceOnEventListRestricted+0x88>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	629a      	str	r2, [r3, #40]	; 0x28
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	1c5a      	adds	r2, r3, #1
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d002      	beq.n	800e942 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800e93c:	f04f 33ff 	mov.w	r3, #4294967295
 800e940:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e942:	6879      	ldr	r1, [r7, #4]
 800e944:	68b8      	ldr	r0, [r7, #8]
 800e946:	f000 fad9 	bl	800eefc <prvAddCurrentTaskToDelayedList>
    }
 800e94a:	bf00      	nop
 800e94c:	3718      	adds	r7, #24
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	20000ed0 	.word	0x20000ed0

0800e958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e958:	b480      	push	{r7}
 800e95a:	b08b      	sub	sp, #44	; 0x2c
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10a      	bne.n	800e984 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800e96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	60fb      	str	r3, [r7, #12]
    }
 800e980:	bf00      	nop
 800e982:	e7fe      	b.n	800e982 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800e984:	6a3b      	ldr	r3, [r7, #32]
 800e986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e988:	61fb      	str	r3, [r7, #28]
 800e98a:	6a3b      	ldr	r3, [r7, #32]
 800e98c:	69db      	ldr	r3, [r3, #28]
 800e98e:	6a3a      	ldr	r2, [r7, #32]
 800e990:	6a12      	ldr	r2, [r2, #32]
 800e992:	609a      	str	r2, [r3, #8]
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	6a1b      	ldr	r3, [r3, #32]
 800e998:	6a3a      	ldr	r2, [r7, #32]
 800e99a:	69d2      	ldr	r2, [r2, #28]
 800e99c:	605a      	str	r2, [r3, #4]
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	685a      	ldr	r2, [r3, #4]
 800e9a2:	6a3b      	ldr	r3, [r7, #32]
 800e9a4:	3318      	adds	r3, #24
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d103      	bne.n	800e9b2 <xTaskRemoveFromEventList+0x5a>
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	6a1a      	ldr	r2, [r3, #32]
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	605a      	str	r2, [r3, #4]
 800e9b2:	6a3b      	ldr	r3, [r7, #32]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	629a      	str	r2, [r3, #40]	; 0x28
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	1e5a      	subs	r2, r3, #1
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9c2:	4b4a      	ldr	r3, [pc, #296]	; (800eaec <xTaskRemoveFromEventList+0x194>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d15e      	bne.n	800ea88 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	695b      	ldr	r3, [r3, #20]
 800e9ce:	617b      	str	r3, [r7, #20]
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	6a3a      	ldr	r2, [r7, #32]
 800e9d6:	68d2      	ldr	r2, [r2, #12]
 800e9d8:	609a      	str	r2, [r3, #8]
 800e9da:	6a3b      	ldr	r3, [r7, #32]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	6a3a      	ldr	r2, [r7, #32]
 800e9e0:	6892      	ldr	r2, [r2, #8]
 800e9e2:	605a      	str	r2, [r3, #4]
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	685a      	ldr	r2, [r3, #4]
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	3304      	adds	r3, #4
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d103      	bne.n	800e9f8 <xTaskRemoveFromEventList+0xa0>
 800e9f0:	6a3b      	ldr	r3, [r7, #32]
 800e9f2:	68da      	ldr	r2, [r3, #12]
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	605a      	str	r2, [r3, #4]
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	615a      	str	r2, [r3, #20]
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	1e5a      	subs	r2, r3, #1
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ea08:	6a3b      	ldr	r3, [r7, #32]
 800ea0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	409a      	lsls	r2, r3
 800ea10:	4b37      	ldr	r3, [pc, #220]	; (800eaf0 <xTaskRemoveFromEventList+0x198>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4313      	orrs	r3, r2
 800ea16:	4a36      	ldr	r2, [pc, #216]	; (800eaf0 <xTaskRemoveFromEventList+0x198>)
 800ea18:	6013      	str	r3, [r2, #0]
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea1e:	4935      	ldr	r1, [pc, #212]	; (800eaf4 <xTaskRemoveFromEventList+0x19c>)
 800ea20:	4613      	mov	r3, r2
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	4413      	add	r3, r2
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	440b      	add	r3, r1
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	613b      	str	r3, [r7, #16]
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	693a      	ldr	r2, [r7, #16]
 800ea34:	609a      	str	r2, [r3, #8]
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	689a      	ldr	r2, [r3, #8]
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	60da      	str	r2, [r3, #12]
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	6a3a      	ldr	r2, [r7, #32]
 800ea44:	3204      	adds	r2, #4
 800ea46:	605a      	str	r2, [r3, #4]
 800ea48:	6a3b      	ldr	r3, [r7, #32]
 800ea4a:	1d1a      	adds	r2, r3, #4
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	609a      	str	r2, [r3, #8]
 800ea50:	6a3b      	ldr	r3, [r7, #32]
 800ea52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea54:	4613      	mov	r3, r2
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4413      	add	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4a25      	ldr	r2, [pc, #148]	; (800eaf4 <xTaskRemoveFromEventList+0x19c>)
 800ea5e:	441a      	add	r2, r3
 800ea60:	6a3b      	ldr	r3, [r7, #32]
 800ea62:	615a      	str	r2, [r3, #20]
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea68:	4922      	ldr	r1, [pc, #136]	; (800eaf4 <xTaskRemoveFromEventList+0x19c>)
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	4413      	add	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	440b      	add	r3, r1
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	1c59      	adds	r1, r3, #1
 800ea78:	481e      	ldr	r0, [pc, #120]	; (800eaf4 <xTaskRemoveFromEventList+0x19c>)
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	4413      	add	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	4403      	add	r3, r0
 800ea84:	6019      	str	r1, [r3, #0]
 800ea86:	e01b      	b.n	800eac0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea88:	4b1b      	ldr	r3, [pc, #108]	; (800eaf8 <xTaskRemoveFromEventList+0x1a0>)
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	61bb      	str	r3, [r7, #24]
 800ea8e:	6a3b      	ldr	r3, [r7, #32]
 800ea90:	69ba      	ldr	r2, [r7, #24]
 800ea92:	61da      	str	r2, [r3, #28]
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	689a      	ldr	r2, [r3, #8]
 800ea98:	6a3b      	ldr	r3, [r7, #32]
 800ea9a:	621a      	str	r2, [r3, #32]
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	6a3a      	ldr	r2, [r7, #32]
 800eaa2:	3218      	adds	r2, #24
 800eaa4:	605a      	str	r2, [r3, #4]
 800eaa6:	6a3b      	ldr	r3, [r7, #32]
 800eaa8:	f103 0218 	add.w	r2, r3, #24
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	609a      	str	r2, [r3, #8]
 800eab0:	6a3b      	ldr	r3, [r7, #32]
 800eab2:	4a11      	ldr	r2, [pc, #68]	; (800eaf8 <xTaskRemoveFromEventList+0x1a0>)
 800eab4:	629a      	str	r2, [r3, #40]	; 0x28
 800eab6:	4b10      	ldr	r3, [pc, #64]	; (800eaf8 <xTaskRemoveFromEventList+0x1a0>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3301      	adds	r3, #1
 800eabc:	4a0e      	ldr	r2, [pc, #56]	; (800eaf8 <xTaskRemoveFromEventList+0x1a0>)
 800eabe:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eac0:	6a3b      	ldr	r3, [r7, #32]
 800eac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac4:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <xTaskRemoveFromEventList+0x1a4>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d905      	bls.n	800eada <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800eace:	2301      	movs	r3, #1
 800ead0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800ead2:	4b0b      	ldr	r3, [pc, #44]	; (800eb00 <xTaskRemoveFromEventList+0x1a8>)
 800ead4:	2201      	movs	r2, #1
 800ead6:	601a      	str	r2, [r3, #0]
 800ead8:	e001      	b.n	800eade <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800eada:	2300      	movs	r3, #0
 800eadc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800eade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	372c      	adds	r7, #44	; 0x2c
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	20000fd0 	.word	0x20000fd0
 800eaf0:	20000fb0 	.word	0x20000fb0
 800eaf4:	20000ed4 	.word	0x20000ed4
 800eaf8:	20000f68 	.word	0x20000f68
 800eafc:	20000ed0 	.word	0x20000ed0
 800eb00:	20000fbc 	.word	0x20000fbc

0800eb04 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb0c:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <vTaskInternalSetTimeOutState+0x24>)
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800eb14:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <vTaskInternalSetTimeOutState+0x28>)
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	605a      	str	r2, [r3, #4]
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	20000fc0 	.word	0x20000fc0
 800eb2c:	20000fac 	.word	0x20000fac

0800eb30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b088      	sub	sp, #32
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10a      	bne.n	800eb56 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800eb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb44:	f383 8811 	msr	BASEPRI, r3
 800eb48:	f3bf 8f6f 	isb	sy
 800eb4c:	f3bf 8f4f 	dsb	sy
 800eb50:	613b      	str	r3, [r7, #16]
    }
 800eb52:	bf00      	nop
 800eb54:	e7fe      	b.n	800eb54 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10a      	bne.n	800eb72 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800eb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	60fb      	str	r3, [r7, #12]
    }
 800eb6e:	bf00      	nop
 800eb70:	e7fe      	b.n	800eb70 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800eb72:	f000 fdf9 	bl	800f768 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800eb76:	4b1f      	ldr	r3, [pc, #124]	; (800ebf4 <xTaskCheckForTimeOut+0xc4>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	69ba      	ldr	r2, [r7, #24]
 800eb82:	1ad3      	subs	r3, r2, r3
 800eb84:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb8e:	d102      	bne.n	800eb96 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800eb90:	2300      	movs	r3, #0
 800eb92:	61fb      	str	r3, [r7, #28]
 800eb94:	e026      	b.n	800ebe4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	4b17      	ldr	r3, [pc, #92]	; (800ebf8 <xTaskCheckForTimeOut+0xc8>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d00a      	beq.n	800ebb8 <xTaskCheckForTimeOut+0x88>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	69ba      	ldr	r2, [r7, #24]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d305      	bcc.n	800ebb8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800ebac:	2301      	movs	r3, #1
 800ebae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	601a      	str	r2, [r3, #0]
 800ebb6:	e015      	b.n	800ebe4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	697a      	ldr	r2, [r7, #20]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d20b      	bcs.n	800ebda <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	1ad2      	subs	r2, r2, r3
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7ff ff98 	bl	800eb04 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	61fb      	str	r3, [r7, #28]
 800ebd8:	e004      	b.n	800ebe4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800ebe4:	f000 fdf0 	bl	800f7c8 <vPortExitCritical>

    return xReturn;
 800ebe8:	69fb      	ldr	r3, [r7, #28]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3720      	adds	r7, #32
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20000fac 	.word	0x20000fac
 800ebf8:	20000fc0 	.word	0x20000fc0

0800ebfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800ec00:	4b03      	ldr	r3, [pc, #12]	; (800ec10 <vTaskMissedYield+0x14>)
 800ec02:	2201      	movs	r2, #1
 800ec04:	601a      	str	r2, [r3, #0]
}
 800ec06:	bf00      	nop
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr
 800ec10:	20000fbc 	.word	0x20000fbc

0800ec14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800ec1c:	f000 f852 	bl	800ecc4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec20:	4b06      	ldr	r3, [pc, #24]	; (800ec3c <prvIdleTask+0x28>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d9f9      	bls.n	800ec1c <prvIdleTask+0x8>
                {
                    taskYIELD();
 800ec28:	4b05      	ldr	r3, [pc, #20]	; (800ec40 <prvIdleTask+0x2c>)
 800ec2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec2e:	601a      	str	r2, [r3, #0]
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800ec38:	e7f0      	b.n	800ec1c <prvIdleTask+0x8>
 800ec3a:	bf00      	nop
 800ec3c:	20000ed4 	.word	0x20000ed4
 800ec40:	e000ed04 	.word	0xe000ed04

0800ec44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	607b      	str	r3, [r7, #4]
 800ec4e:	e00c      	b.n	800ec6a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	4613      	mov	r3, r2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	4413      	add	r3, r2
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	4a12      	ldr	r2, [pc, #72]	; (800eca4 <prvInitialiseTaskLists+0x60>)
 800ec5c:	4413      	add	r3, r2
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe fbe4 	bl	800d42c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	3301      	adds	r3, #1
 800ec68:	607b      	str	r3, [r7, #4]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2b04      	cmp	r3, #4
 800ec6e:	d9ef      	bls.n	800ec50 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ec70:	480d      	ldr	r0, [pc, #52]	; (800eca8 <prvInitialiseTaskLists+0x64>)
 800ec72:	f7fe fbdb 	bl	800d42c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ec76:	480d      	ldr	r0, [pc, #52]	; (800ecac <prvInitialiseTaskLists+0x68>)
 800ec78:	f7fe fbd8 	bl	800d42c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ec7c:	480c      	ldr	r0, [pc, #48]	; (800ecb0 <prvInitialiseTaskLists+0x6c>)
 800ec7e:	f7fe fbd5 	bl	800d42c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800ec82:	480c      	ldr	r0, [pc, #48]	; (800ecb4 <prvInitialiseTaskLists+0x70>)
 800ec84:	f7fe fbd2 	bl	800d42c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800ec88:	480b      	ldr	r0, [pc, #44]	; (800ecb8 <prvInitialiseTaskLists+0x74>)
 800ec8a:	f7fe fbcf 	bl	800d42c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ec8e:	4b0b      	ldr	r3, [pc, #44]	; (800ecbc <prvInitialiseTaskLists+0x78>)
 800ec90:	4a05      	ldr	r2, [pc, #20]	; (800eca8 <prvInitialiseTaskLists+0x64>)
 800ec92:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec94:	4b0a      	ldr	r3, [pc, #40]	; (800ecc0 <prvInitialiseTaskLists+0x7c>)
 800ec96:	4a05      	ldr	r2, [pc, #20]	; (800ecac <prvInitialiseTaskLists+0x68>)
 800ec98:	601a      	str	r2, [r3, #0]
}
 800ec9a:	bf00      	nop
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000ed4 	.word	0x20000ed4
 800eca8:	20000f38 	.word	0x20000f38
 800ecac:	20000f4c 	.word	0x20000f4c
 800ecb0:	20000f68 	.word	0x20000f68
 800ecb4:	20000f7c 	.word	0x20000f7c
 800ecb8:	20000f94 	.word	0x20000f94
 800ecbc:	20000f60 	.word	0x20000f60
 800ecc0:	20000f64 	.word	0x20000f64

0800ecc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecca:	e019      	b.n	800ed00 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800eccc:	f000 fd4c 	bl	800f768 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecd0:	4b10      	ldr	r3, [pc, #64]	; (800ed14 <prvCheckTasksWaitingTermination+0x50>)
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	3304      	adds	r3, #4
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fe fc0b 	bl	800d4f8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800ece2:	4b0d      	ldr	r3, [pc, #52]	; (800ed18 <prvCheckTasksWaitingTermination+0x54>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	4a0b      	ldr	r2, [pc, #44]	; (800ed18 <prvCheckTasksWaitingTermination+0x54>)
 800ecea:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800ecec:	4b0b      	ldr	r3, [pc, #44]	; (800ed1c <prvCheckTasksWaitingTermination+0x58>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	4a0a      	ldr	r2, [pc, #40]	; (800ed1c <prvCheckTasksWaitingTermination+0x58>)
 800ecf4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800ecf6:	f000 fd67 	bl	800f7c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 f810 	bl	800ed20 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed00:	4b06      	ldr	r3, [pc, #24]	; (800ed1c <prvCheckTasksWaitingTermination+0x58>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1e1      	bne.n	800eccc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800ed08:	bf00      	nop
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20000f7c 	.word	0x20000f7c
 800ed18:	20000fa8 	.word	0x20000fa8
 800ed1c:	20000f90 	.word	0x20000f90

0800ed20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 fedd 	bl	800faec <vPortFree>
                vPortFree( pxTCB );
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 feda 	bl	800faec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800ed38:	bf00      	nop
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed40:	b480      	push	{r7}
 800ed42:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed44:	4b0a      	ldr	r3, [pc, #40]	; (800ed70 <prvResetNextTaskUnblockTime+0x30>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d104      	bne.n	800ed58 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ed4e:	4b09      	ldr	r3, [pc, #36]	; (800ed74 <prvResetNextTaskUnblockTime+0x34>)
 800ed50:	f04f 32ff 	mov.w	r2, #4294967295
 800ed54:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ed56:	e005      	b.n	800ed64 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ed58:	4b05      	ldr	r3, [pc, #20]	; (800ed70 <prvResetNextTaskUnblockTime+0x30>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a04      	ldr	r2, [pc, #16]	; (800ed74 <prvResetNextTaskUnblockTime+0x34>)
 800ed62:	6013      	str	r3, [r2, #0]
}
 800ed64:	bf00      	nop
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	20000f60 	.word	0x20000f60
 800ed74:	20000fc8 	.word	0x20000fc8

0800ed78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800ed7e:	4b0b      	ldr	r3, [pc, #44]	; (800edac <xTaskGetSchedulerState+0x34>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d102      	bne.n	800ed8c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800ed86:	2301      	movs	r3, #1
 800ed88:	607b      	str	r3, [r7, #4]
 800ed8a:	e008      	b.n	800ed9e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed8c:	4b08      	ldr	r3, [pc, #32]	; (800edb0 <xTaskGetSchedulerState+0x38>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d102      	bne.n	800ed9a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800ed94:	2302      	movs	r3, #2
 800ed96:	607b      	str	r3, [r7, #4]
 800ed98:	e001      	b.n	800ed9e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800ed9e:	687b      	ldr	r3, [r7, #4]
    }
 800eda0:	4618      	mov	r0, r3
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr
 800edac:	20000fb4 	.word	0x20000fb4
 800edb0:	20000fd0 	.word	0x20000fd0

0800edb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b088      	sub	sp, #32
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800edc0:	2300      	movs	r3, #0
 800edc2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f000 808c 	beq.w	800eee4 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800edcc:	4b48      	ldr	r3, [pc, #288]	; (800eef0 <xTaskPriorityDisinherit+0x13c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	69ba      	ldr	r2, [r7, #24]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d00a      	beq.n	800edec <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800edd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edda:	f383 8811 	msr	BASEPRI, r3
 800edde:	f3bf 8f6f 	isb	sy
 800ede2:	f3bf 8f4f 	dsb	sy
 800ede6:	613b      	str	r3, [r7, #16]
    }
 800ede8:	bf00      	nop
 800edea:	e7fe      	b.n	800edea <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10a      	bne.n	800ee0a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	60fb      	str	r3, [r7, #12]
    }
 800ee06:	bf00      	nop
 800ee08:	e7fe      	b.n	800ee08 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee0e:	1e5a      	subs	r2, r3, #1
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d061      	beq.n	800eee4 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d15d      	bne.n	800eee4 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7fe fb63 	bl	800d4f8 <uxListRemove>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10a      	bne.n	800ee4e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee42:	43da      	mvns	r2, r3
 800ee44:	4b2b      	ldr	r3, [pc, #172]	; (800eef4 <xTaskPriorityDisinherit+0x140>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4013      	ands	r3, r2
 800ee4a:	4a2a      	ldr	r2, [pc, #168]	; (800eef4 <xTaskPriorityDisinherit+0x140>)
 800ee4c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5a:	f1c3 0205 	rsb	r2, r3, #5
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	2201      	movs	r2, #1
 800ee68:	409a      	lsls	r2, r3
 800ee6a:	4b22      	ldr	r3, [pc, #136]	; (800eef4 <xTaskPriorityDisinherit+0x140>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	4a20      	ldr	r2, [pc, #128]	; (800eef4 <xTaskPriorityDisinherit+0x140>)
 800ee72:	6013      	str	r3, [r2, #0]
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee78:	491f      	ldr	r1, [pc, #124]	; (800eef8 <xTaskPriorityDisinherit+0x144>)
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	4413      	add	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	440b      	add	r3, r1
 800ee84:	3304      	adds	r3, #4
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	617b      	str	r3, [r7, #20]
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	697a      	ldr	r2, [r7, #20]
 800ee8e:	609a      	str	r2, [r3, #8]
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	689a      	ldr	r2, [r3, #8]
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	60da      	str	r2, [r3, #12]
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	689b      	ldr	r3, [r3, #8]
 800ee9c:	69ba      	ldr	r2, [r7, #24]
 800ee9e:	3204      	adds	r2, #4
 800eea0:	605a      	str	r2, [r3, #4]
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	1d1a      	adds	r2, r3, #4
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	609a      	str	r2, [r3, #8]
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeae:	4613      	mov	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4413      	add	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4a10      	ldr	r2, [pc, #64]	; (800eef8 <xTaskPriorityDisinherit+0x144>)
 800eeb8:	441a      	add	r2, r3
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	615a      	str	r2, [r3, #20]
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec2:	490d      	ldr	r1, [pc, #52]	; (800eef8 <xTaskPriorityDisinherit+0x144>)
 800eec4:	4613      	mov	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4413      	add	r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	440b      	add	r3, r1
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	1c59      	adds	r1, r3, #1
 800eed2:	4809      	ldr	r0, [pc, #36]	; (800eef8 <xTaskPriorityDisinherit+0x144>)
 800eed4:	4613      	mov	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4403      	add	r3, r0
 800eede:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800eee0:	2301      	movs	r3, #1
 800eee2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800eee4:	69fb      	ldr	r3, [r7, #28]
    }
 800eee6:	4618      	mov	r0, r3
 800eee8:	3720      	adds	r7, #32
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	20000ed0 	.word	0x20000ed0
 800eef4:	20000fb0 	.word	0x20000fb0
 800eef8:	20000ed4 	.word	0x20000ed4

0800eefc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800ef06:	4b36      	ldr	r3, [pc, #216]	; (800efe0 <prvAddCurrentTaskToDelayedList+0xe4>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef0c:	4b35      	ldr	r3, [pc, #212]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	3304      	adds	r3, #4
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fe faf0 	bl	800d4f8 <uxListRemove>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10b      	bne.n	800ef36 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ef1e:	4b31      	ldr	r3, [pc, #196]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef24:	2201      	movs	r2, #1
 800ef26:	fa02 f303 	lsl.w	r3, r2, r3
 800ef2a:	43da      	mvns	r2, r3
 800ef2c:	4b2e      	ldr	r3, [pc, #184]	; (800efe8 <prvAddCurrentTaskToDelayedList+0xec>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4013      	ands	r3, r2
 800ef32:	4a2d      	ldr	r2, [pc, #180]	; (800efe8 <prvAddCurrentTaskToDelayedList+0xec>)
 800ef34:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef3c:	d124      	bne.n	800ef88 <prvAddCurrentTaskToDelayedList+0x8c>
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d021      	beq.n	800ef88 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef44:	4b29      	ldr	r3, [pc, #164]	; (800efec <prvAddCurrentTaskToDelayedList+0xf0>)
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	613b      	str	r3, [r7, #16]
 800ef4a:	4b26      	ldr	r3, [pc, #152]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	693a      	ldr	r2, [r7, #16]
 800ef50:	609a      	str	r2, [r3, #8]
 800ef52:	4b24      	ldr	r3, [pc, #144]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	6892      	ldr	r2, [r2, #8]
 800ef5a:	60da      	str	r2, [r3, #12]
 800ef5c:	4b21      	ldr	r3, [pc, #132]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	3204      	adds	r2, #4
 800ef66:	605a      	str	r2, [r3, #4]
 800ef68:	4b1e      	ldr	r3, [pc, #120]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	1d1a      	adds	r2, r3, #4
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	609a      	str	r2, [r3, #8]
 800ef72:	4b1c      	ldr	r3, [pc, #112]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a1d      	ldr	r2, [pc, #116]	; (800efec <prvAddCurrentTaskToDelayedList+0xf0>)
 800ef78:	615a      	str	r2, [r3, #20]
 800ef7a:	4b1c      	ldr	r3, [pc, #112]	; (800efec <prvAddCurrentTaskToDelayedList+0xf0>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	4a1a      	ldr	r2, [pc, #104]	; (800efec <prvAddCurrentTaskToDelayedList+0xf0>)
 800ef82:	6013      	str	r3, [r2, #0]
 800ef84:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ef86:	e026      	b.n	800efd6 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef90:	4b14      	ldr	r3, [pc, #80]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d209      	bcs.n	800efb4 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efa0:	4b13      	ldr	r3, [pc, #76]	; (800eff0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	4b0f      	ldr	r3, [pc, #60]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	3304      	adds	r3, #4
 800efaa:	4619      	mov	r1, r3
 800efac:	4610      	mov	r0, r2
 800efae:	f7fe fa6a 	bl	800d486 <vListInsert>
}
 800efb2:	e010      	b.n	800efd6 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efb4:	4b0f      	ldr	r3, [pc, #60]	; (800eff4 <prvAddCurrentTaskToDelayedList+0xf8>)
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	4b0a      	ldr	r3, [pc, #40]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	3304      	adds	r3, #4
 800efbe:	4619      	mov	r1, r3
 800efc0:	4610      	mov	r0, r2
 800efc2:	f7fe fa60 	bl	800d486 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800efc6:	4b0c      	ldr	r3, [pc, #48]	; (800eff8 <prvAddCurrentTaskToDelayedList+0xfc>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d202      	bcs.n	800efd6 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800efd0:	4a09      	ldr	r2, [pc, #36]	; (800eff8 <prvAddCurrentTaskToDelayedList+0xfc>)
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6013      	str	r3, [r2, #0]
}
 800efd6:	bf00      	nop
 800efd8:	3718      	adds	r7, #24
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	20000fac 	.word	0x20000fac
 800efe4:	20000ed0 	.word	0x20000ed0
 800efe8:	20000fb0 	.word	0x20000fb0
 800efec:	20000f94 	.word	0x20000f94
 800eff0:	20000f64 	.word	0x20000f64
 800eff4:	20000f60 	.word	0x20000f60
 800eff8:	20000fc8 	.word	0x20000fc8

0800effc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800f002:	2300      	movs	r3, #0
 800f004:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800f006:	f000 fa47 	bl	800f498 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800f00a:	4b11      	ldr	r3, [pc, #68]	; (800f050 <xTimerCreateTimerTask+0x54>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00b      	beq.n	800f02a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800f012:	4b10      	ldr	r3, [pc, #64]	; (800f054 <xTimerCreateTimerTask+0x58>)
 800f014:	9301      	str	r3, [sp, #4]
 800f016:	2302      	movs	r3, #2
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	2300      	movs	r3, #0
 800f01c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f020:	490d      	ldr	r1, [pc, #52]	; (800f058 <xTimerCreateTimerTask+0x5c>)
 800f022:	480e      	ldr	r0, [pc, #56]	; (800f05c <xTimerCreateTimerTask+0x60>)
 800f024:	f7fe ff22 	bl	800de6c <xTaskCreate>
 800f028:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d10a      	bne.n	800f046 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800f030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f034:	f383 8811 	msr	BASEPRI, r3
 800f038:	f3bf 8f6f 	isb	sy
 800f03c:	f3bf 8f4f 	dsb	sy
 800f040:	603b      	str	r3, [r7, #0]
    }
 800f042:	bf00      	nop
 800f044:	e7fe      	b.n	800f044 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800f046:	687b      	ldr	r3, [r7, #4]
    }
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	20001004 	.word	0x20001004
 800f054:	20001008 	.word	0x20001008
 800f058:	08010da4 	.word	0x08010da4
 800f05c:	0800f105 	.word	0x0800f105

0800f060 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800f06c:	e008      	b.n	800f080 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	699b      	ldr	r3, [r3, #24]
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	4413      	add	r3, r2
 800f076:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6a1b      	ldr	r3, [r3, #32]
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	699a      	ldr	r2, [r3, #24]
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	18d1      	adds	r1, r2, r3
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f000 f8dd 	bl	800f24c <prvInsertTimerInActiveList>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d1ea      	bne.n	800f06e <prvReloadTimer+0xe>
        }
    }
 800f098:	bf00      	nop
 800f09a:	bf00      	nop
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
	...

0800f0a4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0ae:	4b14      	ldr	r3, [pc, #80]	; (800f100 <prvProcessExpiredTimer+0x5c>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fe fa1b 	bl	800d4f8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0c8:	f003 0304 	and.w	r3, r3, #4
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d005      	beq.n	800f0dc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	6879      	ldr	r1, [r7, #4]
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	f7ff ffc3 	bl	800f060 <prvReloadTimer>
 800f0da:	e008      	b.n	800f0ee <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0e2:	f023 0301 	bic.w	r3, r3, #1
 800f0e6:	b2da      	uxtb	r2, r3
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	4798      	blx	r3
    }
 800f0f6:	bf00      	nop
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	20000ffc 	.word	0x20000ffc

0800f104 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f10c:	f107 0308 	add.w	r3, r7, #8
 800f110:	4618      	mov	r0, r3
 800f112:	f000 f857 	bl	800f1c4 <prvGetNextExpireTime>
 800f116:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	4619      	mov	r1, r3
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f000 f803 	bl	800f128 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800f122:	f000 f8d5 	bl	800f2d0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f126:	e7f1      	b.n	800f10c <prvTimerTask+0x8>

0800f128 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800f132:	f7ff f91b 	bl	800e36c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f136:	f107 0308 	add.w	r3, r7, #8
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 f866 	bl	800f20c <prvSampleTimeNow>
 800f140:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d130      	bne.n	800f1aa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10a      	bne.n	800f164 <prvProcessTimerOrBlockTask+0x3c>
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	429a      	cmp	r2, r3
 800f154:	d806      	bhi.n	800f164 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800f156:	f7ff f917 	bl	800e388 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f15a:	68f9      	ldr	r1, [r7, #12]
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f7ff ffa1 	bl	800f0a4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800f162:	e024      	b.n	800f1ae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d008      	beq.n	800f17c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f16a:	4b13      	ldr	r3, [pc, #76]	; (800f1b8 <prvProcessTimerOrBlockTask+0x90>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d101      	bne.n	800f178 <prvProcessTimerOrBlockTask+0x50>
 800f174:	2301      	movs	r3, #1
 800f176:	e000      	b.n	800f17a <prvProcessTimerOrBlockTask+0x52>
 800f178:	2300      	movs	r3, #0
 800f17a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f17c:	4b0f      	ldr	r3, [pc, #60]	; (800f1bc <prvProcessTimerOrBlockTask+0x94>)
 800f17e:	6818      	ldr	r0, [r3, #0]
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	683a      	ldr	r2, [r7, #0]
 800f188:	4619      	mov	r1, r3
 800f18a:	f7fe fe3b 	bl	800de04 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800f18e:	f7ff f8fb 	bl	800e388 <xTaskResumeAll>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d10a      	bne.n	800f1ae <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800f198:	4b09      	ldr	r3, [pc, #36]	; (800f1c0 <prvProcessTimerOrBlockTask+0x98>)
 800f19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f19e:	601a      	str	r2, [r3, #0]
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	f3bf 8f6f 	isb	sy
    }
 800f1a8:	e001      	b.n	800f1ae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800f1aa:	f7ff f8ed 	bl	800e388 <xTaskResumeAll>
    }
 800f1ae:	bf00      	nop
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	20001000 	.word	0x20001000
 800f1bc:	20001004 	.word	0x20001004
 800f1c0:	e000ed04 	.word	0xe000ed04

0800f1c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800f1c4:	b480      	push	{r7}
 800f1c6:	b085      	sub	sp, #20
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1cc:	4b0e      	ldr	r3, [pc, #56]	; (800f208 <prvGetNextExpireTime+0x44>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d101      	bne.n	800f1da <prvGetNextExpireTime+0x16>
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	e000      	b.n	800f1dc <prvGetNextExpireTime+0x18>
 800f1da:	2200      	movs	r2, #0
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d105      	bne.n	800f1f4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1e8:	4b07      	ldr	r3, [pc, #28]	; (800f208 <prvGetNextExpireTime+0x44>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	60fb      	str	r3, [r7, #12]
 800f1f2:	e001      	b.n	800f1f8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
    }
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3714      	adds	r7, #20
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	20000ffc 	.word	0x20000ffc

0800f20c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800f214:	f7ff f9b4 	bl	800e580 <xTaskGetTickCount>
 800f218:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800f21a:	4b0b      	ldr	r3, [pc, #44]	; (800f248 <prvSampleTimeNow+0x3c>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	68fa      	ldr	r2, [r7, #12]
 800f220:	429a      	cmp	r2, r3
 800f222:	d205      	bcs.n	800f230 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800f224:	f000 f912 	bl	800f44c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2201      	movs	r2, #1
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	e002      	b.n	800f236 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800f236:	4a04      	ldr	r2, [pc, #16]	; (800f248 <prvSampleTimeNow+0x3c>)
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800f23c:	68fb      	ldr	r3, [r7, #12]
    }
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	2000100c 	.word	0x2000100c

0800f24c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b086      	sub	sp, #24
 800f250:	af00      	add	r7, sp, #0
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	607a      	str	r2, [r7, #4]
 800f258:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800f25a:	2300      	movs	r3, #0
 800f25c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d812      	bhi.n	800f298 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	1ad2      	subs	r2, r2, r3
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	699b      	ldr	r3, [r3, #24]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d302      	bcc.n	800f286 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800f280:	2301      	movs	r3, #1
 800f282:	617b      	str	r3, [r7, #20]
 800f284:	e01b      	b.n	800f2be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f286:	4b10      	ldr	r3, [pc, #64]	; (800f2c8 <prvInsertTimerInActiveList+0x7c>)
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	3304      	adds	r3, #4
 800f28e:	4619      	mov	r1, r3
 800f290:	4610      	mov	r0, r2
 800f292:	f7fe f8f8 	bl	800d486 <vListInsert>
 800f296:	e012      	b.n	800f2be <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d206      	bcs.n	800f2ae <prvInsertTimerInActiveList+0x62>
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d302      	bcc.n	800f2ae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	617b      	str	r3, [r7, #20]
 800f2ac:	e007      	b.n	800f2be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f2ae:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <prvInsertTimerInActiveList+0x80>)
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	f7fe f8e4 	bl	800d486 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800f2be:	697b      	ldr	r3, [r7, #20]
    }
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	20001000 	.word	0x20001000
 800f2cc:	20000ffc 	.word	0x20000ffc

0800f2d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b088      	sub	sp, #32
 800f2d4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f2d6:	e0a6      	b.n	800f426 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f2c0 80a2 	blt.w	800f424 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	695b      	ldr	r3, [r3, #20]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d004      	beq.n	800f2f6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fe f901 	bl	800d4f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2f6:	1d3b      	adds	r3, r7, #4
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff ff87 	bl	800f20c <prvSampleTimeNow>
 800f2fe:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	3b01      	subs	r3, #1
 800f304:	2b08      	cmp	r3, #8
 800f306:	f200 808e 	bhi.w	800f426 <prvProcessReceivedCommands+0x156>
 800f30a:	a201      	add	r2, pc, #4	; (adr r2, 800f310 <prvProcessReceivedCommands+0x40>)
 800f30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f310:	0800f335 	.word	0x0800f335
 800f314:	0800f335 	.word	0x0800f335
 800f318:	0800f39d 	.word	0x0800f39d
 800f31c:	0800f3b1 	.word	0x0800f3b1
 800f320:	0800f3fb 	.word	0x0800f3fb
 800f324:	0800f335 	.word	0x0800f335
 800f328:	0800f335 	.word	0x0800f335
 800f32c:	0800f39d 	.word	0x0800f39d
 800f330:	0800f3b1 	.word	0x0800f3b1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f33a:	f043 0301 	orr.w	r3, r3, #1
 800f33e:	b2da      	uxtb	r2, r3
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	699b      	ldr	r3, [r3, #24]
 800f34c:	18d1      	adds	r1, r2, r3
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	69ba      	ldr	r2, [r7, #24]
 800f352:	69f8      	ldr	r0, [r7, #28]
 800f354:	f7ff ff7a 	bl	800f24c <prvInsertTimerInActiveList>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d063      	beq.n	800f426 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f364:	f003 0304 	and.w	r3, r3, #4
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d009      	beq.n	800f380 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	699b      	ldr	r3, [r3, #24]
 800f372:	4413      	add	r3, r2
 800f374:	69ba      	ldr	r2, [r7, #24]
 800f376:	4619      	mov	r1, r3
 800f378:	69f8      	ldr	r0, [r7, #28]
 800f37a:	f7ff fe71 	bl	800f060 <prvReloadTimer>
 800f37e:	e008      	b.n	800f392 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f386:	f023 0301 	bic.w	r3, r3, #1
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	6a1b      	ldr	r3, [r3, #32]
 800f396:	69f8      	ldr	r0, [r7, #28]
 800f398:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800f39a:	e044      	b.n	800f426 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3a2:	f023 0301 	bic.w	r3, r3, #1
 800f3a6:	b2da      	uxtb	r2, r3
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800f3ae:	e03a      	b.n	800f426 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3b6:	f043 0301 	orr.w	r3, r3, #1
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f3c2:	68fa      	ldr	r2, [r7, #12]
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	699b      	ldr	r3, [r3, #24]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10a      	bne.n	800f3e6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800f3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	617b      	str	r3, [r7, #20]
    }
 800f3e2:	bf00      	nop
 800f3e4:	e7fe      	b.n	800f3e4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	699a      	ldr	r2, [r3, #24]
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	18d1      	adds	r1, r2, r3
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	69ba      	ldr	r2, [r7, #24]
 800f3f2:	69f8      	ldr	r0, [r7, #28]
 800f3f4:	f7ff ff2a 	bl	800f24c <prvInsertTimerInActiveList>
                        break;
 800f3f8:	e015      	b.n	800f426 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f400:	f003 0302 	and.w	r3, r3, #2
 800f404:	2b00      	cmp	r3, #0
 800f406:	d103      	bne.n	800f410 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 800f408:	69f8      	ldr	r0, [r7, #28]
 800f40a:	f000 fb6f 	bl	800faec <vPortFree>
 800f40e:	e00a      	b.n	800f426 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f416:	f023 0301 	bic.w	r3, r3, #1
 800f41a:	b2da      	uxtb	r2, r3
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800f422:	e000      	b.n	800f426 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800f424:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f426:	4b08      	ldr	r3, [pc, #32]	; (800f448 <prvProcessReceivedCommands+0x178>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f107 0108 	add.w	r1, r7, #8
 800f42e:	2200      	movs	r2, #0
 800f430:	4618      	mov	r0, r3
 800f432:	f7fe fa8b 	bl	800d94c <xQueueReceive>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	f47f af4d 	bne.w	800f2d8 <prvProcessReceivedCommands+0x8>
        }
    }
 800f43e:	bf00      	nop
 800f440:	bf00      	nop
 800f442:	3720      	adds	r7, #32
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	20001004 	.word	0x20001004

0800f44c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f452:	e009      	b.n	800f468 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f454:	4b0e      	ldr	r3, [pc, #56]	; (800f490 <prvSwitchTimerLists+0x44>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800f45e:	f04f 31ff 	mov.w	r1, #4294967295
 800f462:	6838      	ldr	r0, [r7, #0]
 800f464:	f7ff fe1e 	bl	800f0a4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f468:	4b09      	ldr	r3, [pc, #36]	; (800f490 <prvSwitchTimerLists+0x44>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1f0      	bne.n	800f454 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800f472:	4b07      	ldr	r3, [pc, #28]	; (800f490 <prvSwitchTimerLists+0x44>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800f478:	4b06      	ldr	r3, [pc, #24]	; (800f494 <prvSwitchTimerLists+0x48>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a04      	ldr	r2, [pc, #16]	; (800f490 <prvSwitchTimerLists+0x44>)
 800f47e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800f480:	4a04      	ldr	r2, [pc, #16]	; (800f494 <prvSwitchTimerLists+0x48>)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6013      	str	r3, [r2, #0]
    }
 800f486:	bf00      	nop
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20000ffc 	.word	0x20000ffc
 800f494:	20001000 	.word	0x20001000

0800f498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800f498:	b580      	push	{r7, lr}
 800f49a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800f49c:	f000 f964 	bl	800f768 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800f4a0:	4b12      	ldr	r3, [pc, #72]	; (800f4ec <prvCheckForValidListAndQueue+0x54>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d11d      	bne.n	800f4e4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800f4a8:	4811      	ldr	r0, [pc, #68]	; (800f4f0 <prvCheckForValidListAndQueue+0x58>)
 800f4aa:	f7fd ffbf 	bl	800d42c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800f4ae:	4811      	ldr	r0, [pc, #68]	; (800f4f4 <prvCheckForValidListAndQueue+0x5c>)
 800f4b0:	f7fd ffbc 	bl	800d42c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800f4b4:	4b10      	ldr	r3, [pc, #64]	; (800f4f8 <prvCheckForValidListAndQueue+0x60>)
 800f4b6:	4a0e      	ldr	r2, [pc, #56]	; (800f4f0 <prvCheckForValidListAndQueue+0x58>)
 800f4b8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800f4ba:	4b10      	ldr	r3, [pc, #64]	; (800f4fc <prvCheckForValidListAndQueue+0x64>)
 800f4bc:	4a0d      	ldr	r2, [pc, #52]	; (800f4f4 <prvCheckForValidListAndQueue+0x5c>)
 800f4be:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	210c      	movs	r1, #12
 800f4c4:	200a      	movs	r0, #10
 800f4c6:	f7fe f8d1 	bl	800d66c <xQueueGenericCreate>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	4a07      	ldr	r2, [pc, #28]	; (800f4ec <prvCheckForValidListAndQueue+0x54>)
 800f4ce:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800f4d0:	4b06      	ldr	r3, [pc, #24]	; (800f4ec <prvCheckForValidListAndQueue+0x54>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d005      	beq.n	800f4e4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4d8:	4b04      	ldr	r3, [pc, #16]	; (800f4ec <prvCheckForValidListAndQueue+0x54>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4908      	ldr	r1, [pc, #32]	; (800f500 <prvCheckForValidListAndQueue+0x68>)
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fe fc42 	bl	800dd68 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800f4e4:	f000 f970 	bl	800f7c8 <vPortExitCritical>
    }
 800f4e8:	bf00      	nop
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	20001004 	.word	0x20001004
 800f4f0:	20000fd4 	.word	0x20000fd4
 800f4f4:	20000fe8 	.word	0x20000fe8
 800f4f8:	20000ffc 	.word	0x20000ffc
 800f4fc:	20001000 	.word	0x20001000
 800f500:	08010dac 	.word	0x08010dac

0800f504 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800f504:	b480      	push	{r7}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	3b04      	subs	r3, #4
 800f514:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f51c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	3b04      	subs	r3, #4
 800f522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	f023 0201 	bic.w	r2, r3, #1
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3b04      	subs	r3, #4
 800f532:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800f534:	4a0c      	ldr	r2, [pc, #48]	; (800f568 <pxPortInitialiseStack+0x64>)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	3b14      	subs	r3, #20
 800f53e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	3b04      	subs	r3, #4
 800f54a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f06f 0202 	mvn.w	r2, #2
 800f552:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	3b20      	subs	r3, #32
 800f558:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800f55a:	68fb      	ldr	r3, [r7, #12]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3714      	adds	r7, #20
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr
 800f568:	0800f56d 	.word	0x0800f56d

0800f56c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f56c:	b480      	push	{r7}
 800f56e:	b085      	sub	sp, #20
 800f570:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800f572:	2300      	movs	r3, #0
 800f574:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800f576:	4b12      	ldr	r3, [pc, #72]	; (800f5c0 <prvTaskExitError+0x54>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f57e:	d00a      	beq.n	800f596 <prvTaskExitError+0x2a>
        __asm volatile
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	60fb      	str	r3, [r7, #12]
    }
 800f592:	bf00      	nop
 800f594:	e7fe      	b.n	800f594 <prvTaskExitError+0x28>
        __asm volatile
 800f596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59a:	f383 8811 	msr	BASEPRI, r3
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	f3bf 8f4f 	dsb	sy
 800f5a6:	60bb      	str	r3, [r7, #8]
    }
 800f5a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800f5aa:	bf00      	nop
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d0fc      	beq.n	800f5ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800f5b2:	bf00      	nop
 800f5b4:	bf00      	nop
 800f5b6:	3714      	adds	r7, #20
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr
 800f5c0:	2000004c 	.word	0x2000004c
	...

0800f5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800f5d0:	4b07      	ldr	r3, [pc, #28]	; (800f5f0 <pxCurrentTCBConst2>)
 800f5d2:	6819      	ldr	r1, [r3, #0]
 800f5d4:	6808      	ldr	r0, [r1, #0]
 800f5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5da:	f380 8809 	msr	PSP, r0
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	f04f 0000 	mov.w	r0, #0
 800f5e6:	f380 8811 	msr	BASEPRI, r0
 800f5ea:	4770      	bx	lr
 800f5ec:	f3af 8000 	nop.w

0800f5f0 <pxCurrentTCBConst2>:
 800f5f0:	20000ed0 	.word	0x20000ed0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800f5f4:	bf00      	nop
 800f5f6:	bf00      	nop

0800f5f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800f5f8:	4808      	ldr	r0, [pc, #32]	; (800f61c <prvPortStartFirstTask+0x24>)
 800f5fa:	6800      	ldr	r0, [r0, #0]
 800f5fc:	6800      	ldr	r0, [r0, #0]
 800f5fe:	f380 8808 	msr	MSP, r0
 800f602:	f04f 0000 	mov.w	r0, #0
 800f606:	f380 8814 	msr	CONTROL, r0
 800f60a:	b662      	cpsie	i
 800f60c:	b661      	cpsie	f
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	df00      	svc	0
 800f618:	bf00      	nop
 800f61a:	0000      	.short	0x0000
 800f61c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800f620:	bf00      	nop
 800f622:	bf00      	nop

0800f624 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b086      	sub	sp, #24
 800f628:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f62a:	4b46      	ldr	r3, [pc, #280]	; (800f744 <xPortStartScheduler+0x120>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a46      	ldr	r2, [pc, #280]	; (800f748 <xPortStartScheduler+0x124>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d10a      	bne.n	800f64a <xPortStartScheduler+0x26>
        __asm volatile
 800f634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f638:	f383 8811 	msr	BASEPRI, r3
 800f63c:	f3bf 8f6f 	isb	sy
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	613b      	str	r3, [r7, #16]
    }
 800f646:	bf00      	nop
 800f648:	e7fe      	b.n	800f648 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f64a:	4b3e      	ldr	r3, [pc, #248]	; (800f744 <xPortStartScheduler+0x120>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	4a3f      	ldr	r2, [pc, #252]	; (800f74c <xPortStartScheduler+0x128>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d10a      	bne.n	800f66a <xPortStartScheduler+0x46>
        __asm volatile
 800f654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f658:	f383 8811 	msr	BASEPRI, r3
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	f3bf 8f4f 	dsb	sy
 800f664:	60fb      	str	r3, [r7, #12]
    }
 800f666:	bf00      	nop
 800f668:	e7fe      	b.n	800f668 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f66a:	4b39      	ldr	r3, [pc, #228]	; (800f750 <xPortStartScheduler+0x12c>)
 800f66c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	b2db      	uxtb	r3, r3
 800f674:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	22ff      	movs	r2, #255	; 0xff
 800f67a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	b2db      	uxtb	r3, r3
 800f682:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	b2db      	uxtb	r3, r3
 800f688:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f68c:	b2da      	uxtb	r2, r3
 800f68e:	4b31      	ldr	r3, [pc, #196]	; (800f754 <xPortStartScheduler+0x130>)
 800f690:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f692:	4b31      	ldr	r3, [pc, #196]	; (800f758 <xPortStartScheduler+0x134>)
 800f694:	2207      	movs	r2, #7
 800f696:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f698:	e009      	b.n	800f6ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800f69a:	4b2f      	ldr	r3, [pc, #188]	; (800f758 <xPortStartScheduler+0x134>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	4a2d      	ldr	r2, [pc, #180]	; (800f758 <xPortStartScheduler+0x134>)
 800f6a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6a4:	78fb      	ldrb	r3, [r7, #3]
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6ae:	78fb      	ldrb	r3, [r7, #3]
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6b6:	2b80      	cmp	r3, #128	; 0x80
 800f6b8:	d0ef      	beq.n	800f69a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6ba:	4b27      	ldr	r3, [pc, #156]	; (800f758 <xPortStartScheduler+0x134>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f1c3 0307 	rsb	r3, r3, #7
 800f6c2:	2b04      	cmp	r3, #4
 800f6c4:	d00a      	beq.n	800f6dc <xPortStartScheduler+0xb8>
        __asm volatile
 800f6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ca:	f383 8811 	msr	BASEPRI, r3
 800f6ce:	f3bf 8f6f 	isb	sy
 800f6d2:	f3bf 8f4f 	dsb	sy
 800f6d6:	60bb      	str	r3, [r7, #8]
    }
 800f6d8:	bf00      	nop
 800f6da:	e7fe      	b.n	800f6da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f6dc:	4b1e      	ldr	r3, [pc, #120]	; (800f758 <xPortStartScheduler+0x134>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	021b      	lsls	r3, r3, #8
 800f6e2:	4a1d      	ldr	r2, [pc, #116]	; (800f758 <xPortStartScheduler+0x134>)
 800f6e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6e6:	4b1c      	ldr	r3, [pc, #112]	; (800f758 <xPortStartScheduler+0x134>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6ee:	4a1a      	ldr	r2, [pc, #104]	; (800f758 <xPortStartScheduler+0x134>)
 800f6f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	b2da      	uxtb	r2, r3
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800f6fa:	4b18      	ldr	r3, [pc, #96]	; (800f75c <xPortStartScheduler+0x138>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4a17      	ldr	r2, [pc, #92]	; (800f75c <xPortStartScheduler+0x138>)
 800f700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f704:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800f706:	4b15      	ldr	r3, [pc, #84]	; (800f75c <xPortStartScheduler+0x138>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a14      	ldr	r2, [pc, #80]	; (800f75c <xPortStartScheduler+0x138>)
 800f70c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f710:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800f712:	f000 f8db 	bl	800f8cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800f716:	4b12      	ldr	r3, [pc, #72]	; (800f760 <xPortStartScheduler+0x13c>)
 800f718:	2200      	movs	r2, #0
 800f71a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800f71c:	f000 f8fa 	bl	800f914 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f720:	4b10      	ldr	r3, [pc, #64]	; (800f764 <xPortStartScheduler+0x140>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a0f      	ldr	r2, [pc, #60]	; (800f764 <xPortStartScheduler+0x140>)
 800f726:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f72a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800f72c:	f7ff ff64 	bl	800f5f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800f730:	f7ff f84c 	bl	800e7cc <vTaskSwitchContext>
    prvTaskExitError();
 800f734:	f7ff ff1a 	bl	800f56c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3718      	adds	r7, #24
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	e000ed00 	.word	0xe000ed00
 800f748:	410fc271 	.word	0x410fc271
 800f74c:	410fc270 	.word	0x410fc270
 800f750:	e000e400 	.word	0xe000e400
 800f754:	20001010 	.word	0x20001010
 800f758:	20001014 	.word	0x20001014
 800f75c:	e000ed20 	.word	0xe000ed20
 800f760:	2000004c 	.word	0x2000004c
 800f764:	e000ef34 	.word	0xe000ef34

0800f768 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
        __asm volatile
 800f76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	607b      	str	r3, [r7, #4]
    }
 800f780:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800f782:	4b0f      	ldr	r3, [pc, #60]	; (800f7c0 <vPortEnterCritical+0x58>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	3301      	adds	r3, #1
 800f788:	4a0d      	ldr	r2, [pc, #52]	; (800f7c0 <vPortEnterCritical+0x58>)
 800f78a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800f78c:	4b0c      	ldr	r3, [pc, #48]	; (800f7c0 <vPortEnterCritical+0x58>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b01      	cmp	r3, #1
 800f792:	d10f      	bne.n	800f7b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f794:	4b0b      	ldr	r3, [pc, #44]	; (800f7c4 <vPortEnterCritical+0x5c>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00a      	beq.n	800f7b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800f79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a2:	f383 8811 	msr	BASEPRI, r3
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	603b      	str	r3, [r7, #0]
    }
 800f7b0:	bf00      	nop
 800f7b2:	e7fe      	b.n	800f7b2 <vPortEnterCritical+0x4a>
    }
}
 800f7b4:	bf00      	nop
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	2000004c 	.word	0x2000004c
 800f7c4:	e000ed04 	.word	0xe000ed04

0800f7c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800f7ce:	4b12      	ldr	r3, [pc, #72]	; (800f818 <vPortExitCritical+0x50>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d10a      	bne.n	800f7ec <vPortExitCritical+0x24>
        __asm volatile
 800f7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7da:	f383 8811 	msr	BASEPRI, r3
 800f7de:	f3bf 8f6f 	isb	sy
 800f7e2:	f3bf 8f4f 	dsb	sy
 800f7e6:	607b      	str	r3, [r7, #4]
    }
 800f7e8:	bf00      	nop
 800f7ea:	e7fe      	b.n	800f7ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800f7ec:	4b0a      	ldr	r3, [pc, #40]	; (800f818 <vPortExitCritical+0x50>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	3b01      	subs	r3, #1
 800f7f2:	4a09      	ldr	r2, [pc, #36]	; (800f818 <vPortExitCritical+0x50>)
 800f7f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800f7f6:	4b08      	ldr	r3, [pc, #32]	; (800f818 <vPortExitCritical+0x50>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d105      	bne.n	800f80a <vPortExitCritical+0x42>
 800f7fe:	2300      	movs	r3, #0
 800f800:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800f808:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800f80a:	bf00      	nop
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	2000004c 	.word	0x2000004c
 800f81c:	00000000 	.word	0x00000000

0800f820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800f820:	f3ef 8009 	mrs	r0, PSP
 800f824:	f3bf 8f6f 	isb	sy
 800f828:	4b15      	ldr	r3, [pc, #84]	; (800f880 <pxCurrentTCBConst>)
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	f01e 0f10 	tst.w	lr, #16
 800f830:	bf08      	it	eq
 800f832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83a:	6010      	str	r0, [r2, #0]
 800f83c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f840:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f844:	f380 8811 	msr	BASEPRI, r0
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	f3bf 8f6f 	isb	sy
 800f850:	f7fe ffbc 	bl	800e7cc <vTaskSwitchContext>
 800f854:	f04f 0000 	mov.w	r0, #0
 800f858:	f380 8811 	msr	BASEPRI, r0
 800f85c:	bc09      	pop	{r0, r3}
 800f85e:	6819      	ldr	r1, [r3, #0]
 800f860:	6808      	ldr	r0, [r1, #0]
 800f862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f866:	f01e 0f10 	tst.w	lr, #16
 800f86a:	bf08      	it	eq
 800f86c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f870:	f380 8809 	msr	PSP, r0
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	f3af 8000 	nop.w

0800f880 <pxCurrentTCBConst>:
 800f880:	20000ed0 	.word	0x20000ed0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800f884:	bf00      	nop
 800f886:	bf00      	nop

0800f888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
        __asm volatile
 800f88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	607b      	str	r3, [r7, #4]
    }
 800f8a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800f8a2:	f7fe fe7d 	bl	800e5a0 <xTaskIncrementTick>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d003      	beq.n	800f8b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8ac:	4b06      	ldr	r3, [pc, #24]	; (800f8c8 <SysTick_Handler+0x40>)
 800f8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8b2:	601a      	str	r2, [r3, #0]
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	f383 8811 	msr	BASEPRI, r3
    }
 800f8be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800f8c0:	bf00      	nop
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	e000ed04 	.word	0xe000ed04

0800f8cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f8d0:	4b0b      	ldr	r3, [pc, #44]	; (800f900 <vPortSetupTimerInterrupt+0x34>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f8d6:	4b0b      	ldr	r3, [pc, #44]	; (800f904 <vPortSetupTimerInterrupt+0x38>)
 800f8d8:	2200      	movs	r2, #0
 800f8da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f8dc:	4b0a      	ldr	r3, [pc, #40]	; (800f908 <vPortSetupTimerInterrupt+0x3c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a0a      	ldr	r2, [pc, #40]	; (800f90c <vPortSetupTimerInterrupt+0x40>)
 800f8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e6:	099b      	lsrs	r3, r3, #6
 800f8e8:	4a09      	ldr	r2, [pc, #36]	; (800f910 <vPortSetupTimerInterrupt+0x44>)
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f8ee:	4b04      	ldr	r3, [pc, #16]	; (800f900 <vPortSetupTimerInterrupt+0x34>)
 800f8f0:	2207      	movs	r2, #7
 800f8f2:	601a      	str	r2, [r3, #0]
}
 800f8f4:	bf00      	nop
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	e000e010 	.word	0xe000e010
 800f904:	e000e018 	.word	0xe000e018
 800f908:	2000001c 	.word	0x2000001c
 800f90c:	10624dd3 	.word	0x10624dd3
 800f910:	e000e014 	.word	0xe000e014

0800f914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800f914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f924 <vPortEnableVFP+0x10>
 800f918:	6801      	ldr	r1, [r0, #0]
 800f91a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f91e:	6001      	str	r1, [r0, #0]
 800f920:	4770      	bx	lr
 800f922:	0000      	.short	0x0000
 800f924:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800f928:	bf00      	nop
 800f92a:	bf00      	nop

0800f92c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b08a      	sub	sp, #40	; 0x28
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800f934:	2300      	movs	r3, #0
 800f936:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800f938:	f7fe fd18 	bl	800e36c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800f93c:	4b65      	ldr	r3, [pc, #404]	; (800fad4 <pvPortMalloc+0x1a8>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d101      	bne.n	800f948 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800f944:	f000 f934 	bl	800fbb0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f948:	4b63      	ldr	r3, [pc, #396]	; (800fad8 <pvPortMalloc+0x1ac>)
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4013      	ands	r3, r2
 800f950:	2b00      	cmp	r3, #0
 800f952:	f040 80a7 	bne.w	800faa4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d02d      	beq.n	800f9b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800f95c:	2208      	movs	r2, #8
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	429a      	cmp	r2, r3
 800f966:	d227      	bcs.n	800f9b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800f968:	2208      	movs	r2, #8
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4413      	add	r3, r2
 800f96e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f003 0307 	and.w	r3, r3, #7
 800f976:	2b00      	cmp	r3, #0
 800f978:	d021      	beq.n	800f9be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f023 0307 	bic.w	r3, r3, #7
 800f980:	3308      	adds	r3, #8
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	429a      	cmp	r2, r3
 800f986:	d214      	bcs.n	800f9b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f023 0307 	bic.w	r3, r3, #7
 800f98e:	3308      	adds	r3, #8
 800f990:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f003 0307 	and.w	r3, r3, #7
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d010      	beq.n	800f9be <pvPortMalloc+0x92>
        __asm volatile
 800f99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a0:	f383 8811 	msr	BASEPRI, r3
 800f9a4:	f3bf 8f6f 	isb	sy
 800f9a8:	f3bf 8f4f 	dsb	sy
 800f9ac:	617b      	str	r3, [r7, #20]
    }
 800f9ae:	bf00      	nop
 800f9b0:	e7fe      	b.n	800f9b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9b6:	e002      	b.n	800f9be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	607b      	str	r3, [r7, #4]
 800f9bc:	e000      	b.n	800f9c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d06e      	beq.n	800faa4 <pvPortMalloc+0x178>
 800f9c6:	4b45      	ldr	r3, [pc, #276]	; (800fadc <pvPortMalloc+0x1b0>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d869      	bhi.n	800faa4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800f9d0:	4b43      	ldr	r3, [pc, #268]	; (800fae0 <pvPortMalloc+0x1b4>)
 800f9d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800f9d4:	4b42      	ldr	r3, [pc, #264]	; (800fae0 <pvPortMalloc+0x1b4>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9da:	e004      	b.n	800f9e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d903      	bls.n	800f9f8 <pvPortMalloc+0xcc>
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d1f1      	bne.n	800f9dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800f9f8:	4b36      	ldr	r3, [pc, #216]	; (800fad4 <pvPortMalloc+0x1a8>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d050      	beq.n	800faa4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2208      	movs	r2, #8
 800fa08:	4413      	add	r3, r2
 800fa0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	6a3b      	ldr	r3, [r7, #32]
 800fa12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	1ad2      	subs	r2, r2, r3
 800fa1c:	2308      	movs	r3, #8
 800fa1e:	005b      	lsls	r3, r3, #1
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d91f      	bls.n	800fa64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fa24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4413      	add	r3, r2
 800fa2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	f003 0307 	and.w	r3, r3, #7
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d00a      	beq.n	800fa4c <pvPortMalloc+0x120>
        __asm volatile
 800fa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3a:	f383 8811 	msr	BASEPRI, r3
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	613b      	str	r3, [r7, #16]
    }
 800fa48:	bf00      	nop
 800fa4a:	e7fe      	b.n	800fa4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4e:	685a      	ldr	r2, [r3, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	1ad2      	subs	r2, r2, r3
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa5e:	69b8      	ldr	r0, [r7, #24]
 800fa60:	f000 f908 	bl	800fc74 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa64:	4b1d      	ldr	r3, [pc, #116]	; (800fadc <pvPortMalloc+0x1b0>)
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	1ad3      	subs	r3, r2, r3
 800fa6e:	4a1b      	ldr	r2, [pc, #108]	; (800fadc <pvPortMalloc+0x1b0>)
 800fa70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa72:	4b1a      	ldr	r3, [pc, #104]	; (800fadc <pvPortMalloc+0x1b0>)
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	4b1b      	ldr	r3, [pc, #108]	; (800fae4 <pvPortMalloc+0x1b8>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d203      	bcs.n	800fa86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa7e:	4b17      	ldr	r3, [pc, #92]	; (800fadc <pvPortMalloc+0x1b0>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4a18      	ldr	r2, [pc, #96]	; (800fae4 <pvPortMalloc+0x1b8>)
 800fa84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	685a      	ldr	r2, [r3, #4]
 800fa8a:	4b13      	ldr	r3, [pc, #76]	; (800fad8 <pvPortMalloc+0x1ac>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	431a      	orrs	r2, r3
 800fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa96:	2200      	movs	r2, #0
 800fa98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800fa9a:	4b13      	ldr	r3, [pc, #76]	; (800fae8 <pvPortMalloc+0x1bc>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	4a11      	ldr	r2, [pc, #68]	; (800fae8 <pvPortMalloc+0x1bc>)
 800faa2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800faa4:	f7fe fc70 	bl	800e388 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	f003 0307 	and.w	r3, r3, #7
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d00a      	beq.n	800fac8 <pvPortMalloc+0x19c>
        __asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	60fb      	str	r3, [r7, #12]
    }
 800fac4:	bf00      	nop
 800fac6:	e7fe      	b.n	800fac6 <pvPortMalloc+0x19a>
    return pvReturn;
 800fac8:	69fb      	ldr	r3, [r7, #28]
}
 800faca:	4618      	mov	r0, r3
 800facc:	3728      	adds	r7, #40	; 0x28
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	20013c20 	.word	0x20013c20
 800fad8:	20013c34 	.word	0x20013c34
 800fadc:	20013c24 	.word	0x20013c24
 800fae0:	20013c18 	.word	0x20013c18
 800fae4:	20013c28 	.word	0x20013c28
 800fae8:	20013c2c 	.word	0x20013c2c

0800faec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d04d      	beq.n	800fb9a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800fafe:	2308      	movs	r3, #8
 800fb00:	425b      	negs	r3, r3
 800fb02:	697a      	ldr	r2, [r7, #20]
 800fb04:	4413      	add	r3, r2
 800fb06:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	685a      	ldr	r2, [r3, #4]
 800fb10:	4b24      	ldr	r3, [pc, #144]	; (800fba4 <vPortFree+0xb8>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4013      	ands	r3, r2
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d10a      	bne.n	800fb30 <vPortFree+0x44>
        __asm volatile
 800fb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1e:	f383 8811 	msr	BASEPRI, r3
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	60fb      	str	r3, [r7, #12]
    }
 800fb2c:	bf00      	nop
 800fb2e:	e7fe      	b.n	800fb2e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00a      	beq.n	800fb4e <vPortFree+0x62>
        __asm volatile
 800fb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	60bb      	str	r3, [r7, #8]
    }
 800fb4a:	bf00      	nop
 800fb4c:	e7fe      	b.n	800fb4c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	685a      	ldr	r2, [r3, #4]
 800fb52:	4b14      	ldr	r3, [pc, #80]	; (800fba4 <vPortFree+0xb8>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4013      	ands	r3, r2
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d01e      	beq.n	800fb9a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d11a      	bne.n	800fb9a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	685a      	ldr	r2, [r3, #4]
 800fb68:	4b0e      	ldr	r3, [pc, #56]	; (800fba4 <vPortFree+0xb8>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	43db      	mvns	r3, r3
 800fb6e:	401a      	ands	r2, r3
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800fb74:	f7fe fbfa 	bl	800e36c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	4b0a      	ldr	r3, [pc, #40]	; (800fba8 <vPortFree+0xbc>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4413      	add	r3, r2
 800fb82:	4a09      	ldr	r2, [pc, #36]	; (800fba8 <vPortFree+0xbc>)
 800fb84:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb86:	6938      	ldr	r0, [r7, #16]
 800fb88:	f000 f874 	bl	800fc74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800fb8c:	4b07      	ldr	r3, [pc, #28]	; (800fbac <vPortFree+0xc0>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	3301      	adds	r3, #1
 800fb92:	4a06      	ldr	r2, [pc, #24]	; (800fbac <vPortFree+0xc0>)
 800fb94:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800fb96:	f7fe fbf7 	bl	800e388 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800fb9a:	bf00      	nop
 800fb9c:	3718      	adds	r7, #24
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	20013c34 	.word	0x20013c34
 800fba8:	20013c24 	.word	0x20013c24
 800fbac:	20013c30 	.word	0x20013c30

0800fbb0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b085      	sub	sp, #20
 800fbb4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fbb6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800fbba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800fbbc:	4b27      	ldr	r3, [pc, #156]	; (800fc5c <prvHeapInit+0xac>)
 800fbbe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f003 0307 	and.w	r3, r3, #7
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d00c      	beq.n	800fbe4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3307      	adds	r3, #7
 800fbce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f023 0307 	bic.w	r3, r3, #7
 800fbd6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fbd8:	68ba      	ldr	r2, [r7, #8]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	1ad3      	subs	r3, r2, r3
 800fbde:	4a1f      	ldr	r2, [pc, #124]	; (800fc5c <prvHeapInit+0xac>)
 800fbe0:	4413      	add	r3, r2
 800fbe2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fbe8:	4a1d      	ldr	r2, [pc, #116]	; (800fc60 <prvHeapInit+0xb0>)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800fbee:	4b1c      	ldr	r3, [pc, #112]	; (800fc60 <prvHeapInit+0xb0>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	68ba      	ldr	r2, [r7, #8]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800fbfc:	2208      	movs	r2, #8
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	1a9b      	subs	r3, r3, r2
 800fc02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f023 0307 	bic.w	r3, r3, #7
 800fc0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	4a15      	ldr	r2, [pc, #84]	; (800fc64 <prvHeapInit+0xb4>)
 800fc10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800fc12:	4b14      	ldr	r3, [pc, #80]	; (800fc64 <prvHeapInit+0xb4>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2200      	movs	r2, #0
 800fc18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800fc1a:	4b12      	ldr	r3, [pc, #72]	; (800fc64 <prvHeapInit+0xb4>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	1ad2      	subs	r2, r2, r3
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc30:	4b0c      	ldr	r3, [pc, #48]	; (800fc64 <prvHeapInit+0xb4>)
 800fc32:	681a      	ldr	r2, [r3, #0]
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	4a0a      	ldr	r2, [pc, #40]	; (800fc68 <prvHeapInit+0xb8>)
 800fc3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	4a09      	ldr	r2, [pc, #36]	; (800fc6c <prvHeapInit+0xbc>)
 800fc46:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc48:	4b09      	ldr	r3, [pc, #36]	; (800fc70 <prvHeapInit+0xc0>)
 800fc4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fc4e:	601a      	str	r2, [r3, #0]
}
 800fc50:	bf00      	nop
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	20001018 	.word	0x20001018
 800fc60:	20013c18 	.word	0x20013c18
 800fc64:	20013c20 	.word	0x20013c20
 800fc68:	20013c28 	.word	0x20013c28
 800fc6c:	20013c24 	.word	0x20013c24
 800fc70:	20013c34 	.word	0x20013c34

0800fc74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc7c:	4b28      	ldr	r3, [pc, #160]	; (800fd20 <prvInsertBlockIntoFreeList+0xac>)
 800fc7e:	60fb      	str	r3, [r7, #12]
 800fc80:	e002      	b.n	800fc88 <prvInsertBlockIntoFreeList+0x14>
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	60fb      	str	r3, [r7, #12]
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d8f7      	bhi.n	800fc82 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	68ba      	ldr	r2, [r7, #8]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d108      	bne.n	800fcb6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	685a      	ldr	r2, [r3, #4]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	441a      	add	r2, r3
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	441a      	add	r2, r3
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d118      	bne.n	800fcfc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	4b15      	ldr	r3, [pc, #84]	; (800fd24 <prvInsertBlockIntoFreeList+0xb0>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d00d      	beq.n	800fcf2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	685a      	ldr	r2, [r3, #4]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	441a      	add	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	601a      	str	r2, [r3, #0]
 800fcf0:	e008      	b.n	800fd04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fcf2:	4b0c      	ldr	r3, [pc, #48]	; (800fd24 <prvInsertBlockIntoFreeList+0xb0>)
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	e003      	b.n	800fd04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d002      	beq.n	800fd12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800fd12:	bf00      	nop
 800fd14:	3714      	adds	r7, #20
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop
 800fd20:	20013c18 	.word	0x20013c18
 800fd24:	20013c20 	.word	0x20013c20

0800fd28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	490e      	ldr	r1, [pc, #56]	; (800fd68 <MX_USB_HOST_Init+0x40>)
 800fd30:	480e      	ldr	r0, [pc, #56]	; (800fd6c <MX_USB_HOST_Init+0x44>)
 800fd32:	f7fb ff29 	bl	800bb88 <USBH_Init>
 800fd36:	4603      	mov	r3, r0
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d001      	beq.n	800fd40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fd3c:	f7f2 f93e 	bl	8001fbc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800fd40:	490b      	ldr	r1, [pc, #44]	; (800fd70 <MX_USB_HOST_Init+0x48>)
 800fd42:	480a      	ldr	r0, [pc, #40]	; (800fd6c <MX_USB_HOST_Init+0x44>)
 800fd44:	f7fb ffae 	bl	800bca4 <USBH_RegisterClass>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fd4e:	f7f2 f935 	bl	8001fbc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fd52:	4806      	ldr	r0, [pc, #24]	; (800fd6c <MX_USB_HOST_Init+0x44>)
 800fd54:	f7fc f832 	bl	800bdbc <USBH_Start>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d001      	beq.n	800fd62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fd5e:	f7f2 f92d 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fd62:	bf00      	nop
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	0800fd89 	.word	0x0800fd89
 800fd6c:	20013c38 	.word	0x20013c38
 800fd70:	20000028 	.word	0x20000028

0800fd74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fd78:	4802      	ldr	r0, [pc, #8]	; (800fd84 <MX_USB_HOST_Process+0x10>)
 800fd7a:	f7fc f82f 	bl	800bddc <USBH_Process>
}
 800fd7e:	bf00      	nop
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	20013c38 	.word	0x20013c38

0800fd88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	460b      	mov	r3, r1
 800fd92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fd94:	78fb      	ldrb	r3, [r7, #3]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	2b04      	cmp	r3, #4
 800fd9a:	d819      	bhi.n	800fdd0 <USBH_UserProcess+0x48>
 800fd9c:	a201      	add	r2, pc, #4	; (adr r2, 800fda4 <USBH_UserProcess+0x1c>)
 800fd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda2:	bf00      	nop
 800fda4:	0800fdd1 	.word	0x0800fdd1
 800fda8:	0800fdc1 	.word	0x0800fdc1
 800fdac:	0800fdd1 	.word	0x0800fdd1
 800fdb0:	0800fdc9 	.word	0x0800fdc9
 800fdb4:	0800fdb9 	.word	0x0800fdb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fdb8:	4b09      	ldr	r3, [pc, #36]	; (800fde0 <USBH_UserProcess+0x58>)
 800fdba:	2203      	movs	r2, #3
 800fdbc:	701a      	strb	r2, [r3, #0]
  break;
 800fdbe:	e008      	b.n	800fdd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fdc0:	4b07      	ldr	r3, [pc, #28]	; (800fde0 <USBH_UserProcess+0x58>)
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	701a      	strb	r2, [r3, #0]
  break;
 800fdc6:	e004      	b.n	800fdd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fdc8:	4b05      	ldr	r3, [pc, #20]	; (800fde0 <USBH_UserProcess+0x58>)
 800fdca:	2201      	movs	r2, #1
 800fdcc:	701a      	strb	r2, [r3, #0]
  break;
 800fdce:	e000      	b.n	800fdd2 <USBH_UserProcess+0x4a>

  default:
  break;
 800fdd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fdd2:	bf00      	nop
 800fdd4:	370c      	adds	r7, #12
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop
 800fde0:	20014010 	.word	0x20014010

0800fde4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08a      	sub	sp, #40	; 0x28
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fdec:	f107 0314 	add.w	r3, r7, #20
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	605a      	str	r2, [r3, #4]
 800fdf6:	609a      	str	r2, [r3, #8]
 800fdf8:	60da      	str	r2, [r3, #12]
 800fdfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe04:	d147      	bne.n	800fe96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe06:	2300      	movs	r3, #0
 800fe08:	613b      	str	r3, [r7, #16]
 800fe0a:	4b25      	ldr	r3, [pc, #148]	; (800fea0 <HAL_HCD_MspInit+0xbc>)
 800fe0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe0e:	4a24      	ldr	r2, [pc, #144]	; (800fea0 <HAL_HCD_MspInit+0xbc>)
 800fe10:	f043 0301 	orr.w	r3, r3, #1
 800fe14:	6313      	str	r3, [r2, #48]	; 0x30
 800fe16:	4b22      	ldr	r3, [pc, #136]	; (800fea0 <HAL_HCD_MspInit+0xbc>)
 800fe18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1a:	f003 0301 	and.w	r3, r3, #1
 800fe1e:	613b      	str	r3, [r7, #16]
 800fe20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800fe22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800fe30:	f107 0314 	add.w	r3, r7, #20
 800fe34:	4619      	mov	r1, r3
 800fe36:	481b      	ldr	r0, [pc, #108]	; (800fea4 <HAL_HCD_MspInit+0xc0>)
 800fe38:	f7f3 fe04 	bl	8003a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800fe3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fe40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe42:	2302      	movs	r3, #2
 800fe44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe46:	2300      	movs	r3, #0
 800fe48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe4e:	230a      	movs	r3, #10
 800fe50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe52:	f107 0314 	add.w	r3, r7, #20
 800fe56:	4619      	mov	r1, r3
 800fe58:	4812      	ldr	r0, [pc, #72]	; (800fea4 <HAL_HCD_MspInit+0xc0>)
 800fe5a:	f7f3 fdf3 	bl	8003a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe5e:	4b10      	ldr	r3, [pc, #64]	; (800fea0 <HAL_HCD_MspInit+0xbc>)
 800fe60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe62:	4a0f      	ldr	r2, [pc, #60]	; (800fea0 <HAL_HCD_MspInit+0xbc>)
 800fe64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe68:	6353      	str	r3, [r2, #52]	; 0x34
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	60fb      	str	r3, [r7, #12]
 800fe6e:	4b0c      	ldr	r3, [pc, #48]	; (800fea0 <HAL_HCD_MspInit+0xbc>)
 800fe70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe72:	4a0b      	ldr	r2, [pc, #44]	; (800fea0 <HAL_HCD_MspInit+0xbc>)
 800fe74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe78:	6453      	str	r3, [r2, #68]	; 0x44
 800fe7a:	4b09      	ldr	r3, [pc, #36]	; (800fea0 <HAL_HCD_MspInit+0xbc>)
 800fe7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fe86:	2200      	movs	r2, #0
 800fe88:	2100      	movs	r1, #0
 800fe8a:	2043      	movs	r0, #67	; 0x43
 800fe8c:	f7f3 fd80 	bl	8003990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fe90:	2043      	movs	r0, #67	; 0x43
 800fe92:	f7f3 fd99 	bl	80039c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fe96:	bf00      	nop
 800fe98:	3728      	adds	r7, #40	; 0x28
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	40023800 	.word	0x40023800
 800fea4:	40020000 	.word	0x40020000

0800fea8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fc fb6f 	bl	800c59a <USBH_LL_IncTimer>
}
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fc fba7 	bl	800c626 <USBH_LL_Connect>
}
 800fed8:	bf00      	nop
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800feee:	4618      	mov	r0, r3
 800fef0:	f7fc fbb0 	bl	800c654 <USBH_LL_Disconnect>
}
 800fef4:	bf00      	nop
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	460b      	mov	r3, r1
 800ff06:	70fb      	strb	r3, [r7, #3]
 800ff08:	4613      	mov	r3, r2
 800ff0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fc fb61 	bl	800c5ee <USBH_LL_PortEnabled>
}
 800ff2c:	bf00      	nop
 800ff2e:	3708      	adds	r7, #8
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fc fb61 	bl	800c60a <USBH_LL_PortDisabled>
}
 800ff48:	bf00      	nop
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d12a      	bne.n	800ffb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ff62:	4a18      	ldr	r2, [pc, #96]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4a15      	ldr	r2, [pc, #84]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff6e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff72:	4b14      	ldr	r3, [pc, #80]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ff78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ff7a:	4b12      	ldr	r3, [pc, #72]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff7c:	2208      	movs	r2, #8
 800ff7e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ff80:	4b10      	ldr	r3, [pc, #64]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff82:	2201      	movs	r2, #1
 800ff84:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff86:	4b0f      	ldr	r3, [pc, #60]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff88:	2200      	movs	r2, #0
 800ff8a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ff8c:	4b0d      	ldr	r3, [pc, #52]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff8e:	2202      	movs	r2, #2
 800ff90:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff92:	4b0c      	ldr	r3, [pc, #48]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff94:	2200      	movs	r2, #0
 800ff96:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ff98:	480a      	ldr	r0, [pc, #40]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ff9a:	f7f3 ff22 	bl	8003de2 <HAL_HCD_Init>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d001      	beq.n	800ffa8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ffa4:	f7f2 f80a 	bl	8001fbc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ffa8:	4806      	ldr	r0, [pc, #24]	; (800ffc4 <USBH_LL_Init+0x74>)
 800ffaa:	f7f4 fb06 	bl	80045ba <HAL_HCD_GetCurrentFrame>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7fc fae2 	bl	800c57c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ffb8:	2300      	movs	r3, #0
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3708      	adds	r7, #8
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	20014014 	.word	0x20014014

0800ffc8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7f4 fa75 	bl	80044ce <HAL_HCD_Start>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ffe8:	7bfb      	ldrb	r3, [r7, #15]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f000 f95c 	bl	80102a8 <USBH_Get_USB_Status>
 800fff0:	4603      	mov	r3, r0
 800fff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fff4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b084      	sub	sp, #16
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010006:	2300      	movs	r3, #0
 8010008:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801000a:	2300      	movs	r3, #0
 801000c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010014:	4618      	mov	r0, r3
 8010016:	f7f4 fa7d 	bl	8004514 <HAL_HCD_Stop>
 801001a:	4603      	mov	r3, r0
 801001c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801001e:	7bfb      	ldrb	r3, [r7, #15]
 8010020:	4618      	mov	r0, r3
 8010022:	f000 f941 	bl	80102a8 <USBH_Get_USB_Status>
 8010026:	4603      	mov	r3, r0
 8010028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801002a:	7bbb      	ldrb	r3, [r7, #14]
}
 801002c:	4618      	mov	r0, r3
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801003c:	2301      	movs	r3, #1
 801003e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010046:	4618      	mov	r0, r3
 8010048:	f7f4 fac5 	bl	80045d6 <HAL_HCD_GetCurrentSpeed>
 801004c:	4603      	mov	r3, r0
 801004e:	2b02      	cmp	r3, #2
 8010050:	d00c      	beq.n	801006c <USBH_LL_GetSpeed+0x38>
 8010052:	2b02      	cmp	r3, #2
 8010054:	d80d      	bhi.n	8010072 <USBH_LL_GetSpeed+0x3e>
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <USBH_LL_GetSpeed+0x2c>
 801005a:	2b01      	cmp	r3, #1
 801005c:	d003      	beq.n	8010066 <USBH_LL_GetSpeed+0x32>
 801005e:	e008      	b.n	8010072 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010060:	2300      	movs	r3, #0
 8010062:	73fb      	strb	r3, [r7, #15]
    break;
 8010064:	e008      	b.n	8010078 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010066:	2301      	movs	r3, #1
 8010068:	73fb      	strb	r3, [r7, #15]
    break;
 801006a:	e005      	b.n	8010078 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801006c:	2302      	movs	r3, #2
 801006e:	73fb      	strb	r3, [r7, #15]
    break;
 8010070:	e002      	b.n	8010078 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010072:	2301      	movs	r3, #1
 8010074:	73fb      	strb	r3, [r7, #15]
    break;
 8010076:	bf00      	nop
  }
  return  speed;
 8010078:	7bfb      	ldrb	r3, [r7, #15]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b084      	sub	sp, #16
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801008a:	2300      	movs	r3, #0
 801008c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801008e:	2300      	movs	r3, #0
 8010090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010098:	4618      	mov	r0, r3
 801009a:	f7f4 fa58 	bl	800454e <HAL_HCD_ResetPort>
 801009e:	4603      	mov	r3, r0
 80100a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80100a2:	7bfb      	ldrb	r3, [r7, #15]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 f8ff 	bl	80102a8 <USBH_Get_USB_Status>
 80100aa:	4603      	mov	r3, r0
 80100ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	460b      	mov	r3, r1
 80100c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80100ca:	78fa      	ldrb	r2, [r7, #3]
 80100cc:	4611      	mov	r1, r2
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7f4 fa5f 	bl	8004592 <HAL_HCD_HC_GetXferCount>
 80100d4:	4603      	mov	r3, r0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3708      	adds	r7, #8
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80100de:	b590      	push	{r4, r7, lr}
 80100e0:	b089      	sub	sp, #36	; 0x24
 80100e2:	af04      	add	r7, sp, #16
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	4608      	mov	r0, r1
 80100e8:	4611      	mov	r1, r2
 80100ea:	461a      	mov	r2, r3
 80100ec:	4603      	mov	r3, r0
 80100ee:	70fb      	strb	r3, [r7, #3]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70bb      	strb	r3, [r7, #2]
 80100f4:	4613      	mov	r3, r2
 80100f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100f8:	2300      	movs	r3, #0
 80100fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100fc:	2300      	movs	r3, #0
 80100fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010106:	787c      	ldrb	r4, [r7, #1]
 8010108:	78ba      	ldrb	r2, [r7, #2]
 801010a:	78f9      	ldrb	r1, [r7, #3]
 801010c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801010e:	9302      	str	r3, [sp, #8]
 8010110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010114:	9301      	str	r3, [sp, #4]
 8010116:	f897 3020 	ldrb.w	r3, [r7, #32]
 801011a:	9300      	str	r3, [sp, #0]
 801011c:	4623      	mov	r3, r4
 801011e:	f7f3 fec2 	bl	8003ea6 <HAL_HCD_HC_Init>
 8010122:	4603      	mov	r3, r0
 8010124:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010126:	7bfb      	ldrb	r3, [r7, #15]
 8010128:	4618      	mov	r0, r3
 801012a:	f000 f8bd 	bl	80102a8 <USBH_Get_USB_Status>
 801012e:	4603      	mov	r3, r0
 8010130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010132:	7bbb      	ldrb	r3, [r7, #14]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3714      	adds	r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	bd90      	pop	{r4, r7, pc}

0801013c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	460b      	mov	r3, r1
 8010146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010148:	2300      	movs	r3, #0
 801014a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801014c:	2300      	movs	r3, #0
 801014e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010156:	78fa      	ldrb	r2, [r7, #3]
 8010158:	4611      	mov	r1, r2
 801015a:	4618      	mov	r0, r3
 801015c:	f7f3 ff32 	bl	8003fc4 <HAL_HCD_HC_Halt>
 8010160:	4603      	mov	r3, r0
 8010162:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010164:	7bfb      	ldrb	r3, [r7, #15]
 8010166:	4618      	mov	r0, r3
 8010168:	f000 f89e 	bl	80102a8 <USBH_Get_USB_Status>
 801016c:	4603      	mov	r3, r0
 801016e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010170:	7bbb      	ldrb	r3, [r7, #14]
}
 8010172:	4618      	mov	r0, r3
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801017a:	b590      	push	{r4, r7, lr}
 801017c:	b089      	sub	sp, #36	; 0x24
 801017e:	af04      	add	r7, sp, #16
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	4608      	mov	r0, r1
 8010184:	4611      	mov	r1, r2
 8010186:	461a      	mov	r2, r3
 8010188:	4603      	mov	r3, r0
 801018a:	70fb      	strb	r3, [r7, #3]
 801018c:	460b      	mov	r3, r1
 801018e:	70bb      	strb	r3, [r7, #2]
 8010190:	4613      	mov	r3, r2
 8010192:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010194:	2300      	movs	r3, #0
 8010196:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80101a2:	787c      	ldrb	r4, [r7, #1]
 80101a4:	78ba      	ldrb	r2, [r7, #2]
 80101a6:	78f9      	ldrb	r1, [r7, #3]
 80101a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80101ac:	9303      	str	r3, [sp, #12]
 80101ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80101b0:	9302      	str	r3, [sp, #8]
 80101b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b4:	9301      	str	r3, [sp, #4]
 80101b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	4623      	mov	r3, r4
 80101be:	f7f3 ff25 	bl	800400c <HAL_HCD_HC_SubmitRequest>
 80101c2:	4603      	mov	r3, r0
 80101c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80101c6:	7bfb      	ldrb	r3, [r7, #15]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f000 f86d 	bl	80102a8 <USBH_Get_USB_Status>
 80101ce:	4603      	mov	r3, r0
 80101d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3714      	adds	r7, #20
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd90      	pop	{r4, r7, pc}

080101dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	460b      	mov	r3, r1
 80101e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80101ee:	78fa      	ldrb	r2, [r7, #3]
 80101f0:	4611      	mov	r1, r2
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7f4 f9b9 	bl	800456a <HAL_HCD_HC_GetURBState>
 80101f8:	4603      	mov	r3, r0
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}

08010202 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b082      	sub	sp, #8
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
 801020a:	460b      	mov	r3, r1
 801020c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010214:	2b01      	cmp	r3, #1
 8010216:	d103      	bne.n	8010220 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010218:	78fb      	ldrb	r3, [r7, #3]
 801021a:	4618      	mov	r0, r3
 801021c:	f000 f870 	bl	8010300 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010220:	20c8      	movs	r0, #200	; 0xc8
 8010222:	f7f2 fed9 	bl	8002fd8 <HAL_Delay>
  return USBH_OK;
 8010226:	2300      	movs	r3, #0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	460b      	mov	r3, r1
 801023a:	70fb      	strb	r3, [r7, #3]
 801023c:	4613      	mov	r3, r2
 801023e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010246:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010248:	78fb      	ldrb	r3, [r7, #3]
 801024a:	68fa      	ldr	r2, [r7, #12]
 801024c:	212c      	movs	r1, #44	; 0x2c
 801024e:	fb01 f303 	mul.w	r3, r1, r3
 8010252:	4413      	add	r3, r2
 8010254:	333b      	adds	r3, #59	; 0x3b
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d009      	beq.n	8010270 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801025c:	78fb      	ldrb	r3, [r7, #3]
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	212c      	movs	r1, #44	; 0x2c
 8010262:	fb01 f303 	mul.w	r3, r1, r3
 8010266:	4413      	add	r3, r2
 8010268:	3354      	adds	r3, #84	; 0x54
 801026a:	78ba      	ldrb	r2, [r7, #2]
 801026c:	701a      	strb	r2, [r3, #0]
 801026e:	e008      	b.n	8010282 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010270:	78fb      	ldrb	r3, [r7, #3]
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	212c      	movs	r1, #44	; 0x2c
 8010276:	fb01 f303 	mul.w	r3, r1, r3
 801027a:	4413      	add	r3, r2
 801027c:	3355      	adds	r3, #85	; 0x55
 801027e:	78ba      	ldrb	r2, [r7, #2]
 8010280:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010282:	2300      	movs	r3, #0
}
 8010284:	4618      	mov	r0, r3
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7f2 fe9d 	bl	8002fd8 <HAL_Delay>
}
 801029e:	bf00      	nop
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
	...

080102a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	4603      	mov	r3, r0
 80102b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80102b2:	2300      	movs	r3, #0
 80102b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80102b6:	79fb      	ldrb	r3, [r7, #7]
 80102b8:	2b03      	cmp	r3, #3
 80102ba:	d817      	bhi.n	80102ec <USBH_Get_USB_Status+0x44>
 80102bc:	a201      	add	r2, pc, #4	; (adr r2, 80102c4 <USBH_Get_USB_Status+0x1c>)
 80102be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c2:	bf00      	nop
 80102c4:	080102d5 	.word	0x080102d5
 80102c8:	080102db 	.word	0x080102db
 80102cc:	080102e1 	.word	0x080102e1
 80102d0:	080102e7 	.word	0x080102e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80102d4:	2300      	movs	r3, #0
 80102d6:	73fb      	strb	r3, [r7, #15]
    break;
 80102d8:	e00b      	b.n	80102f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80102da:	2302      	movs	r3, #2
 80102dc:	73fb      	strb	r3, [r7, #15]
    break;
 80102de:	e008      	b.n	80102f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80102e0:	2301      	movs	r3, #1
 80102e2:	73fb      	strb	r3, [r7, #15]
    break;
 80102e4:	e005      	b.n	80102f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80102e6:	2302      	movs	r3, #2
 80102e8:	73fb      	strb	r3, [r7, #15]
    break;
 80102ea:	e002      	b.n	80102f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80102ec:	2302      	movs	r3, #2
 80102ee:	73fb      	strb	r3, [r7, #15]
    break;
 80102f0:	bf00      	nop
  }
  return usb_status;
 80102f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3714      	adds	r7, #20
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr

08010300 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	4603      	mov	r3, r0
 8010308:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801030a:	79fb      	ldrb	r3, [r7, #7]
 801030c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801030e:	79fb      	ldrb	r3, [r7, #7]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d102      	bne.n	801031a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010314:	2300      	movs	r3, #0
 8010316:	73fb      	strb	r3, [r7, #15]
 8010318:	e001      	b.n	801031e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801031a:	2301      	movs	r3, #1
 801031c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801031e:	7bfb      	ldrb	r3, [r7, #15]
 8010320:	461a      	mov	r2, r3
 8010322:	2101      	movs	r1, #1
 8010324:	4803      	ldr	r0, [pc, #12]	; (8010334 <MX_DriverVbusFS+0x34>)
 8010326:	f7f3 fd29 	bl	8003d7c <HAL_GPIO_WritePin>
}
 801032a:	bf00      	nop
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	40020800 	.word	0x40020800

08010338 <__libc_init_array>:
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	4d0d      	ldr	r5, [pc, #52]	; (8010370 <__libc_init_array+0x38>)
 801033c:	4c0d      	ldr	r4, [pc, #52]	; (8010374 <__libc_init_array+0x3c>)
 801033e:	1b64      	subs	r4, r4, r5
 8010340:	10a4      	asrs	r4, r4, #2
 8010342:	2600      	movs	r6, #0
 8010344:	42a6      	cmp	r6, r4
 8010346:	d109      	bne.n	801035c <__libc_init_array+0x24>
 8010348:	4d0b      	ldr	r5, [pc, #44]	; (8010378 <__libc_init_array+0x40>)
 801034a:	4c0c      	ldr	r4, [pc, #48]	; (801037c <__libc_init_array+0x44>)
 801034c:	f000 fcac 	bl	8010ca8 <_init>
 8010350:	1b64      	subs	r4, r4, r5
 8010352:	10a4      	asrs	r4, r4, #2
 8010354:	2600      	movs	r6, #0
 8010356:	42a6      	cmp	r6, r4
 8010358:	d105      	bne.n	8010366 <__libc_init_array+0x2e>
 801035a:	bd70      	pop	{r4, r5, r6, pc}
 801035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010360:	4798      	blx	r3
 8010362:	3601      	adds	r6, #1
 8010364:	e7ee      	b.n	8010344 <__libc_init_array+0xc>
 8010366:	f855 3b04 	ldr.w	r3, [r5], #4
 801036a:	4798      	blx	r3
 801036c:	3601      	adds	r6, #1
 801036e:	e7f2      	b.n	8010356 <__libc_init_array+0x1e>
 8010370:	0801162c 	.word	0x0801162c
 8010374:	0801162c 	.word	0x0801162c
 8010378:	0801162c 	.word	0x0801162c
 801037c:	08011630 	.word	0x08011630

08010380 <malloc>:
 8010380:	4b02      	ldr	r3, [pc, #8]	; (801038c <malloc+0xc>)
 8010382:	4601      	mov	r1, r0
 8010384:	6818      	ldr	r0, [r3, #0]
 8010386:	f000 b88d 	b.w	80104a4 <_malloc_r>
 801038a:	bf00      	nop
 801038c:	20000050 	.word	0x20000050

08010390 <free>:
 8010390:	4b02      	ldr	r3, [pc, #8]	; (801039c <free+0xc>)
 8010392:	4601      	mov	r1, r0
 8010394:	6818      	ldr	r0, [r3, #0]
 8010396:	f000 b819 	b.w	80103cc <_free_r>
 801039a:	bf00      	nop
 801039c:	20000050 	.word	0x20000050

080103a0 <memcpy>:
 80103a0:	440a      	add	r2, r1
 80103a2:	4291      	cmp	r1, r2
 80103a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80103a8:	d100      	bne.n	80103ac <memcpy+0xc>
 80103aa:	4770      	bx	lr
 80103ac:	b510      	push	{r4, lr}
 80103ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103b6:	4291      	cmp	r1, r2
 80103b8:	d1f9      	bne.n	80103ae <memcpy+0xe>
 80103ba:	bd10      	pop	{r4, pc}

080103bc <memset>:
 80103bc:	4402      	add	r2, r0
 80103be:	4603      	mov	r3, r0
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d100      	bne.n	80103c6 <memset+0xa>
 80103c4:	4770      	bx	lr
 80103c6:	f803 1b01 	strb.w	r1, [r3], #1
 80103ca:	e7f9      	b.n	80103c0 <memset+0x4>

080103cc <_free_r>:
 80103cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103ce:	2900      	cmp	r1, #0
 80103d0:	d044      	beq.n	801045c <_free_r+0x90>
 80103d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103d6:	9001      	str	r0, [sp, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f1a1 0404 	sub.w	r4, r1, #4
 80103de:	bfb8      	it	lt
 80103e0:	18e4      	addlt	r4, r4, r3
 80103e2:	f000 f903 	bl	80105ec <__malloc_lock>
 80103e6:	4a1e      	ldr	r2, [pc, #120]	; (8010460 <_free_r+0x94>)
 80103e8:	9801      	ldr	r0, [sp, #4]
 80103ea:	6813      	ldr	r3, [r2, #0]
 80103ec:	b933      	cbnz	r3, 80103fc <_free_r+0x30>
 80103ee:	6063      	str	r3, [r4, #4]
 80103f0:	6014      	str	r4, [r2, #0]
 80103f2:	b003      	add	sp, #12
 80103f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103f8:	f000 b8fe 	b.w	80105f8 <__malloc_unlock>
 80103fc:	42a3      	cmp	r3, r4
 80103fe:	d908      	bls.n	8010412 <_free_r+0x46>
 8010400:	6825      	ldr	r5, [r4, #0]
 8010402:	1961      	adds	r1, r4, r5
 8010404:	428b      	cmp	r3, r1
 8010406:	bf01      	itttt	eq
 8010408:	6819      	ldreq	r1, [r3, #0]
 801040a:	685b      	ldreq	r3, [r3, #4]
 801040c:	1949      	addeq	r1, r1, r5
 801040e:	6021      	streq	r1, [r4, #0]
 8010410:	e7ed      	b.n	80103ee <_free_r+0x22>
 8010412:	461a      	mov	r2, r3
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	b10b      	cbz	r3, 801041c <_free_r+0x50>
 8010418:	42a3      	cmp	r3, r4
 801041a:	d9fa      	bls.n	8010412 <_free_r+0x46>
 801041c:	6811      	ldr	r1, [r2, #0]
 801041e:	1855      	adds	r5, r2, r1
 8010420:	42a5      	cmp	r5, r4
 8010422:	d10b      	bne.n	801043c <_free_r+0x70>
 8010424:	6824      	ldr	r4, [r4, #0]
 8010426:	4421      	add	r1, r4
 8010428:	1854      	adds	r4, r2, r1
 801042a:	42a3      	cmp	r3, r4
 801042c:	6011      	str	r1, [r2, #0]
 801042e:	d1e0      	bne.n	80103f2 <_free_r+0x26>
 8010430:	681c      	ldr	r4, [r3, #0]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	6053      	str	r3, [r2, #4]
 8010436:	4421      	add	r1, r4
 8010438:	6011      	str	r1, [r2, #0]
 801043a:	e7da      	b.n	80103f2 <_free_r+0x26>
 801043c:	d902      	bls.n	8010444 <_free_r+0x78>
 801043e:	230c      	movs	r3, #12
 8010440:	6003      	str	r3, [r0, #0]
 8010442:	e7d6      	b.n	80103f2 <_free_r+0x26>
 8010444:	6825      	ldr	r5, [r4, #0]
 8010446:	1961      	adds	r1, r4, r5
 8010448:	428b      	cmp	r3, r1
 801044a:	bf04      	itt	eq
 801044c:	6819      	ldreq	r1, [r3, #0]
 801044e:	685b      	ldreq	r3, [r3, #4]
 8010450:	6063      	str	r3, [r4, #4]
 8010452:	bf04      	itt	eq
 8010454:	1949      	addeq	r1, r1, r5
 8010456:	6021      	streq	r1, [r4, #0]
 8010458:	6054      	str	r4, [r2, #4]
 801045a:	e7ca      	b.n	80103f2 <_free_r+0x26>
 801045c:	b003      	add	sp, #12
 801045e:	bd30      	pop	{r4, r5, pc}
 8010460:	20014318 	.word	0x20014318

08010464 <sbrk_aligned>:
 8010464:	b570      	push	{r4, r5, r6, lr}
 8010466:	4e0e      	ldr	r6, [pc, #56]	; (80104a0 <sbrk_aligned+0x3c>)
 8010468:	460c      	mov	r4, r1
 801046a:	6831      	ldr	r1, [r6, #0]
 801046c:	4605      	mov	r5, r0
 801046e:	b911      	cbnz	r1, 8010476 <sbrk_aligned+0x12>
 8010470:	f000 f88c 	bl	801058c <_sbrk_r>
 8010474:	6030      	str	r0, [r6, #0]
 8010476:	4621      	mov	r1, r4
 8010478:	4628      	mov	r0, r5
 801047a:	f000 f887 	bl	801058c <_sbrk_r>
 801047e:	1c43      	adds	r3, r0, #1
 8010480:	d00a      	beq.n	8010498 <sbrk_aligned+0x34>
 8010482:	1cc4      	adds	r4, r0, #3
 8010484:	f024 0403 	bic.w	r4, r4, #3
 8010488:	42a0      	cmp	r0, r4
 801048a:	d007      	beq.n	801049c <sbrk_aligned+0x38>
 801048c:	1a21      	subs	r1, r4, r0
 801048e:	4628      	mov	r0, r5
 8010490:	f000 f87c 	bl	801058c <_sbrk_r>
 8010494:	3001      	adds	r0, #1
 8010496:	d101      	bne.n	801049c <sbrk_aligned+0x38>
 8010498:	f04f 34ff 	mov.w	r4, #4294967295
 801049c:	4620      	mov	r0, r4
 801049e:	bd70      	pop	{r4, r5, r6, pc}
 80104a0:	2001431c 	.word	0x2001431c

080104a4 <_malloc_r>:
 80104a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a8:	1ccd      	adds	r5, r1, #3
 80104aa:	f025 0503 	bic.w	r5, r5, #3
 80104ae:	3508      	adds	r5, #8
 80104b0:	2d0c      	cmp	r5, #12
 80104b2:	bf38      	it	cc
 80104b4:	250c      	movcc	r5, #12
 80104b6:	2d00      	cmp	r5, #0
 80104b8:	4607      	mov	r7, r0
 80104ba:	db01      	blt.n	80104c0 <_malloc_r+0x1c>
 80104bc:	42a9      	cmp	r1, r5
 80104be:	d905      	bls.n	80104cc <_malloc_r+0x28>
 80104c0:	230c      	movs	r3, #12
 80104c2:	603b      	str	r3, [r7, #0]
 80104c4:	2600      	movs	r6, #0
 80104c6:	4630      	mov	r0, r6
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	4e2e      	ldr	r6, [pc, #184]	; (8010588 <_malloc_r+0xe4>)
 80104ce:	f000 f88d 	bl	80105ec <__malloc_lock>
 80104d2:	6833      	ldr	r3, [r6, #0]
 80104d4:	461c      	mov	r4, r3
 80104d6:	bb34      	cbnz	r4, 8010526 <_malloc_r+0x82>
 80104d8:	4629      	mov	r1, r5
 80104da:	4638      	mov	r0, r7
 80104dc:	f7ff ffc2 	bl	8010464 <sbrk_aligned>
 80104e0:	1c43      	adds	r3, r0, #1
 80104e2:	4604      	mov	r4, r0
 80104e4:	d14d      	bne.n	8010582 <_malloc_r+0xde>
 80104e6:	6834      	ldr	r4, [r6, #0]
 80104e8:	4626      	mov	r6, r4
 80104ea:	2e00      	cmp	r6, #0
 80104ec:	d140      	bne.n	8010570 <_malloc_r+0xcc>
 80104ee:	6823      	ldr	r3, [r4, #0]
 80104f0:	4631      	mov	r1, r6
 80104f2:	4638      	mov	r0, r7
 80104f4:	eb04 0803 	add.w	r8, r4, r3
 80104f8:	f000 f848 	bl	801058c <_sbrk_r>
 80104fc:	4580      	cmp	r8, r0
 80104fe:	d13a      	bne.n	8010576 <_malloc_r+0xd2>
 8010500:	6821      	ldr	r1, [r4, #0]
 8010502:	3503      	adds	r5, #3
 8010504:	1a6d      	subs	r5, r5, r1
 8010506:	f025 0503 	bic.w	r5, r5, #3
 801050a:	3508      	adds	r5, #8
 801050c:	2d0c      	cmp	r5, #12
 801050e:	bf38      	it	cc
 8010510:	250c      	movcc	r5, #12
 8010512:	4629      	mov	r1, r5
 8010514:	4638      	mov	r0, r7
 8010516:	f7ff ffa5 	bl	8010464 <sbrk_aligned>
 801051a:	3001      	adds	r0, #1
 801051c:	d02b      	beq.n	8010576 <_malloc_r+0xd2>
 801051e:	6823      	ldr	r3, [r4, #0]
 8010520:	442b      	add	r3, r5
 8010522:	6023      	str	r3, [r4, #0]
 8010524:	e00e      	b.n	8010544 <_malloc_r+0xa0>
 8010526:	6822      	ldr	r2, [r4, #0]
 8010528:	1b52      	subs	r2, r2, r5
 801052a:	d41e      	bmi.n	801056a <_malloc_r+0xc6>
 801052c:	2a0b      	cmp	r2, #11
 801052e:	d916      	bls.n	801055e <_malloc_r+0xba>
 8010530:	1961      	adds	r1, r4, r5
 8010532:	42a3      	cmp	r3, r4
 8010534:	6025      	str	r5, [r4, #0]
 8010536:	bf18      	it	ne
 8010538:	6059      	strne	r1, [r3, #4]
 801053a:	6863      	ldr	r3, [r4, #4]
 801053c:	bf08      	it	eq
 801053e:	6031      	streq	r1, [r6, #0]
 8010540:	5162      	str	r2, [r4, r5]
 8010542:	604b      	str	r3, [r1, #4]
 8010544:	4638      	mov	r0, r7
 8010546:	f104 060b 	add.w	r6, r4, #11
 801054a:	f000 f855 	bl	80105f8 <__malloc_unlock>
 801054e:	f026 0607 	bic.w	r6, r6, #7
 8010552:	1d23      	adds	r3, r4, #4
 8010554:	1af2      	subs	r2, r6, r3
 8010556:	d0b6      	beq.n	80104c6 <_malloc_r+0x22>
 8010558:	1b9b      	subs	r3, r3, r6
 801055a:	50a3      	str	r3, [r4, r2]
 801055c:	e7b3      	b.n	80104c6 <_malloc_r+0x22>
 801055e:	6862      	ldr	r2, [r4, #4]
 8010560:	42a3      	cmp	r3, r4
 8010562:	bf0c      	ite	eq
 8010564:	6032      	streq	r2, [r6, #0]
 8010566:	605a      	strne	r2, [r3, #4]
 8010568:	e7ec      	b.n	8010544 <_malloc_r+0xa0>
 801056a:	4623      	mov	r3, r4
 801056c:	6864      	ldr	r4, [r4, #4]
 801056e:	e7b2      	b.n	80104d6 <_malloc_r+0x32>
 8010570:	4634      	mov	r4, r6
 8010572:	6876      	ldr	r6, [r6, #4]
 8010574:	e7b9      	b.n	80104ea <_malloc_r+0x46>
 8010576:	230c      	movs	r3, #12
 8010578:	603b      	str	r3, [r7, #0]
 801057a:	4638      	mov	r0, r7
 801057c:	f000 f83c 	bl	80105f8 <__malloc_unlock>
 8010580:	e7a1      	b.n	80104c6 <_malloc_r+0x22>
 8010582:	6025      	str	r5, [r4, #0]
 8010584:	e7de      	b.n	8010544 <_malloc_r+0xa0>
 8010586:	bf00      	nop
 8010588:	20014318 	.word	0x20014318

0801058c <_sbrk_r>:
 801058c:	b538      	push	{r3, r4, r5, lr}
 801058e:	4d06      	ldr	r5, [pc, #24]	; (80105a8 <_sbrk_r+0x1c>)
 8010590:	2300      	movs	r3, #0
 8010592:	4604      	mov	r4, r0
 8010594:	4608      	mov	r0, r1
 8010596:	602b      	str	r3, [r5, #0]
 8010598:	f000 fb78 	bl	8010c8c <_sbrk>
 801059c:	1c43      	adds	r3, r0, #1
 801059e:	d102      	bne.n	80105a6 <_sbrk_r+0x1a>
 80105a0:	682b      	ldr	r3, [r5, #0]
 80105a2:	b103      	cbz	r3, 80105a6 <_sbrk_r+0x1a>
 80105a4:	6023      	str	r3, [r4, #0]
 80105a6:	bd38      	pop	{r3, r4, r5, pc}
 80105a8:	20014320 	.word	0x20014320

080105ac <siprintf>:
 80105ac:	b40e      	push	{r1, r2, r3}
 80105ae:	b500      	push	{lr}
 80105b0:	b09c      	sub	sp, #112	; 0x70
 80105b2:	ab1d      	add	r3, sp, #116	; 0x74
 80105b4:	9002      	str	r0, [sp, #8]
 80105b6:	9006      	str	r0, [sp, #24]
 80105b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105bc:	4809      	ldr	r0, [pc, #36]	; (80105e4 <siprintf+0x38>)
 80105be:	9107      	str	r1, [sp, #28]
 80105c0:	9104      	str	r1, [sp, #16]
 80105c2:	4909      	ldr	r1, [pc, #36]	; (80105e8 <siprintf+0x3c>)
 80105c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80105c8:	9105      	str	r1, [sp, #20]
 80105ca:	6800      	ldr	r0, [r0, #0]
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	a902      	add	r1, sp, #8
 80105d0:	f000 f874 	bl	80106bc <_svfiprintf_r>
 80105d4:	9b02      	ldr	r3, [sp, #8]
 80105d6:	2200      	movs	r2, #0
 80105d8:	701a      	strb	r2, [r3, #0]
 80105da:	b01c      	add	sp, #112	; 0x70
 80105dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80105e0:	b003      	add	sp, #12
 80105e2:	4770      	bx	lr
 80105e4:	20000050 	.word	0x20000050
 80105e8:	ffff0208 	.word	0xffff0208

080105ec <__malloc_lock>:
 80105ec:	4801      	ldr	r0, [pc, #4]	; (80105f4 <__malloc_lock+0x8>)
 80105ee:	f000 baf9 	b.w	8010be4 <__retarget_lock_acquire_recursive>
 80105f2:	bf00      	nop
 80105f4:	20014324 	.word	0x20014324

080105f8 <__malloc_unlock>:
 80105f8:	4801      	ldr	r0, [pc, #4]	; (8010600 <__malloc_unlock+0x8>)
 80105fa:	f000 baf4 	b.w	8010be6 <__retarget_lock_release_recursive>
 80105fe:	bf00      	nop
 8010600:	20014324 	.word	0x20014324

08010604 <__ssputs_r>:
 8010604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010608:	688e      	ldr	r6, [r1, #8]
 801060a:	429e      	cmp	r6, r3
 801060c:	4682      	mov	sl, r0
 801060e:	460c      	mov	r4, r1
 8010610:	4690      	mov	r8, r2
 8010612:	461f      	mov	r7, r3
 8010614:	d838      	bhi.n	8010688 <__ssputs_r+0x84>
 8010616:	898a      	ldrh	r2, [r1, #12]
 8010618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801061c:	d032      	beq.n	8010684 <__ssputs_r+0x80>
 801061e:	6825      	ldr	r5, [r4, #0]
 8010620:	6909      	ldr	r1, [r1, #16]
 8010622:	eba5 0901 	sub.w	r9, r5, r1
 8010626:	6965      	ldr	r5, [r4, #20]
 8010628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801062c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010630:	3301      	adds	r3, #1
 8010632:	444b      	add	r3, r9
 8010634:	106d      	asrs	r5, r5, #1
 8010636:	429d      	cmp	r5, r3
 8010638:	bf38      	it	cc
 801063a:	461d      	movcc	r5, r3
 801063c:	0553      	lsls	r3, r2, #21
 801063e:	d531      	bpl.n	80106a4 <__ssputs_r+0xa0>
 8010640:	4629      	mov	r1, r5
 8010642:	f7ff ff2f 	bl	80104a4 <_malloc_r>
 8010646:	4606      	mov	r6, r0
 8010648:	b950      	cbnz	r0, 8010660 <__ssputs_r+0x5c>
 801064a:	230c      	movs	r3, #12
 801064c:	f8ca 3000 	str.w	r3, [sl]
 8010650:	89a3      	ldrh	r3, [r4, #12]
 8010652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010656:	81a3      	strh	r3, [r4, #12]
 8010658:	f04f 30ff 	mov.w	r0, #4294967295
 801065c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010660:	6921      	ldr	r1, [r4, #16]
 8010662:	464a      	mov	r2, r9
 8010664:	f7ff fe9c 	bl	80103a0 <memcpy>
 8010668:	89a3      	ldrh	r3, [r4, #12]
 801066a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801066e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010672:	81a3      	strh	r3, [r4, #12]
 8010674:	6126      	str	r6, [r4, #16]
 8010676:	6165      	str	r5, [r4, #20]
 8010678:	444e      	add	r6, r9
 801067a:	eba5 0509 	sub.w	r5, r5, r9
 801067e:	6026      	str	r6, [r4, #0]
 8010680:	60a5      	str	r5, [r4, #8]
 8010682:	463e      	mov	r6, r7
 8010684:	42be      	cmp	r6, r7
 8010686:	d900      	bls.n	801068a <__ssputs_r+0x86>
 8010688:	463e      	mov	r6, r7
 801068a:	6820      	ldr	r0, [r4, #0]
 801068c:	4632      	mov	r2, r6
 801068e:	4641      	mov	r1, r8
 8010690:	f000 faaa 	bl	8010be8 <memmove>
 8010694:	68a3      	ldr	r3, [r4, #8]
 8010696:	1b9b      	subs	r3, r3, r6
 8010698:	60a3      	str	r3, [r4, #8]
 801069a:	6823      	ldr	r3, [r4, #0]
 801069c:	4433      	add	r3, r6
 801069e:	6023      	str	r3, [r4, #0]
 80106a0:	2000      	movs	r0, #0
 80106a2:	e7db      	b.n	801065c <__ssputs_r+0x58>
 80106a4:	462a      	mov	r2, r5
 80106a6:	f000 fab9 	bl	8010c1c <_realloc_r>
 80106aa:	4606      	mov	r6, r0
 80106ac:	2800      	cmp	r0, #0
 80106ae:	d1e1      	bne.n	8010674 <__ssputs_r+0x70>
 80106b0:	6921      	ldr	r1, [r4, #16]
 80106b2:	4650      	mov	r0, sl
 80106b4:	f7ff fe8a 	bl	80103cc <_free_r>
 80106b8:	e7c7      	b.n	801064a <__ssputs_r+0x46>
	...

080106bc <_svfiprintf_r>:
 80106bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c0:	4698      	mov	r8, r3
 80106c2:	898b      	ldrh	r3, [r1, #12]
 80106c4:	061b      	lsls	r3, r3, #24
 80106c6:	b09d      	sub	sp, #116	; 0x74
 80106c8:	4607      	mov	r7, r0
 80106ca:	460d      	mov	r5, r1
 80106cc:	4614      	mov	r4, r2
 80106ce:	d50e      	bpl.n	80106ee <_svfiprintf_r+0x32>
 80106d0:	690b      	ldr	r3, [r1, #16]
 80106d2:	b963      	cbnz	r3, 80106ee <_svfiprintf_r+0x32>
 80106d4:	2140      	movs	r1, #64	; 0x40
 80106d6:	f7ff fee5 	bl	80104a4 <_malloc_r>
 80106da:	6028      	str	r0, [r5, #0]
 80106dc:	6128      	str	r0, [r5, #16]
 80106de:	b920      	cbnz	r0, 80106ea <_svfiprintf_r+0x2e>
 80106e0:	230c      	movs	r3, #12
 80106e2:	603b      	str	r3, [r7, #0]
 80106e4:	f04f 30ff 	mov.w	r0, #4294967295
 80106e8:	e0d1      	b.n	801088e <_svfiprintf_r+0x1d2>
 80106ea:	2340      	movs	r3, #64	; 0x40
 80106ec:	616b      	str	r3, [r5, #20]
 80106ee:	2300      	movs	r3, #0
 80106f0:	9309      	str	r3, [sp, #36]	; 0x24
 80106f2:	2320      	movs	r3, #32
 80106f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80106fc:	2330      	movs	r3, #48	; 0x30
 80106fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80108a8 <_svfiprintf_r+0x1ec>
 8010702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010706:	f04f 0901 	mov.w	r9, #1
 801070a:	4623      	mov	r3, r4
 801070c:	469a      	mov	sl, r3
 801070e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010712:	b10a      	cbz	r2, 8010718 <_svfiprintf_r+0x5c>
 8010714:	2a25      	cmp	r2, #37	; 0x25
 8010716:	d1f9      	bne.n	801070c <_svfiprintf_r+0x50>
 8010718:	ebba 0b04 	subs.w	fp, sl, r4
 801071c:	d00b      	beq.n	8010736 <_svfiprintf_r+0x7a>
 801071e:	465b      	mov	r3, fp
 8010720:	4622      	mov	r2, r4
 8010722:	4629      	mov	r1, r5
 8010724:	4638      	mov	r0, r7
 8010726:	f7ff ff6d 	bl	8010604 <__ssputs_r>
 801072a:	3001      	adds	r0, #1
 801072c:	f000 80aa 	beq.w	8010884 <_svfiprintf_r+0x1c8>
 8010730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010732:	445a      	add	r2, fp
 8010734:	9209      	str	r2, [sp, #36]	; 0x24
 8010736:	f89a 3000 	ldrb.w	r3, [sl]
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 80a2 	beq.w	8010884 <_svfiprintf_r+0x1c8>
 8010740:	2300      	movs	r3, #0
 8010742:	f04f 32ff 	mov.w	r2, #4294967295
 8010746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801074a:	f10a 0a01 	add.w	sl, sl, #1
 801074e:	9304      	str	r3, [sp, #16]
 8010750:	9307      	str	r3, [sp, #28]
 8010752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010756:	931a      	str	r3, [sp, #104]	; 0x68
 8010758:	4654      	mov	r4, sl
 801075a:	2205      	movs	r2, #5
 801075c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010760:	4851      	ldr	r0, [pc, #324]	; (80108a8 <_svfiprintf_r+0x1ec>)
 8010762:	f7ef fd35 	bl	80001d0 <memchr>
 8010766:	9a04      	ldr	r2, [sp, #16]
 8010768:	b9d8      	cbnz	r0, 80107a2 <_svfiprintf_r+0xe6>
 801076a:	06d0      	lsls	r0, r2, #27
 801076c:	bf44      	itt	mi
 801076e:	2320      	movmi	r3, #32
 8010770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010774:	0711      	lsls	r1, r2, #28
 8010776:	bf44      	itt	mi
 8010778:	232b      	movmi	r3, #43	; 0x2b
 801077a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801077e:	f89a 3000 	ldrb.w	r3, [sl]
 8010782:	2b2a      	cmp	r3, #42	; 0x2a
 8010784:	d015      	beq.n	80107b2 <_svfiprintf_r+0xf6>
 8010786:	9a07      	ldr	r2, [sp, #28]
 8010788:	4654      	mov	r4, sl
 801078a:	2000      	movs	r0, #0
 801078c:	f04f 0c0a 	mov.w	ip, #10
 8010790:	4621      	mov	r1, r4
 8010792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010796:	3b30      	subs	r3, #48	; 0x30
 8010798:	2b09      	cmp	r3, #9
 801079a:	d94e      	bls.n	801083a <_svfiprintf_r+0x17e>
 801079c:	b1b0      	cbz	r0, 80107cc <_svfiprintf_r+0x110>
 801079e:	9207      	str	r2, [sp, #28]
 80107a0:	e014      	b.n	80107cc <_svfiprintf_r+0x110>
 80107a2:	eba0 0308 	sub.w	r3, r0, r8
 80107a6:	fa09 f303 	lsl.w	r3, r9, r3
 80107aa:	4313      	orrs	r3, r2
 80107ac:	9304      	str	r3, [sp, #16]
 80107ae:	46a2      	mov	sl, r4
 80107b0:	e7d2      	b.n	8010758 <_svfiprintf_r+0x9c>
 80107b2:	9b03      	ldr	r3, [sp, #12]
 80107b4:	1d19      	adds	r1, r3, #4
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	9103      	str	r1, [sp, #12]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	bfbb      	ittet	lt
 80107be:	425b      	neglt	r3, r3
 80107c0:	f042 0202 	orrlt.w	r2, r2, #2
 80107c4:	9307      	strge	r3, [sp, #28]
 80107c6:	9307      	strlt	r3, [sp, #28]
 80107c8:	bfb8      	it	lt
 80107ca:	9204      	strlt	r2, [sp, #16]
 80107cc:	7823      	ldrb	r3, [r4, #0]
 80107ce:	2b2e      	cmp	r3, #46	; 0x2e
 80107d0:	d10c      	bne.n	80107ec <_svfiprintf_r+0x130>
 80107d2:	7863      	ldrb	r3, [r4, #1]
 80107d4:	2b2a      	cmp	r3, #42	; 0x2a
 80107d6:	d135      	bne.n	8010844 <_svfiprintf_r+0x188>
 80107d8:	9b03      	ldr	r3, [sp, #12]
 80107da:	1d1a      	adds	r2, r3, #4
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	9203      	str	r2, [sp, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	bfb8      	it	lt
 80107e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80107e8:	3402      	adds	r4, #2
 80107ea:	9305      	str	r3, [sp, #20]
 80107ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80108b8 <_svfiprintf_r+0x1fc>
 80107f0:	7821      	ldrb	r1, [r4, #0]
 80107f2:	2203      	movs	r2, #3
 80107f4:	4650      	mov	r0, sl
 80107f6:	f7ef fceb 	bl	80001d0 <memchr>
 80107fa:	b140      	cbz	r0, 801080e <_svfiprintf_r+0x152>
 80107fc:	2340      	movs	r3, #64	; 0x40
 80107fe:	eba0 000a 	sub.w	r0, r0, sl
 8010802:	fa03 f000 	lsl.w	r0, r3, r0
 8010806:	9b04      	ldr	r3, [sp, #16]
 8010808:	4303      	orrs	r3, r0
 801080a:	3401      	adds	r4, #1
 801080c:	9304      	str	r3, [sp, #16]
 801080e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010812:	4826      	ldr	r0, [pc, #152]	; (80108ac <_svfiprintf_r+0x1f0>)
 8010814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010818:	2206      	movs	r2, #6
 801081a:	f7ef fcd9 	bl	80001d0 <memchr>
 801081e:	2800      	cmp	r0, #0
 8010820:	d038      	beq.n	8010894 <_svfiprintf_r+0x1d8>
 8010822:	4b23      	ldr	r3, [pc, #140]	; (80108b0 <_svfiprintf_r+0x1f4>)
 8010824:	bb1b      	cbnz	r3, 801086e <_svfiprintf_r+0x1b2>
 8010826:	9b03      	ldr	r3, [sp, #12]
 8010828:	3307      	adds	r3, #7
 801082a:	f023 0307 	bic.w	r3, r3, #7
 801082e:	3308      	adds	r3, #8
 8010830:	9303      	str	r3, [sp, #12]
 8010832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010834:	4433      	add	r3, r6
 8010836:	9309      	str	r3, [sp, #36]	; 0x24
 8010838:	e767      	b.n	801070a <_svfiprintf_r+0x4e>
 801083a:	fb0c 3202 	mla	r2, ip, r2, r3
 801083e:	460c      	mov	r4, r1
 8010840:	2001      	movs	r0, #1
 8010842:	e7a5      	b.n	8010790 <_svfiprintf_r+0xd4>
 8010844:	2300      	movs	r3, #0
 8010846:	3401      	adds	r4, #1
 8010848:	9305      	str	r3, [sp, #20]
 801084a:	4619      	mov	r1, r3
 801084c:	f04f 0c0a 	mov.w	ip, #10
 8010850:	4620      	mov	r0, r4
 8010852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010856:	3a30      	subs	r2, #48	; 0x30
 8010858:	2a09      	cmp	r2, #9
 801085a:	d903      	bls.n	8010864 <_svfiprintf_r+0x1a8>
 801085c:	2b00      	cmp	r3, #0
 801085e:	d0c5      	beq.n	80107ec <_svfiprintf_r+0x130>
 8010860:	9105      	str	r1, [sp, #20]
 8010862:	e7c3      	b.n	80107ec <_svfiprintf_r+0x130>
 8010864:	fb0c 2101 	mla	r1, ip, r1, r2
 8010868:	4604      	mov	r4, r0
 801086a:	2301      	movs	r3, #1
 801086c:	e7f0      	b.n	8010850 <_svfiprintf_r+0x194>
 801086e:	ab03      	add	r3, sp, #12
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	462a      	mov	r2, r5
 8010874:	4b0f      	ldr	r3, [pc, #60]	; (80108b4 <_svfiprintf_r+0x1f8>)
 8010876:	a904      	add	r1, sp, #16
 8010878:	4638      	mov	r0, r7
 801087a:	f3af 8000 	nop.w
 801087e:	1c42      	adds	r2, r0, #1
 8010880:	4606      	mov	r6, r0
 8010882:	d1d6      	bne.n	8010832 <_svfiprintf_r+0x176>
 8010884:	89ab      	ldrh	r3, [r5, #12]
 8010886:	065b      	lsls	r3, r3, #25
 8010888:	f53f af2c 	bmi.w	80106e4 <_svfiprintf_r+0x28>
 801088c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801088e:	b01d      	add	sp, #116	; 0x74
 8010890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010894:	ab03      	add	r3, sp, #12
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	462a      	mov	r2, r5
 801089a:	4b06      	ldr	r3, [pc, #24]	; (80108b4 <_svfiprintf_r+0x1f8>)
 801089c:	a904      	add	r1, sp, #16
 801089e:	4638      	mov	r0, r7
 80108a0:	f000 f87a 	bl	8010998 <_printf_i>
 80108a4:	e7eb      	b.n	801087e <_svfiprintf_r+0x1c2>
 80108a6:	bf00      	nop
 80108a8:	080115f0 	.word	0x080115f0
 80108ac:	080115fa 	.word	0x080115fa
 80108b0:	00000000 	.word	0x00000000
 80108b4:	08010605 	.word	0x08010605
 80108b8:	080115f6 	.word	0x080115f6

080108bc <_printf_common>:
 80108bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c0:	4616      	mov	r6, r2
 80108c2:	4699      	mov	r9, r3
 80108c4:	688a      	ldr	r2, [r1, #8]
 80108c6:	690b      	ldr	r3, [r1, #16]
 80108c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108cc:	4293      	cmp	r3, r2
 80108ce:	bfb8      	it	lt
 80108d0:	4613      	movlt	r3, r2
 80108d2:	6033      	str	r3, [r6, #0]
 80108d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108d8:	4607      	mov	r7, r0
 80108da:	460c      	mov	r4, r1
 80108dc:	b10a      	cbz	r2, 80108e2 <_printf_common+0x26>
 80108de:	3301      	adds	r3, #1
 80108e0:	6033      	str	r3, [r6, #0]
 80108e2:	6823      	ldr	r3, [r4, #0]
 80108e4:	0699      	lsls	r1, r3, #26
 80108e6:	bf42      	ittt	mi
 80108e8:	6833      	ldrmi	r3, [r6, #0]
 80108ea:	3302      	addmi	r3, #2
 80108ec:	6033      	strmi	r3, [r6, #0]
 80108ee:	6825      	ldr	r5, [r4, #0]
 80108f0:	f015 0506 	ands.w	r5, r5, #6
 80108f4:	d106      	bne.n	8010904 <_printf_common+0x48>
 80108f6:	f104 0a19 	add.w	sl, r4, #25
 80108fa:	68e3      	ldr	r3, [r4, #12]
 80108fc:	6832      	ldr	r2, [r6, #0]
 80108fe:	1a9b      	subs	r3, r3, r2
 8010900:	42ab      	cmp	r3, r5
 8010902:	dc26      	bgt.n	8010952 <_printf_common+0x96>
 8010904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010908:	1e13      	subs	r3, r2, #0
 801090a:	6822      	ldr	r2, [r4, #0]
 801090c:	bf18      	it	ne
 801090e:	2301      	movne	r3, #1
 8010910:	0692      	lsls	r2, r2, #26
 8010912:	d42b      	bmi.n	801096c <_printf_common+0xb0>
 8010914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010918:	4649      	mov	r1, r9
 801091a:	4638      	mov	r0, r7
 801091c:	47c0      	blx	r8
 801091e:	3001      	adds	r0, #1
 8010920:	d01e      	beq.n	8010960 <_printf_common+0xa4>
 8010922:	6823      	ldr	r3, [r4, #0]
 8010924:	68e5      	ldr	r5, [r4, #12]
 8010926:	6832      	ldr	r2, [r6, #0]
 8010928:	f003 0306 	and.w	r3, r3, #6
 801092c:	2b04      	cmp	r3, #4
 801092e:	bf08      	it	eq
 8010930:	1aad      	subeq	r5, r5, r2
 8010932:	68a3      	ldr	r3, [r4, #8]
 8010934:	6922      	ldr	r2, [r4, #16]
 8010936:	bf0c      	ite	eq
 8010938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801093c:	2500      	movne	r5, #0
 801093e:	4293      	cmp	r3, r2
 8010940:	bfc4      	itt	gt
 8010942:	1a9b      	subgt	r3, r3, r2
 8010944:	18ed      	addgt	r5, r5, r3
 8010946:	2600      	movs	r6, #0
 8010948:	341a      	adds	r4, #26
 801094a:	42b5      	cmp	r5, r6
 801094c:	d11a      	bne.n	8010984 <_printf_common+0xc8>
 801094e:	2000      	movs	r0, #0
 8010950:	e008      	b.n	8010964 <_printf_common+0xa8>
 8010952:	2301      	movs	r3, #1
 8010954:	4652      	mov	r2, sl
 8010956:	4649      	mov	r1, r9
 8010958:	4638      	mov	r0, r7
 801095a:	47c0      	blx	r8
 801095c:	3001      	adds	r0, #1
 801095e:	d103      	bne.n	8010968 <_printf_common+0xac>
 8010960:	f04f 30ff 	mov.w	r0, #4294967295
 8010964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010968:	3501      	adds	r5, #1
 801096a:	e7c6      	b.n	80108fa <_printf_common+0x3e>
 801096c:	18e1      	adds	r1, r4, r3
 801096e:	1c5a      	adds	r2, r3, #1
 8010970:	2030      	movs	r0, #48	; 0x30
 8010972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010976:	4422      	add	r2, r4
 8010978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801097c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010980:	3302      	adds	r3, #2
 8010982:	e7c7      	b.n	8010914 <_printf_common+0x58>
 8010984:	2301      	movs	r3, #1
 8010986:	4622      	mov	r2, r4
 8010988:	4649      	mov	r1, r9
 801098a:	4638      	mov	r0, r7
 801098c:	47c0      	blx	r8
 801098e:	3001      	adds	r0, #1
 8010990:	d0e6      	beq.n	8010960 <_printf_common+0xa4>
 8010992:	3601      	adds	r6, #1
 8010994:	e7d9      	b.n	801094a <_printf_common+0x8e>
	...

08010998 <_printf_i>:
 8010998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801099c:	7e0f      	ldrb	r7, [r1, #24]
 801099e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80109a0:	2f78      	cmp	r7, #120	; 0x78
 80109a2:	4691      	mov	r9, r2
 80109a4:	4680      	mov	r8, r0
 80109a6:	460c      	mov	r4, r1
 80109a8:	469a      	mov	sl, r3
 80109aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80109ae:	d807      	bhi.n	80109c0 <_printf_i+0x28>
 80109b0:	2f62      	cmp	r7, #98	; 0x62
 80109b2:	d80a      	bhi.n	80109ca <_printf_i+0x32>
 80109b4:	2f00      	cmp	r7, #0
 80109b6:	f000 80d8 	beq.w	8010b6a <_printf_i+0x1d2>
 80109ba:	2f58      	cmp	r7, #88	; 0x58
 80109bc:	f000 80a3 	beq.w	8010b06 <_printf_i+0x16e>
 80109c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80109c8:	e03a      	b.n	8010a40 <_printf_i+0xa8>
 80109ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80109ce:	2b15      	cmp	r3, #21
 80109d0:	d8f6      	bhi.n	80109c0 <_printf_i+0x28>
 80109d2:	a101      	add	r1, pc, #4	; (adr r1, 80109d8 <_printf_i+0x40>)
 80109d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109d8:	08010a31 	.word	0x08010a31
 80109dc:	08010a45 	.word	0x08010a45
 80109e0:	080109c1 	.word	0x080109c1
 80109e4:	080109c1 	.word	0x080109c1
 80109e8:	080109c1 	.word	0x080109c1
 80109ec:	080109c1 	.word	0x080109c1
 80109f0:	08010a45 	.word	0x08010a45
 80109f4:	080109c1 	.word	0x080109c1
 80109f8:	080109c1 	.word	0x080109c1
 80109fc:	080109c1 	.word	0x080109c1
 8010a00:	080109c1 	.word	0x080109c1
 8010a04:	08010b51 	.word	0x08010b51
 8010a08:	08010a75 	.word	0x08010a75
 8010a0c:	08010b33 	.word	0x08010b33
 8010a10:	080109c1 	.word	0x080109c1
 8010a14:	080109c1 	.word	0x080109c1
 8010a18:	08010b73 	.word	0x08010b73
 8010a1c:	080109c1 	.word	0x080109c1
 8010a20:	08010a75 	.word	0x08010a75
 8010a24:	080109c1 	.word	0x080109c1
 8010a28:	080109c1 	.word	0x080109c1
 8010a2c:	08010b3b 	.word	0x08010b3b
 8010a30:	682b      	ldr	r3, [r5, #0]
 8010a32:	1d1a      	adds	r2, r3, #4
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	602a      	str	r2, [r5, #0]
 8010a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a40:	2301      	movs	r3, #1
 8010a42:	e0a3      	b.n	8010b8c <_printf_i+0x1f4>
 8010a44:	6820      	ldr	r0, [r4, #0]
 8010a46:	6829      	ldr	r1, [r5, #0]
 8010a48:	0606      	lsls	r6, r0, #24
 8010a4a:	f101 0304 	add.w	r3, r1, #4
 8010a4e:	d50a      	bpl.n	8010a66 <_printf_i+0xce>
 8010a50:	680e      	ldr	r6, [r1, #0]
 8010a52:	602b      	str	r3, [r5, #0]
 8010a54:	2e00      	cmp	r6, #0
 8010a56:	da03      	bge.n	8010a60 <_printf_i+0xc8>
 8010a58:	232d      	movs	r3, #45	; 0x2d
 8010a5a:	4276      	negs	r6, r6
 8010a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a60:	485e      	ldr	r0, [pc, #376]	; (8010bdc <_printf_i+0x244>)
 8010a62:	230a      	movs	r3, #10
 8010a64:	e019      	b.n	8010a9a <_printf_i+0x102>
 8010a66:	680e      	ldr	r6, [r1, #0]
 8010a68:	602b      	str	r3, [r5, #0]
 8010a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a6e:	bf18      	it	ne
 8010a70:	b236      	sxthne	r6, r6
 8010a72:	e7ef      	b.n	8010a54 <_printf_i+0xbc>
 8010a74:	682b      	ldr	r3, [r5, #0]
 8010a76:	6820      	ldr	r0, [r4, #0]
 8010a78:	1d19      	adds	r1, r3, #4
 8010a7a:	6029      	str	r1, [r5, #0]
 8010a7c:	0601      	lsls	r1, r0, #24
 8010a7e:	d501      	bpl.n	8010a84 <_printf_i+0xec>
 8010a80:	681e      	ldr	r6, [r3, #0]
 8010a82:	e002      	b.n	8010a8a <_printf_i+0xf2>
 8010a84:	0646      	lsls	r6, r0, #25
 8010a86:	d5fb      	bpl.n	8010a80 <_printf_i+0xe8>
 8010a88:	881e      	ldrh	r6, [r3, #0]
 8010a8a:	4854      	ldr	r0, [pc, #336]	; (8010bdc <_printf_i+0x244>)
 8010a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8010a8e:	bf0c      	ite	eq
 8010a90:	2308      	moveq	r3, #8
 8010a92:	230a      	movne	r3, #10
 8010a94:	2100      	movs	r1, #0
 8010a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a9a:	6865      	ldr	r5, [r4, #4]
 8010a9c:	60a5      	str	r5, [r4, #8]
 8010a9e:	2d00      	cmp	r5, #0
 8010aa0:	bfa2      	ittt	ge
 8010aa2:	6821      	ldrge	r1, [r4, #0]
 8010aa4:	f021 0104 	bicge.w	r1, r1, #4
 8010aa8:	6021      	strge	r1, [r4, #0]
 8010aaa:	b90e      	cbnz	r6, 8010ab0 <_printf_i+0x118>
 8010aac:	2d00      	cmp	r5, #0
 8010aae:	d04d      	beq.n	8010b4c <_printf_i+0x1b4>
 8010ab0:	4615      	mov	r5, r2
 8010ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8010ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8010aba:	5dc7      	ldrb	r7, [r0, r7]
 8010abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010ac0:	4637      	mov	r7, r6
 8010ac2:	42bb      	cmp	r3, r7
 8010ac4:	460e      	mov	r6, r1
 8010ac6:	d9f4      	bls.n	8010ab2 <_printf_i+0x11a>
 8010ac8:	2b08      	cmp	r3, #8
 8010aca:	d10b      	bne.n	8010ae4 <_printf_i+0x14c>
 8010acc:	6823      	ldr	r3, [r4, #0]
 8010ace:	07de      	lsls	r6, r3, #31
 8010ad0:	d508      	bpl.n	8010ae4 <_printf_i+0x14c>
 8010ad2:	6923      	ldr	r3, [r4, #16]
 8010ad4:	6861      	ldr	r1, [r4, #4]
 8010ad6:	4299      	cmp	r1, r3
 8010ad8:	bfde      	ittt	le
 8010ada:	2330      	movle	r3, #48	; 0x30
 8010adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010ae4:	1b52      	subs	r2, r2, r5
 8010ae6:	6122      	str	r2, [r4, #16]
 8010ae8:	f8cd a000 	str.w	sl, [sp]
 8010aec:	464b      	mov	r3, r9
 8010aee:	aa03      	add	r2, sp, #12
 8010af0:	4621      	mov	r1, r4
 8010af2:	4640      	mov	r0, r8
 8010af4:	f7ff fee2 	bl	80108bc <_printf_common>
 8010af8:	3001      	adds	r0, #1
 8010afa:	d14c      	bne.n	8010b96 <_printf_i+0x1fe>
 8010afc:	f04f 30ff 	mov.w	r0, #4294967295
 8010b00:	b004      	add	sp, #16
 8010b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b06:	4835      	ldr	r0, [pc, #212]	; (8010bdc <_printf_i+0x244>)
 8010b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010b0c:	6829      	ldr	r1, [r5, #0]
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b14:	6029      	str	r1, [r5, #0]
 8010b16:	061d      	lsls	r5, r3, #24
 8010b18:	d514      	bpl.n	8010b44 <_printf_i+0x1ac>
 8010b1a:	07df      	lsls	r7, r3, #31
 8010b1c:	bf44      	itt	mi
 8010b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8010b22:	6023      	strmi	r3, [r4, #0]
 8010b24:	b91e      	cbnz	r6, 8010b2e <_printf_i+0x196>
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	f023 0320 	bic.w	r3, r3, #32
 8010b2c:	6023      	str	r3, [r4, #0]
 8010b2e:	2310      	movs	r3, #16
 8010b30:	e7b0      	b.n	8010a94 <_printf_i+0xfc>
 8010b32:	6823      	ldr	r3, [r4, #0]
 8010b34:	f043 0320 	orr.w	r3, r3, #32
 8010b38:	6023      	str	r3, [r4, #0]
 8010b3a:	2378      	movs	r3, #120	; 0x78
 8010b3c:	4828      	ldr	r0, [pc, #160]	; (8010be0 <_printf_i+0x248>)
 8010b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b42:	e7e3      	b.n	8010b0c <_printf_i+0x174>
 8010b44:	0659      	lsls	r1, r3, #25
 8010b46:	bf48      	it	mi
 8010b48:	b2b6      	uxthmi	r6, r6
 8010b4a:	e7e6      	b.n	8010b1a <_printf_i+0x182>
 8010b4c:	4615      	mov	r5, r2
 8010b4e:	e7bb      	b.n	8010ac8 <_printf_i+0x130>
 8010b50:	682b      	ldr	r3, [r5, #0]
 8010b52:	6826      	ldr	r6, [r4, #0]
 8010b54:	6961      	ldr	r1, [r4, #20]
 8010b56:	1d18      	adds	r0, r3, #4
 8010b58:	6028      	str	r0, [r5, #0]
 8010b5a:	0635      	lsls	r5, r6, #24
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	d501      	bpl.n	8010b64 <_printf_i+0x1cc>
 8010b60:	6019      	str	r1, [r3, #0]
 8010b62:	e002      	b.n	8010b6a <_printf_i+0x1d2>
 8010b64:	0670      	lsls	r0, r6, #25
 8010b66:	d5fb      	bpl.n	8010b60 <_printf_i+0x1c8>
 8010b68:	8019      	strh	r1, [r3, #0]
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	6123      	str	r3, [r4, #16]
 8010b6e:	4615      	mov	r5, r2
 8010b70:	e7ba      	b.n	8010ae8 <_printf_i+0x150>
 8010b72:	682b      	ldr	r3, [r5, #0]
 8010b74:	1d1a      	adds	r2, r3, #4
 8010b76:	602a      	str	r2, [r5, #0]
 8010b78:	681d      	ldr	r5, [r3, #0]
 8010b7a:	6862      	ldr	r2, [r4, #4]
 8010b7c:	2100      	movs	r1, #0
 8010b7e:	4628      	mov	r0, r5
 8010b80:	f7ef fb26 	bl	80001d0 <memchr>
 8010b84:	b108      	cbz	r0, 8010b8a <_printf_i+0x1f2>
 8010b86:	1b40      	subs	r0, r0, r5
 8010b88:	6060      	str	r0, [r4, #4]
 8010b8a:	6863      	ldr	r3, [r4, #4]
 8010b8c:	6123      	str	r3, [r4, #16]
 8010b8e:	2300      	movs	r3, #0
 8010b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b94:	e7a8      	b.n	8010ae8 <_printf_i+0x150>
 8010b96:	6923      	ldr	r3, [r4, #16]
 8010b98:	462a      	mov	r2, r5
 8010b9a:	4649      	mov	r1, r9
 8010b9c:	4640      	mov	r0, r8
 8010b9e:	47d0      	blx	sl
 8010ba0:	3001      	adds	r0, #1
 8010ba2:	d0ab      	beq.n	8010afc <_printf_i+0x164>
 8010ba4:	6823      	ldr	r3, [r4, #0]
 8010ba6:	079b      	lsls	r3, r3, #30
 8010ba8:	d413      	bmi.n	8010bd2 <_printf_i+0x23a>
 8010baa:	68e0      	ldr	r0, [r4, #12]
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	4298      	cmp	r0, r3
 8010bb0:	bfb8      	it	lt
 8010bb2:	4618      	movlt	r0, r3
 8010bb4:	e7a4      	b.n	8010b00 <_printf_i+0x168>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	4632      	mov	r2, r6
 8010bba:	4649      	mov	r1, r9
 8010bbc:	4640      	mov	r0, r8
 8010bbe:	47d0      	blx	sl
 8010bc0:	3001      	adds	r0, #1
 8010bc2:	d09b      	beq.n	8010afc <_printf_i+0x164>
 8010bc4:	3501      	adds	r5, #1
 8010bc6:	68e3      	ldr	r3, [r4, #12]
 8010bc8:	9903      	ldr	r1, [sp, #12]
 8010bca:	1a5b      	subs	r3, r3, r1
 8010bcc:	42ab      	cmp	r3, r5
 8010bce:	dcf2      	bgt.n	8010bb6 <_printf_i+0x21e>
 8010bd0:	e7eb      	b.n	8010baa <_printf_i+0x212>
 8010bd2:	2500      	movs	r5, #0
 8010bd4:	f104 0619 	add.w	r6, r4, #25
 8010bd8:	e7f5      	b.n	8010bc6 <_printf_i+0x22e>
 8010bda:	bf00      	nop
 8010bdc:	08011601 	.word	0x08011601
 8010be0:	08011612 	.word	0x08011612

08010be4 <__retarget_lock_acquire_recursive>:
 8010be4:	4770      	bx	lr

08010be6 <__retarget_lock_release_recursive>:
 8010be6:	4770      	bx	lr

08010be8 <memmove>:
 8010be8:	4288      	cmp	r0, r1
 8010bea:	b510      	push	{r4, lr}
 8010bec:	eb01 0402 	add.w	r4, r1, r2
 8010bf0:	d902      	bls.n	8010bf8 <memmove+0x10>
 8010bf2:	4284      	cmp	r4, r0
 8010bf4:	4623      	mov	r3, r4
 8010bf6:	d807      	bhi.n	8010c08 <memmove+0x20>
 8010bf8:	1e43      	subs	r3, r0, #1
 8010bfa:	42a1      	cmp	r1, r4
 8010bfc:	d008      	beq.n	8010c10 <memmove+0x28>
 8010bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c06:	e7f8      	b.n	8010bfa <memmove+0x12>
 8010c08:	4402      	add	r2, r0
 8010c0a:	4601      	mov	r1, r0
 8010c0c:	428a      	cmp	r2, r1
 8010c0e:	d100      	bne.n	8010c12 <memmove+0x2a>
 8010c10:	bd10      	pop	{r4, pc}
 8010c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c1a:	e7f7      	b.n	8010c0c <memmove+0x24>

08010c1c <_realloc_r>:
 8010c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c20:	4680      	mov	r8, r0
 8010c22:	4614      	mov	r4, r2
 8010c24:	460e      	mov	r6, r1
 8010c26:	b921      	cbnz	r1, 8010c32 <_realloc_r+0x16>
 8010c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	f7ff bc39 	b.w	80104a4 <_malloc_r>
 8010c32:	b92a      	cbnz	r2, 8010c40 <_realloc_r+0x24>
 8010c34:	f7ff fbca 	bl	80103cc <_free_r>
 8010c38:	4625      	mov	r5, r4
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c40:	f000 f81b 	bl	8010c7a <_malloc_usable_size_r>
 8010c44:	4284      	cmp	r4, r0
 8010c46:	4607      	mov	r7, r0
 8010c48:	d802      	bhi.n	8010c50 <_realloc_r+0x34>
 8010c4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010c4e:	d812      	bhi.n	8010c76 <_realloc_r+0x5a>
 8010c50:	4621      	mov	r1, r4
 8010c52:	4640      	mov	r0, r8
 8010c54:	f7ff fc26 	bl	80104a4 <_malloc_r>
 8010c58:	4605      	mov	r5, r0
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	d0ed      	beq.n	8010c3a <_realloc_r+0x1e>
 8010c5e:	42bc      	cmp	r4, r7
 8010c60:	4622      	mov	r2, r4
 8010c62:	4631      	mov	r1, r6
 8010c64:	bf28      	it	cs
 8010c66:	463a      	movcs	r2, r7
 8010c68:	f7ff fb9a 	bl	80103a0 <memcpy>
 8010c6c:	4631      	mov	r1, r6
 8010c6e:	4640      	mov	r0, r8
 8010c70:	f7ff fbac 	bl	80103cc <_free_r>
 8010c74:	e7e1      	b.n	8010c3a <_realloc_r+0x1e>
 8010c76:	4635      	mov	r5, r6
 8010c78:	e7df      	b.n	8010c3a <_realloc_r+0x1e>

08010c7a <_malloc_usable_size_r>:
 8010c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c7e:	1f18      	subs	r0, r3, #4
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	bfbc      	itt	lt
 8010c84:	580b      	ldrlt	r3, [r1, r0]
 8010c86:	18c0      	addlt	r0, r0, r3
 8010c88:	4770      	bx	lr
	...

08010c8c <_sbrk>:
 8010c8c:	4a04      	ldr	r2, [pc, #16]	; (8010ca0 <_sbrk+0x14>)
 8010c8e:	6811      	ldr	r1, [r2, #0]
 8010c90:	4603      	mov	r3, r0
 8010c92:	b909      	cbnz	r1, 8010c98 <_sbrk+0xc>
 8010c94:	4903      	ldr	r1, [pc, #12]	; (8010ca4 <_sbrk+0x18>)
 8010c96:	6011      	str	r1, [r2, #0]
 8010c98:	6810      	ldr	r0, [r2, #0]
 8010c9a:	4403      	add	r3, r0
 8010c9c:	6013      	str	r3, [r2, #0]
 8010c9e:	4770      	bx	lr
 8010ca0:	20014328 	.word	0x20014328
 8010ca4:	20014330 	.word	0x20014330

08010ca8 <_init>:
 8010ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010caa:	bf00      	nop
 8010cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cae:	bc08      	pop	{r3}
 8010cb0:	469e      	mov	lr, r3
 8010cb2:	4770      	bx	lr

08010cb4 <_fini>:
 8010cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cb6:	bf00      	nop
 8010cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cba:	bc08      	pop	{r3}
 8010cbc:	469e      	mov	lr, r3
 8010cbe:	4770      	bx	lr
